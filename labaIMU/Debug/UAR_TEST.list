
UAR_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800e348  0800e348  0001e348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c4  0800e3c4  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3c4  0800e3c4  0001e3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3cc  0800e3cc  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3cc  0800e3cc  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3d0  0800e3d0  0001e3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800e3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20000154  0800e528  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  0800e528  00020bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c927  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb5  00000000  00000000  0003caee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  000417a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001252  00000000  00000000  00042fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be3a  00000000  00000000  000441f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ede7  00000000  00000000  0006002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009772c  00000000  00000000  0007ee13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067e8  00000000  00000000  00116540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e330 	.word	0x0800e330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	0800e330 	.word	0x0800e330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800059a:	f001 fdad 	bl	80020f8 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80005a4:	f107 030f 	add.w	r3, r7, #15
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fded 	bl	800218c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80005bc:	f107 030f 	add.w	r3, r7, #15
 80005c0:	2201      	movs	r2, #1
 80005c2:	2123      	movs	r1, #35	; 0x23
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fde1 	bl	800218c <GYRO_IO_Write>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80005e6:	f001 fd87 	bl	80020f8 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	2201      	movs	r2, #1
 80005ee:	210f      	movs	r1, #15
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fdfd 	bl	80021f0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	2201      	movs	r2, #1
 800060a:	2124      	movs	r1, #36	; 0x24
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fdef 	bl	80021f0 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000618:	b2db      	uxtb	r3, r3
 800061a:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	2201      	movs	r2, #1
 8000620:	2124      	movs	r1, #36	; 0x24
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fdb2 	bl	800218c <GYRO_IO_Write>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000644:	f107 030f 	add.w	r3, r7, #15
 8000648:	2201      	movs	r2, #1
 800064a:	2120      	movs	r1, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fd9d 	bl	800218c <GYRO_IO_Write>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	2300      	movs	r3, #0
 800066a:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800066c:	f107 030f 	add.w	r3, r7, #15
 8000670:	2201      	movs	r2, #1
 8000672:	2130      	movs	r1, #48	; 0x30
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fdbb 	bl	80021f0 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800067a:	f107 030e 	add.w	r3, r7, #14
 800067e:	2201      	movs	r2, #1
 8000680:	2122      	movs	r1, #34	; 0x22
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fdb4 	bl	80021f0 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	121b      	asrs	r3, r3, #8
 8000698:	b25a      	sxtb	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80006bc:	f107 030f 	add.w	r3, r7, #15
 80006c0:	2201      	movs	r2, #1
 80006c2:	2130      	movs	r1, #48	; 0x30
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fd61 	bl	800218c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80006ca:	f107 030e 	add.w	r3, r7, #14
 80006ce:	2201      	movs	r2, #1
 80006d0:	2122      	movs	r1, #34	; 0x22
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fd5a 	bl	800218c <GYRO_IO_Write>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80006ea:	f107 030f 	add.w	r3, r7, #15
 80006ee:	2201      	movs	r2, #1
 80006f0:	2122      	movs	r1, #34	; 0x22
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fd7c 	bl	80021f0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10a      	bne.n	8000714 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e00c      	b.n	800072e <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d109      	bne.n	800072e <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	f023 0308 	bic.w	r3, r3, #8
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	b2db      	uxtb	r3, r3
 800072c:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800072e:	f107 030f 	add.w	r3, r7, #15
 8000732:	2201      	movs	r2, #1
 8000734:	2122      	movs	r1, #34	; 0x22
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fd28 	bl	800218c <GYRO_IO_Write>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800074e:	f107 030f 	add.w	r3, r7, #15
 8000752:	2201      	movs	r2, #1
 8000754:	2122      	movs	r1, #34	; 0x22
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fd4a 	bl	80021f0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d107      	bne.n	8000772 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000768:	b2db      	uxtb	r3, r3
 800076a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e009      	b.n	8000786 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d106      	bne.n	8000786 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f023 0308 	bic.w	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000786:	f107 030f 	add.w	r3, r7, #15
 800078a:	2201      	movs	r2, #1
 800078c:	2122      	movs	r1, #34	; 0x22
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fcfc 	bl	800218c <GYRO_IO_Write>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80007a6:	f107 030f 	add.w	r3, r7, #15
 80007aa:	2201      	movs	r2, #1
 80007ac:	2121      	movs	r1, #33	; 0x21
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fd1e 	bl	80021f0 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80007c8:	f107 030f 	add.w	r3, r7, #15
 80007cc:	2201      	movs	r2, #1
 80007ce:	2121      	movs	r1, #33	; 0x21
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fcdb 	bl	800218c <GYRO_IO_Write>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80007e8:	f107 030f 	add.w	r3, r7, #15
 80007ec:	2201      	movs	r2, #1
 80007ee:	2124      	movs	r1, #36	; 0x24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fcfd 	bl	80021f0 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f023 0310 	bic.w	r3, r3, #16
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000800:	7bfa      	ldrb	r2, [r7, #15]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4313      	orrs	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800080a:	f107 030f 	add.w	r3, r7, #15
 800080e:	2201      	movs	r2, #1
 8000810:	2124      	movs	r1, #36	; 0x24
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fcba 	bl	800218c <GYRO_IO_Write>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	2300      	movs	r3, #0
 800082e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000848:	f107 030f 	add.w	r3, r7, #15
 800084c:	2201      	movs	r2, #1
 800084e:	2123      	movs	r1, #35	; 0x23
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fccd 	bl	80021f0 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	2206      	movs	r2, #6
 800085c:	2128      	movs	r1, #40	; 0x28
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fcc6 	bl	80021f0 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	2b00      	cmp	r3, #0
 800086c:	d123      	bne.n	80008b6 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	e01c      	b.n	80008ae <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	3301      	adds	r3, #1
 800087a:	3328      	adds	r3, #40	; 0x28
 800087c:	443b      	add	r3, r7
 800087e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000882:	b29b      	uxth	r3, r3
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	b29a      	uxth	r2, r3
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	3328      	adds	r3, #40	; 0x28
 800088e:	443b      	add	r3, r7
 8000890:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4413      	add	r3, r2
 8000898:	b29b      	uxth	r3, r3
 800089a:	b21a      	sxth	r2, r3
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	3328      	adds	r3, #40	; 0x28
 80008a2:	443b      	add	r3, r7
 80008a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	3301      	adds	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	dddf      	ble.n	8000874 <I3G4250D_ReadXYZAngRate+0x54>
 80008b4:	e022      	b.n	80008fc <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
 80008ba:	e01c      	b.n	80008f6 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	3328      	adds	r3, #40	; 0x28
 80008c2:	443b      	add	r3, r7
 80008c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	3301      	adds	r3, #1
 80008d4:	3328      	adds	r3, #40	; 0x28
 80008d6:	443b      	add	r3, r7
 80008d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	3328      	adds	r3, #40	; 0x28
 80008ea:	443b      	add	r3, r7
 80008ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	3301      	adds	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	dddf      	ble.n	80008bc <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000902:	2b20      	cmp	r3, #32
 8000904:	d00c      	beq.n	8000920 <I3G4250D_ReadXYZAngRate+0x100>
 8000906:	2b20      	cmp	r3, #32
 8000908:	dc0d      	bgt.n	8000926 <I3G4250D_ReadXYZAngRate+0x106>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <I3G4250D_ReadXYZAngRate+0xf4>
 800090e:	2b10      	cmp	r3, #16
 8000910:	d003      	beq.n	800091a <I3G4250D_ReadXYZAngRate+0xfa>
 8000912:	e008      	b.n	8000926 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <I3G4250D_ReadXYZAngRate+0x14c>)
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000918:	e005      	b.n	8000926 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <I3G4250D_ReadXYZAngRate+0x150>)
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800091e:	e002      	b.n	8000926 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <I3G4250D_ReadXYZAngRate+0x154>)
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000924:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
 800092a:	e016      	b.n	800095a <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	3328      	adds	r3, #40	; 0x28
 8000932:	443b      	add	r3, r7
 8000934:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800094c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000950:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	3301      	adds	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	2b02      	cmp	r3, #2
 800095e:	dde5      	ble.n	800092c <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	410c0000 	.word	0x410c0000
 8000970:	418c0000 	.word	0x418c0000
 8000974:	428c0000 	.word	0x428c0000

08000978 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000986:	f001 fbb7 	bl	80020f8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000990:	f107 030f 	add.w	r3, r7, #15
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fbf7 	bl	800218c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80009a8:	f107 030f 	add.w	r3, r7, #15
 80009ac:	2201      	movs	r2, #1
 80009ae:	2123      	movs	r1, #35	; 0x23
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fbeb 	bl	800218c <GYRO_IO_Write>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80009d2:	f001 fb91 	bl	80020f8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	2201      	movs	r2, #1
 80009da:	210f      	movs	r1, #15
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fc07 	bl	80021f0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2201      	movs	r2, #1
 80009f6:	2124      	movs	r1, #36	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fbf9 	bl	80021f0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2124      	movs	r1, #36	; 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fbbc 	bl	800218c <GYRO_IO_Write>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000a30:	f107 030f 	add.w	r3, r7, #15
 8000a34:	2201      	movs	r2, #1
 8000a36:	2120      	movs	r1, #32
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fba7 	bl	800218c <GYRO_IO_Write>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	2300      	movs	r3, #0
 8000a56:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000a58:	f107 030f 	add.w	r3, r7, #15
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2130      	movs	r1, #48	; 0x30
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fbc5 	bl	80021f0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000a66:	f107 030e 	add.w	r3, r7, #14
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2122      	movs	r1, #34	; 0x22
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fbbe 	bl	80021f0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	f023 0320 	bic.w	r3, r3, #32
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000aa8:	f107 030f 	add.w	r3, r7, #15
 8000aac:	2201      	movs	r2, #1
 8000aae:	2130      	movs	r1, #48	; 0x30
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fb6b 	bl	800218c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000ab6:	f107 030e 	add.w	r3, r7, #14
 8000aba:	2201      	movs	r2, #1
 8000abc:	2122      	movs	r1, #34	; 0x22
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fb64 	bl	800218c <GYRO_IO_Write>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000ad6:	f107 030f 	add.w	r3, r7, #15
 8000ada:	2201      	movs	r2, #1
 8000adc:	2122      	movs	r1, #34	; 0x22
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fb86 	bl	80021f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10a      	bne.n	8000b00 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	e00c      	b.n	8000b1a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d109      	bne.n	8000b1a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f023 0308 	bic.w	r3, r3, #8
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b1a:	f107 030f 	add.w	r3, r7, #15
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2122      	movs	r1, #34	; 0x22
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fb32 	bl	800218c <GYRO_IO_Write>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b3a:	f107 030f 	add.w	r3, r7, #15
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2122      	movs	r1, #34	; 0x22
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fb54 	bl	80021f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d107      	bne.n	8000b5e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e009      	b.n	8000b72 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d106      	bne.n	8000b72 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	f023 0308 	bic.w	r3, r3, #8
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b72:	f107 030f 	add.w	r3, r7, #15
 8000b76:	2201      	movs	r2, #1
 8000b78:	2122      	movs	r1, #34	; 0x22
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fb06 	bl	800218c <GYRO_IO_Write>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000b92:	f107 030f 	add.w	r3, r7, #15
 8000b96:	2201      	movs	r2, #1
 8000b98:	2121      	movs	r1, #33	; 0x21
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fb28 	bl	80021f0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000bb4:	f107 030f 	add.w	r3, r7, #15
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2121      	movs	r1, #33	; 0x21
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fae5 	bl	800218c <GYRO_IO_Write>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000bd4:	f107 030f 	add.w	r3, r7, #15
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2124      	movs	r1, #36	; 0x24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fb07 	bl	80021f0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f023 0310 	bic.w	r3, r3, #16
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000bf6:	f107 030f 	add.w	r3, r7, #15
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2124      	movs	r1, #36	; 0x24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fac4 	bl	800218c <GYRO_IO_Write>
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000c34:	f107 030f 	add.w	r3, r7, #15
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2123      	movs	r1, #35	; 0x23
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fad7 	bl	80021f0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	2206      	movs	r2, #6
 8000c48:	2128      	movs	r1, #40	; 0x28
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fad0 	bl	80021f0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d123      	bne.n	8000ca2 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
 8000c5e:	e01c      	b.n	8000c9a <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	3301      	adds	r3, #1
 8000c66:	3328      	adds	r3, #40	; 0x28
 8000c68:	443b      	add	r3, r7
 8000c6a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	3328      	adds	r3, #40	; 0x28
 8000c7a:	443b      	add	r3, r7
 8000c7c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	3328      	adds	r3, #40	; 0x28
 8000c8e:	443b      	add	r3, r7
 8000c90:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	3301      	adds	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	dddf      	ble.n	8000c60 <L3GD20_ReadXYZAngRate+0x54>
 8000ca0:	e022      	b.n	8000ce8 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	e01c      	b.n	8000ce2 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	3328      	adds	r3, #40	; 0x28
 8000cae:	443b      	add	r3, r7
 8000cb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	3328      	adds	r3, #40	; 0x28
 8000cc2:	443b      	add	r3, r7
 8000cc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	3328      	adds	r3, #40	; 0x28
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	dddf      	ble.n	8000ca8 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000cee:	2b20      	cmp	r3, #32
 8000cf0:	d00c      	beq.n	8000d0c <L3GD20_ReadXYZAngRate+0x100>
 8000cf2:	2b20      	cmp	r3, #32
 8000cf4:	dc0d      	bgt.n	8000d12 <L3GD20_ReadXYZAngRate+0x106>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <L3GD20_ReadXYZAngRate+0xf4>
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	d003      	beq.n	8000d06 <L3GD20_ReadXYZAngRate+0xfa>
 8000cfe:	e008      	b.n	8000d12 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <L3GD20_ReadXYZAngRate+0x14c>)
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000d04:	e005      	b.n	8000d12 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <L3GD20_ReadXYZAngRate+0x150>)
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000d0a:	e002      	b.n	8000d12 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <L3GD20_ReadXYZAngRate+0x154>)
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000d10:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
 8000d16:	e016      	b.n	8000d46 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	3328      	adds	r3, #40	; 0x28
 8000d1e:	443b      	add	r3, r7
 8000d20:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	3301      	adds	r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	dde5      	ble.n	8000d18 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	410c0000 	.word	0x410c0000
 8000d5c:	418c0000 	.word	0x418c0000
 8000d60:	428c0000 	.word	0x428c0000

08000d64 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000d72:	f001 fa77 	bl	8002264 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2120      	movs	r1, #32
 8000d80:	2032      	movs	r0, #50	; 0x32
 8000d82:	f001 fac7 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	2123      	movs	r1, #35	; 0x23
 8000d90:	2032      	movs	r0, #50	; 0x32
 8000d92:	f001 fabf 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000db6:	f001 fa55 	bl	8002264 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000dba:	210f      	movs	r1, #15
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f001 fabc 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000dd6:	2124      	movs	r1, #36	; 0x24
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f001 faae 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2124      	movs	r1, #36	; 0x24
 8000df0:	2032      	movs	r0, #50	; 0x32
 8000df2:	f001 fa8f 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000e08:	2121      	movs	r1, #33	; 0x21
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f001 fa95 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2121      	movs	r1, #33	; 0x21
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f001 fa72 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000e42:	2121      	movs	r1, #33	; 0x21
 8000e44:	2032      	movs	r0, #50	; 0x32
 8000e46:	f001 fa78 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f023 0308 	bic.w	r3, r3, #8
 8000e54:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	461a      	mov	r2, r3
 8000e62:	2121      	movs	r1, #33	; 0x21
 8000e64:	2032      	movs	r0, #50	; 0x32
 8000e66:	f001 fa55 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b088      	sub	sp, #32
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000e82:	2301      	movs	r3, #1
 8000e84:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000e86:	2123      	movs	r1, #35	; 0x23
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f001 fa56 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000e92:	2124      	movs	r1, #36	; 0x24
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f001 fa50 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000e9e:	2128      	movs	r1, #40	; 0x28
 8000ea0:	2032      	movs	r0, #50	; 0x32
 8000ea2:	f001 fa4a 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000eac:	2129      	movs	r1, #41	; 0x29
 8000eae:	2032      	movs	r0, #50	; 0x32
 8000eb0:	f001 fa43 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000eba:	212a      	movs	r1, #42	; 0x2a
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f001 fa3c 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000ec8:	212b      	movs	r1, #43	; 0x2b
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f001 fa35 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000ed6:	212c      	movs	r1, #44	; 0x2c
 8000ed8:	2032      	movs	r0, #50	; 0x32
 8000eda:	f001 fa2e 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000ee4:	212d      	movs	r1, #45	; 0x2d
 8000ee6:	2032      	movs	r0, #50	; 0x32
 8000ee8:	f001 fa27 	bl	800233a <COMPASSACCELERO_IO_Read>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000ef2:	7d3b      	ldrb	r3, [r7, #20]
 8000ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d123      	bne.n	8000f44 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	77fb      	strb	r3, [r7, #31]
 8000f00:	e01c      	b.n	8000f3c <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	3301      	adds	r3, #1
 8000f08:	3320      	adds	r3, #32
 8000f0a:	443b      	add	r3, r7
 8000f0c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	3320      	adds	r3, #32
 8000f1c:	443b      	add	r3, r7
 8000f1e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	b212      	sxth	r2, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	3320      	adds	r3, #32
 8000f30:	443b      	add	r3, r7
 8000f32:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f36:	7ffb      	ldrb	r3, [r7, #31]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	77fb      	strb	r3, [r7, #31]
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d9df      	bls.n	8000f02 <LSM303AGR_AccReadXYZ+0x90>
 8000f42:	e022      	b.n	8000f8a <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	77fb      	strb	r3, [r7, #31]
 8000f48:	e01c      	b.n	8000f84 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	3320      	adds	r3, #32
 8000f50:	443b      	add	r3, r7
 8000f52:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	3301      	adds	r3, #1
 8000f62:	3320      	adds	r3, #32
 8000f64:	443b      	add	r3, r7
 8000f66:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	7ffb      	ldrb	r3, [r7, #31]
 8000f72:	b212      	sxth	r2, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	3320      	adds	r3, #32
 8000f78:	443b      	add	r3, r7
 8000f7a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	3301      	adds	r3, #1
 8000f82:	77fb      	strb	r3, [r7, #31]
 8000f84:	7ffb      	ldrb	r3, [r7, #31]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d9df      	bls.n	8000f4a <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f90:	2b30      	cmp	r3, #48	; 0x30
 8000f92:	d013      	beq.n	8000fbc <LSM303AGR_AccReadXYZ+0x14a>
 8000f94:	2b30      	cmp	r3, #48	; 0x30
 8000f96:	dc14      	bgt.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d00c      	beq.n	8000fb6 <LSM303AGR_AccReadXYZ+0x144>
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dc10      	bgt.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LSM303AGR_AccReadXYZ+0x138>
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d003      	beq.n	8000fb0 <LSM303AGR_AccReadXYZ+0x13e>
 8000fa8:	e00b      	b.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000faa:	2301      	movs	r3, #1
 8000fac:	77bb      	strb	r3, [r7, #30]
    break;
 8000fae:	e008      	b.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	77bb      	strb	r3, [r7, #30]
    break;
 8000fb4:	e005      	b.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	77bb      	strb	r3, [r7, #30]
    break;
 8000fba:	e002      	b.n	8000fc2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	77bb      	strb	r3, [r7, #30]
    break;
 8000fc0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	77fb      	strb	r3, [r7, #31]
 8000fc6:	e014      	b.n	8000ff2 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	3320      	adds	r3, #32
 8000fce:	443b      	add	r3, r7
 8000fd0:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	7fbb      	ldrb	r3, [r7, #30]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	fb12 f303 	smulbb	r3, r2, r3
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b20a      	sxth	r2, r1
 8000fea:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	77fb      	strb	r3, [r7, #31]
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d9e7      	bls.n	8000fc8 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001010:	2121      	movs	r1, #33	; 0x21
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f001 f991 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4313      	orrs	r3, r2
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	461a      	mov	r2, r3
 8001030:	2121      	movs	r1, #33	; 0x21
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f001 f96e 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800104e:	2122      	movs	r1, #34	; 0x22
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f001 f972 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4313      	orrs	r3, r2
 8001060:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	461a      	mov	r2, r3
 8001066:	2122      	movs	r1, #34	; 0x22
 8001068:	2032      	movs	r0, #50	; 0x32
 800106a:	f001 f953 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001084:	2138      	movs	r1, #56	; 0x38
 8001086:	2032      	movs	r0, #50	; 0x32
 8001088:	f001 f957 	bl	800233a <COMPASSACCELERO_IO_Read>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4313      	orrs	r3, r2
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	461a      	mov	r2, r3
 800109c:	2138      	movs	r1, #56	; 0x38
 800109e:	2032      	movs	r0, #50	; 0x32
 80010a0:	f001 f938 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80010a4:	230a      	movs	r3, #10
 80010a6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	461a      	mov	r2, r3
 80010ac:	213a      	movs	r1, #58	; 0x3a
 80010ae:	2032      	movs	r0, #50	; 0x32
 80010b0:	f001 f930 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80010b4:	2305      	movs	r3, #5
 80010b6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	461a      	mov	r2, r3
 80010bc:	213b      	movs	r1, #59	; 0x3b
 80010be:	2032      	movs	r0, #50	; 0x32
 80010c0:	f001 f928 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	461a      	mov	r2, r3
 80010c8:	213c      	movs	r1, #60	; 0x3c
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f001 f922 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	461a      	mov	r2, r3
 80010d8:	213d      	movs	r1, #61	; 0x3d
 80010da:	2032      	movs	r0, #50	; 0x32
 80010dc:	f001 f91a 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80010ec:	f001 f8e2 	bl	80022b4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	f7ff ffa5 	bl	8001040 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff ff83 	bl	8001002 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80010fc:	2010      	movs	r0, #16
 80010fe:	f7ff ffba 	bl	8001076 <LSM303AGR_AccClickITEnable>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001114:	f001 f8a6 	bl	8002264 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	461a      	mov	r2, r3
 8001120:	2120      	movs	r1, #32
 8001122:	2032      	movs	r0, #50	; 0x32
 8001124:	f001 f8f6 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	461a      	mov	r2, r3
 8001130:	2123      	movs	r1, #35	; 0x23
 8001132:	2032      	movs	r0, #50	; 0x32
 8001134:	f001 f8ee 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001158:	f001 f884 	bl	8002264 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800115c:	210f      	movs	r1, #15
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f001 f8eb 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001178:	2124      	movs	r1, #36	; 0x24
 800117a:	2032      	movs	r0, #50	; 0x32
 800117c:	f001 f8dd 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	461a      	mov	r2, r3
 8001190:	2124      	movs	r1, #36	; 0x24
 8001192:	2032      	movs	r0, #50	; 0x32
 8001194:	f001 f8be 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80011aa:	2121      	movs	r1, #33	; 0x21
 80011ac:	2032      	movs	r0, #50	; 0x32
 80011ae:	f001 f8c4 	bl	800233a <COMPASSACCELERO_IO_Read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2121      	movs	r1, #33	; 0x21
 80011cc:	2032      	movs	r0, #50	; 0x32
 80011ce:	f001 f8a1 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	2032      	movs	r0, #50	; 0x32
 80011e8:	f001 f8a7 	bl	800233a <COMPASSACCELERO_IO_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	f023 0308 	bic.w	r3, r3, #8
 80011f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	461a      	mov	r2, r3
 8001204:	2121      	movs	r1, #33	; 0x21
 8001206:	2032      	movs	r0, #50	; 0x32
 8001208:	f001 f884 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800121c:	2300      	movs	r3, #0
 800121e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001224:	2301      	movs	r3, #1
 8001226:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001228:	2123      	movs	r1, #35	; 0x23
 800122a:	2032      	movs	r0, #50	; 0x32
 800122c:	f001 f885 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001230:	4603      	mov	r3, r0
 8001232:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001234:	2124      	movs	r1, #36	; 0x24
 8001236:	2032      	movs	r0, #50	; 0x32
 8001238:	f001 f87f 	bl	800233a <COMPASSACCELERO_IO_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001240:	2128      	movs	r1, #40	; 0x28
 8001242:	2032      	movs	r0, #50	; 0x32
 8001244:	f001 f879 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001248:	4603      	mov	r3, r0
 800124a:	b25b      	sxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800124e:	2129      	movs	r1, #41	; 0x29
 8001250:	2032      	movs	r0, #50	; 0x32
 8001252:	f001 f872 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	b25b      	sxtb	r3, r3
 800125a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800125c:	212a      	movs	r1, #42	; 0x2a
 800125e:	2032      	movs	r0, #50	; 0x32
 8001260:	f001 f86b 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	b25b      	sxtb	r3, r3
 8001268:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800126a:	212b      	movs	r1, #43	; 0x2b
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f001 f864 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	b25b      	sxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	2032      	movs	r0, #50	; 0x32
 800127c:	f001 f85d 	bl	800233a <COMPASSACCELERO_IO_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	b25b      	sxtb	r3, r3
 8001284:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001286:	212d      	movs	r1, #45	; 0x2d
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f001 f856 	bl	800233a <COMPASSACCELERO_IO_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	b25b      	sxtb	r3, r3
 8001292:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001294:	7d3b      	ldrb	r3, [r7, #20]
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d123      	bne.n	80012e6 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	77fb      	strb	r3, [r7, #31]
 80012a2:	e01c      	b.n	80012de <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3301      	adds	r3, #1
 80012aa:	3320      	adds	r3, #32
 80012ac:	443b      	add	r3, r7
 80012ae:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3320      	adds	r3, #32
 80012be:	443b      	add	r3, r7
 80012c0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	b212      	sxth	r2, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3320      	adds	r3, #32
 80012d2:	443b      	add	r3, r7
 80012d4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	3301      	adds	r3, #1
 80012dc:	77fb      	strb	r3, [r7, #31]
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d9df      	bls.n	80012a4 <LSM303DLHC_AccReadXYZ+0x90>
 80012e4:	e022      	b.n	800132c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	77fb      	strb	r3, [r7, #31]
 80012ea:	e01c      	b.n	8001326 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	3320      	adds	r3, #32
 80012f2:	443b      	add	r3, r7
 80012f4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3301      	adds	r3, #1
 8001304:	3320      	adds	r3, #32
 8001306:	443b      	add	r3, r7
 8001308:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29a      	uxth	r2, r3
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	b212      	sxth	r2, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	3320      	adds	r3, #32
 800131a:	443b      	add	r3, r7
 800131c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001320:	7ffb      	ldrb	r3, [r7, #31]
 8001322:	3301      	adds	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d9df      	bls.n	80012ec <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800132c:	7d3b      	ldrb	r3, [r7, #20]
 800132e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001332:	2b30      	cmp	r3, #48	; 0x30
 8001334:	d013      	beq.n	800135e <LSM303DLHC_AccReadXYZ+0x14a>
 8001336:	2b30      	cmp	r3, #48	; 0x30
 8001338:	dc14      	bgt.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
 800133a:	2b20      	cmp	r3, #32
 800133c:	d00c      	beq.n	8001358 <LSM303DLHC_AccReadXYZ+0x144>
 800133e:	2b20      	cmp	r3, #32
 8001340:	dc10      	bgt.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <LSM303DLHC_AccReadXYZ+0x138>
 8001346:	2b10      	cmp	r3, #16
 8001348:	d003      	beq.n	8001352 <LSM303DLHC_AccReadXYZ+0x13e>
 800134a:	e00b      	b.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800134c:	2301      	movs	r3, #1
 800134e:	77bb      	strb	r3, [r7, #30]
    break;
 8001350:	e008      	b.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001352:	2302      	movs	r3, #2
 8001354:	77bb      	strb	r3, [r7, #30]
    break;
 8001356:	e005      	b.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001358:	2304      	movs	r3, #4
 800135a:	77bb      	strb	r3, [r7, #30]
    break;
 800135c:	e002      	b.n	8001364 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800135e:	230c      	movs	r3, #12
 8001360:	77bb      	strb	r3, [r7, #30]
    break;
 8001362:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
 8001368:	e014      	b.n	8001394 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	3320      	adds	r3, #32
 8001370:	443b      	add	r3, r7
 8001372:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001376:	b29a      	uxth	r2, r3
 8001378:	7fbb      	ldrb	r3, [r7, #30]
 800137a:	b29b      	uxth	r3, r3
 800137c:	fb12 f303 	smulbb	r3, r2, r3
 8001380:	b299      	uxth	r1, r3
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	b20a      	sxth	r2, r1
 800138c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	3301      	adds	r3, #1
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d9e7      	bls.n	800136a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80013b2:	2121      	movs	r1, #33	; 0x21
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ffc0 	bl	800233a <COMPASSACCELERO_IO_Read>
 80013ba:	4603      	mov	r3, r0
 80013bc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	461a      	mov	r2, r3
 80013d2:	2121      	movs	r1, #33	; 0x21
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f000 ff9d 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80013f0:	2122      	movs	r1, #34	; 0x22
 80013f2:	2032      	movs	r0, #50	; 0x32
 80013f4:	f000 ffa1 	bl	800233a <COMPASSACCELERO_IO_Read>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4313      	orrs	r3, r2
 8001402:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	461a      	mov	r2, r3
 8001408:	2122      	movs	r1, #34	; 0x22
 800140a:	2032      	movs	r0, #50	; 0x32
 800140c:	f000 ff82 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001426:	2138      	movs	r1, #56	; 0x38
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f000 ff86 	bl	800233a <COMPASSACCELERO_IO_Read>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4313      	orrs	r3, r2
 8001438:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	461a      	mov	r2, r3
 800143e:	2138      	movs	r1, #56	; 0x38
 8001440:	2032      	movs	r0, #50	; 0x32
 8001442:	f000 ff67 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001446:	230a      	movs	r3, #10
 8001448:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	461a      	mov	r2, r3
 800144e:	213a      	movs	r1, #58	; 0x3a
 8001450:	2032      	movs	r0, #50	; 0x32
 8001452:	f000 ff5f 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001456:	2305      	movs	r3, #5
 8001458:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	461a      	mov	r2, r3
 800145e:	213b      	movs	r1, #59	; 0x3b
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f000 ff57 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	461a      	mov	r2, r3
 800146a:	213c      	movs	r1, #60	; 0x3c
 800146c:	2032      	movs	r0, #50	; 0x32
 800146e:	f000 ff51 	bl	8002314 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001472:	2332      	movs	r3, #50	; 0x32
 8001474:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	461a      	mov	r2, r3
 800147a:	213d      	movs	r1, #61	; 0x3d
 800147c:	2032      	movs	r0, #50	; 0x32
 800147e:	f000 ff49 	bl	8002314 <COMPASSACCELERO_IO_Write>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800148e:	f000 ff11 	bl	80022b4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001492:	2080      	movs	r0, #128	; 0x80
 8001494:	f7ff ffa5 	bl	80013e2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001498:	2004      	movs	r0, #4
 800149a:	f7ff ff83 	bl	80013a4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800149e:	2010      	movs	r0, #16
 80014a0:	f7ff ffba 	bl	8001418 <LSM303DLHC_AccClickITEnable>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <error>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//LED Indication

void error(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <error+0x28>)
 80014b4:	f002 f90a 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f001 fc97 	bl	8002dec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <error+0x28>)
 80014c6:	f002 f901 	bl	80036cc <HAL_GPIO_WritePin>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <success>:

void success(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <success+0x28>)
 80014e0:	f002 f8f4 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f001 fc81 	bl	8002dec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <success+0x28>)
 80014f2:	f002 f8eb 	bl	80036cc <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020c00 	.word	0x40020c00

08001500 <I2C_WriteData>:
	return ctrl;
}


static void I2C_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af04      	add	r7, sp, #16
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
 800150a:	460b      	mov	r3, r1
 800150c:	717b      	strb	r3, [r7, #5]
 800150e:	4613      	mov	r3, r2
 8001510:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	b29a      	uxth	r2, r3
 800151a:	88f9      	ldrh	r1, [r7, #6]
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2301      	movs	r3, #1
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <I2C_WriteData+0x48>)
 800152e:	f003 fe65 	bl	80051fc <HAL_I2C_Mem_Write>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]

  if(status != HAL_OK)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <I2C_WriteData+0x40>
  {
    error();
 800153c:	f7ff ffb4 	bl	80014a8 <error>
  }
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000170 	.word	0x20000170

0800154c <I2C_ReadData>:


static uint8_t I2C_ReadData(uint16_t Addr, uint8_t Reg)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af04      	add	r7, sp, #16
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	b29a      	uxth	r2, r3
 8001568:	88f9      	ldrh	r1, [r7, #6]
 800156a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030e 	add.w	r3, r7, #14
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <I2C_ReadData+0x50>)
 800157e:	f003 ff37 	bl	80053f0 <HAL_I2C_Mem_Read>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]

  if(status != HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <I2C_ReadData+0x44>
  {
    error();
 800158c:	f7ff ff8c 	bl	80014a8 <error>
  }

  return value;
 8001590:	7bbb      	ldrb	r3, [r7, #14]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000170 	.word	0x20000170

080015a0 <Accel_GetXYZ>:

//Accelerometer operations

void Accel_GetXYZ(int16_t* pData) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	BSP_ACCELERO_GetXYZ(pData);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 ff9b 	bl	80024e4 <BSP_ACCELERO_GetXYZ>

	// convert
	pData[0] /= 16;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da00      	bge.n	80015ba <Accel_GetXYZ+0x1a>
 80015b8:	330f      	adds	r3, #15
 80015ba:	111b      	asrs	r3, r3, #4
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	801a      	strh	r2, [r3, #0]
	pData[2] /= 16;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1d1a      	adds	r2, r3, #4
 80015ce:	460b      	mov	r3, r1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <Accel_GetXYZ+0x36>
 80015d4:	330f      	adds	r3, #15
 80015d6:	111b      	asrs	r3, r3, #4
 80015d8:	b21b      	sxth	r3, r3
 80015da:	8013      	strh	r3, [r2, #0]
	pData[1] /= 16;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1c9a      	adds	r2, r3, #2
 80015e8:	460b      	mov	r3, r1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da00      	bge.n	80015f0 <Accel_GetXYZ+0x50>
 80015ee:	330f      	adds	r3, #15
 80015f0:	111b      	asrs	r3, r3, #4
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	8013      	strh	r3, [r2, #0]

	pData[0] *= LSM303DLHC_ACC_SENSITIVITY_2G;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	801a      	strh	r2, [r3, #0]
	pData[1] *= LSM303DLHC_ACC_SENSITIVITY_2G;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3302      	adds	r3, #2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800160a:	801a      	strh	r2, [r3, #0]
	pData[2] *= LSM303DLHC_ACC_SENSITIVITY_2G;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001616:	801a      	strh	r2, [r3, #0]

	pData[0] /= 1000;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <Accel_GetXYZ+0xd0>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1192      	asrs	r2, r2, #6
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	801a      	strh	r2, [r3, #0]
	pData[1] /= 1000;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3302      	adds	r3, #2
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	3202      	adds	r2, #2
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <Accel_GetXYZ+0xd0>)
 800163e:	fb81 0103 	smull	r0, r1, r1, r3
 8001642:	1189      	asrs	r1, r1, #6
 8001644:	17db      	asrs	r3, r3, #31
 8001646:	1acb      	subs	r3, r1, r3
 8001648:	b21b      	sxth	r3, r3
 800164a:	8013      	strh	r3, [r2, #0]
	pData[2] /= 1000;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	3204      	adds	r2, #4
 8001658:	4905      	ldr	r1, [pc, #20]	; (8001670 <Accel_GetXYZ+0xd0>)
 800165a:	fb81 0103 	smull	r0, r1, r1, r3
 800165e:	1189      	asrs	r1, r1, #6
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1acb      	subs	r3, r1, r3
 8001664:	b21b      	sxth	r3, r3
 8001666:	8013      	strh	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <Gyro_GetXYZ>:


//Gyroscope operations

void Gyro_GetXYZ(float* pData) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	BSP_GYRO_GetXYZ(pData);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f001 f83f 	bl	8002700 <BSP_GYRO_GetXYZ>
//	// convert
//	pData[0] /= 16;
//	pData[2] /= 16;
//	pData[1] /= 16;

	pData[0] *= L3GD20_SENSITIVITY_500DPS;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001714 <Gyro_GetXYZ+0xa0>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edc3 7a00 	vstr	s15, [r3]
	pData[1] *= L3GD20_SENSITIVITY_500DPS;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001714 <Gyro_GetXYZ+0xa0>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	edc3 7a00 	vstr	s15, [r3]
	pData[2] *= L3GD20_SENSITIVITY_500DPS;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3308      	adds	r3, #8
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3308      	adds	r3, #8
 80016ba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001714 <Gyro_GetXYZ+0xa0>
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c2:	edc3 7a00 	vstr	s15, [r3]

	pData[0] /= 1000;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001718 <Gyro_GetXYZ+0xa4>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a00 	vstr	s15, [r3]
	pData[1] /= 1000;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3304      	adds	r3, #4
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001718 <Gyro_GetXYZ+0xa4>
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	edc3 7a00 	vstr	s15, [r3]
	pData[2] /= 1000;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3308      	adds	r3, #8
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3308      	adds	r3, #8
 80016fe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001718 <Gyro_GetXYZ+0xa4>
 8001702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001706:	edc3 7a00 	vstr	s15, [r3]
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	418c0000 	.word	0x418c0000
 8001718:	447a0000 	.word	0x447a0000

0800171c <MagInit>:
//	}


// option 3

void MagInit(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0b00111000;
 8001722:	2338      	movs	r3, #56	; 0x38
 8001724:	71fb      	strb	r3, [r7, #7]
  I2C_WriteData(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, ctrl);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	203c      	movs	r0, #60	; 0x3c
 800172e:	f7ff fee7 	bl	8001500 <I2C_WriteData>
  ctrl = 0b11100000;
 8001732:	23e0      	movs	r3, #224	; 0xe0
 8001734:	71fb      	strb	r3, [r7, #7]
  I2C_WriteData(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, ctrl);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	461a      	mov	r2, r3
 800173a:	2101      	movs	r1, #1
 800173c:	203c      	movs	r0, #60	; 0x3c
 800173e:	f7ff fedf 	bl	8001500 <I2C_WriteData>
  ctrl = 0b00000000;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
  I2C_WriteData(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, ctrl);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	461a      	mov	r2, r3
 800174a:	2102      	movs	r1, #2
 800174c:	203c      	movs	r0, #60	; 0x3c
 800174e:	f7ff fed7 	bl	8001500 <I2C_WriteData>
  success();
 8001752:	f7ff febf 	bl	80014d4 <success>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <Mag_GetXYZ>:


void Mag_GetXYZ(int16_t* pData) {
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
//	buffer[2] = HAL_I2C_Mem_Read(&hi2c1, 0x3C, 0x05, I2C_MEMADD_SIZE_8BIT, buffer, 1, 0x10000);
//	buffer[3] = HAL_I2C_Mem_Read(&hi2c1, 0x3C, 0x06, I2C_MEMADD_SIZE_8BIT, buffer, 1, 0x10000);
//	buffer[4] = HAL_I2C_Mem_Read(&hi2c1, 0x3C, 0x07, I2C_MEMADD_SIZE_8BIT, buffer, 1, 0x10000);
//	buffer[5] = HAL_I2C_Mem_Read(&hi2c1, 0x3C, 0x08, I2C_MEMADD_SIZE_8BIT, buffer, 1, 0x10000);

	buffer[0] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M);
 800176a:	2103      	movs	r1, #3
 800176c:	203c      	movs	r0, #60	; 0x3c
 800176e:	f7ff feed 	bl	800154c <I2C_ReadData>
 8001772:	4603      	mov	r3, r0
 8001774:	743b      	strb	r3, [r7, #16]
	buffer[1] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M);
 8001776:	2104      	movs	r1, #4
 8001778:	203c      	movs	r0, #60	; 0x3c
 800177a:	f7ff fee7 	bl	800154c <I2C_ReadData>
 800177e:	4603      	mov	r3, r0
 8001780:	747b      	strb	r3, [r7, #17]
	buffer[2] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M);
 8001782:	2107      	movs	r1, #7
 8001784:	203c      	movs	r0, #60	; 0x3c
 8001786:	f7ff fee1 	bl	800154c <I2C_ReadData>
 800178a:	4603      	mov	r3, r0
 800178c:	74bb      	strb	r3, [r7, #18]
	buffer[3] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M);
 800178e:	2108      	movs	r1, #8
 8001790:	203c      	movs	r0, #60	; 0x3c
 8001792:	f7ff fedb 	bl	800154c <I2C_ReadData>
 8001796:	4603      	mov	r3, r0
 8001798:	74fb      	strb	r3, [r7, #19]
	buffer[4] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M);
 800179a:	2105      	movs	r1, #5
 800179c:	203c      	movs	r0, #60	; 0x3c
 800179e:	f7ff fed5 	bl	800154c <I2C_ReadData>
 80017a2:	4603      	mov	r3, r0
 80017a4:	753b      	strb	r3, [r7, #20]
	buffer[5] = I2C_ReadData(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_M);
 80017a6:	2106      	movs	r1, #6
 80017a8:	203c      	movs	r0, #60	; 0x3c
 80017aa:	f7ff fecf 	bl	800154c <I2C_ReadData>
 80017ae:	4603      	mov	r3, r0
 80017b0:	757b      	strb	r3, [r7, #21]

	if (status != HAL_OK) {
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <Mag_GetXYZ+0x60>
		error();}
 80017b8:	f7ff fe76 	bl	80014a8 <error>
 80017bc:	e001      	b.n	80017c2 <Mag_GetXYZ+0x64>
	else success();
 80017be:	f7ff fe89 	bl	80014d4 <success>


	uint16_t ta[3];
	ta[0] = ((uint16_t)buffer[0]<<8)+buffer[1];
 80017c2:	7c3b      	ldrb	r3, [r7, #16]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	7c7b      	ldrb	r3, [r7, #17]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	813b      	strh	r3, [r7, #8]
	ta[2] = ((uint16_t)buffer[4]<<8)+buffer[5];
 80017d4:	7d3b      	ldrb	r3, [r7, #20]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7d7b      	ldrb	r3, [r7, #21]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	81bb      	strh	r3, [r7, #12]
	ta[1] = ((uint16_t)buffer[2]<<8)+buffer[3];
 80017e6:	7cbb      	ldrb	r3, [r7, #18]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	7cfb      	ldrb	r3, [r7, #19]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	817b      	strh	r3, [r7, #10]


	pData[0] = (int16_t)ta[0];
 80017f8:	893b      	ldrh	r3, [r7, #8]
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	801a      	strh	r2, [r3, #0]
	pData[2] = (int16_t)ta[2];
 8001800:	89ba      	ldrh	r2, [r7, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	b212      	sxth	r2, r2
 8001808:	801a      	strh	r2, [r3, #0]
	pData[1] = (int16_t)ta[1];
 800180a:	897a      	ldrh	r2, [r7, #10]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3302      	adds	r3, #2
 8001810:	b212      	sxth	r2, r2
 8001812:	801a      	strh	r2, [r3, #0]
// no difference between this and previous
//	int i = 0;
//	for (i = 0; i<3; i++){
//	  pData[i]= ((uint16_t) ((uint16_t) buffer[2*i]<<8) + buffer[2*i+1]);
//	}
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	b0bd      	sub	sp, #244	; 0xf4
 8001820:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001822:	f001 fa71 	bl	8002d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001826:	f000 f88d 	bl	8001944 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800182a:	f000 f8f3 	bl	8001a14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182e:	f000 f9fd 	bl	8001c2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001832:	f000 f90f 	bl	8001a54 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001836:	f000 f93b 	bl	8001ab0 <MX_I2S2_Init>
  MX_I2S3_Init();
 800183a:	f000 f967 	bl	8001b0c <MX_I2S3_Init>
  MX_SPI1_Init();
 800183e:	f000 f995 	bl	8001b6c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001842:	f00b fdb9 	bl	800d3b8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001846:	f000 f9c7 	bl	8001bd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize interrupts */
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800184a:	f000 fd89 	bl	8002360 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 800184e:	f000 fe75 	bl	800253c <BSP_GYRO_Init>
  MagInit();
 8001852:	f7ff ff63 	bl	800171c <MagInit>

  BSP_GYRO_EnableIT(L3GD20_INT2);
 8001856:	2001      	movs	r0, #1
 8001858:	f000 ff26 	bl	80026a8 <BSP_GYRO_EnableIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char Data[200] = {0};
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	22c4      	movs	r2, #196	; 0xc4
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f00c f989 	bl	800db80 <memset>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800186e:	f00b fdc9 	bl	800d404 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    BSP_GYRO_DisableIT(L3GD20_INT2);
 8001872:	2001      	movs	r0, #1
 8001874:	f000 ff2e 	bl	80026d4 <BSP_GYRO_DisableIT>

    Accel_GetXYZ(AccelData);
 8001878:	482d      	ldr	r0, [pc, #180]	; (8001930 <main+0x114>)
 800187a:	f7ff fe91 	bl	80015a0 <Accel_GetXYZ>
    Gyro_GetXYZ(GyroData);
 800187e:	482d      	ldr	r0, [pc, #180]	; (8001934 <main+0x118>)
 8001880:	f7ff fef8 	bl	8001674 <Gyro_GetXYZ>

    Mag_GetXYZ(MagnData);
 8001884:	482c      	ldr	r0, [pc, #176]	; (8001938 <main+0x11c>)
 8001886:	f7ff ff6a 	bl	800175e <Mag_GetXYZ>

    sprintf(Data, "A:%5d;%5d;%5d M:%5d;%5d;%5d G:%8d;%8d;%8d\r\n", AccelData[0], AccelData[1], AccelData[2], MagnData[0], MagnData[1], MagnData[2], (int) GyroData[0], (int) GyroData[1], (int) GyroData[2]);
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <main+0x114>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	461e      	mov	r6, r3
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <main+0x114>)
 8001894:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001898:	469c      	mov	ip, r3
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <main+0x114>)
 800189c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <main+0x11c>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <main+0x11c>)
 80018ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018b0:	461c      	mov	r4, r3
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <main+0x11c>)
 80018b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018b8:	461d      	mov	r5, r3
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <main+0x118>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <main+0x118>)
 80018ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d2:	edc7 7a00 	vstr	s15, [r7]
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <main+0x118>)
 80018d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e0:	ee17 3a90 	vmov	r3, s15
 80018e4:	f107 0008 	add.w	r0, r7, #8
 80018e8:	9306      	str	r3, [sp, #24]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	9305      	str	r3, [sp, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	9304      	str	r3, [sp, #16]
 80018f2:	9503      	str	r5, [sp, #12]
 80018f4:	9402      	str	r4, [sp, #8]
 80018f6:	9101      	str	r1, [sp, #4]
 80018f8:	9200      	str	r2, [sp, #0]
 80018fa:	4663      	mov	r3, ip
 80018fc:	4632      	mov	r2, r6
 80018fe:	490f      	ldr	r1, [pc, #60]	; (800193c <main+0x120>)
 8001900:	f00c f91e 	bl	800db40 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t* ) Data, strlen(Data), 0xFFFF);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fc69 	bl	80001e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <main+0x124>)
 800191c:	f007 fdaf 	bl	800947e <HAL_UART_Transmit>
	HAL_Delay(10);
 8001920:	200a      	movs	r0, #10
 8001922:	f001 fa63 	bl	8002dec <HAL_Delay>

	BSP_GYRO_EnableIT(L3GD20_INT2);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 febe 	bl	80026a8 <BSP_GYRO_EnableIT>
    MX_USB_HOST_Process();
 800192c:	e79f      	b.n	800186e <main+0x52>
 800192e:	bf00      	nop
 8001930:	200002f0 	.word	0x200002f0
 8001934:	20000300 	.word	0x20000300
 8001938:	200002f8 	.word	0x200002f8
 800193c:	0800e348 	.word	0x0800e348
 8001940:	200002ac 	.word	0x200002ac

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	; 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	; 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f00c f914 	bl	800db80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <SystemClock_Config+0xc8>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <SystemClock_Config+0xc8>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <SystemClock_Config+0xc8>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <SystemClock_Config+0xcc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <SystemClock_Config+0xcc>)
 800198e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <SystemClock_Config+0xcc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019b4:	2304      	movs	r3, #4
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019b8:	23c0      	movs	r3, #192	; 0xc0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019bc:	2304      	movs	r3, #4
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019c0:	2308      	movs	r3, #8
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f006 fae5 	bl	8007f98 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019d4:	f000 fa04 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d8:	230f      	movs	r3, #15
 80019da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019dc:	2302      	movs	r3, #2
 80019de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 fd47 	bl	8008488 <HAL_RCC_ClockConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a00:	f000 f9ee 	bl	8001de0 <Error_Handler>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3750      	adds	r7, #80	; 0x50
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001a2e:	23c8      	movs	r3, #200	; 0xc8
 8001a30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001a32:	2305      	movs	r3, #5
 8001a34:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f006 ff43 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001a48:	f000 f9ca 	bl	8001de0 <Error_Handler>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f003 fa3f 	bl	8004f14 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f9a0 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000170 	.word	0x20000170
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <MX_I2S2_Init+0x54>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <MX_I2S2_Init+0x58>)
 8001ad8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_I2S2_Init+0x50>)
 8001aee:	f005 fdb3 	bl	8007658 <HAL_I2S_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001af8:	f000 f972 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200001c4 	.word	0x200001c4
 8001b04:	40003800 	.word	0x40003800
 8001b08:	00017700 	.word	0x00017700

08001b0c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <MX_I2S3_Init+0x58>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <MX_I2S3_Init+0x5c>)
 8001b36:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_I2S3_Init+0x54>)
 8001b4c:	f005 fd84 	bl	8007658 <HAL_I2S_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001b56:	f000 f943 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000020c 	.word	0x2000020c
 8001b64:	40003c00 	.word	0x40003c00
 8001b68:	00017700 	.word	0x00017700

08001b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <MX_SPI1_Init+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb8:	220a      	movs	r2, #10
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bbe:	f006 ffd3 	bl	8008b68 <HAL_SPI_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc8:	f000 f90a 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000254 	.word	0x20000254
 8001bd4:	40013000 	.word	0x40013000

08001bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <MX_USART2_UART_Init+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_USART2_UART_Init+0x4c>)
 8001c10:	f007 fbe8 	bl	80093e4 <HAL_UART_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c1a:	f000 f8e1 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002ac 	.word	0x200002ac
 8001c28:	40004400 	.word	0x40004400

08001c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a60      	ldr	r2, [pc, #384]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a59      	ldr	r2, [pc, #356]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b45      	ldr	r3, [pc, #276]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a44      	ldr	r2, [pc, #272]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <MX_GPIO_Init+0x1a0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2108      	movs	r1, #8
 8001cee:	4838      	ldr	r0, [pc, #224]	; (8001dd0 <MX_GPIO_Init+0x1a4>)
 8001cf0:	f001 fcec 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4836      	ldr	r0, [pc, #216]	; (8001dd4 <MX_GPIO_Init+0x1a8>)
 8001cfa:	f001 fce7 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001d04:	4834      	ldr	r0, [pc, #208]	; (8001dd8 <MX_GPIO_Init+0x1ac>)
 8001d06:	f001 fce1 	bl	80036cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482c      	ldr	r0, [pc, #176]	; (8001dd0 <MX_GPIO_Init+0x1a4>)
 8001d1e:	f001 fa6d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001d22:	2308      	movs	r3, #8
 8001d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <MX_GPIO_Init+0x1a4>)
 8001d3a:	f001 fa5f 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001d3e:	2332      	movs	r3, #50	; 0x32
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <MX_GPIO_Init+0x1a4>)
 8001d54:	f001 fa52 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <MX_GPIO_Init+0x1a8>)
 8001d70:	f001 fa44 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d74:	2301      	movs	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4814      	ldr	r0, [pc, #80]	; (8001ddc <MX_GPIO_Init+0x1b0>)
 8001d8a:	f001 fa37 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d8e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_GPIO_Init+0x1ac>)
 8001da8:	f001 fa28 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001dac:	2320      	movs	r3, #32
 8001dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_GPIO_Init+0x1ac>)
 8001dc0:	f001 fa1c 	bl	80031fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc4:	bf00      	nop
 8001dc6:	3730      	adds	r7, #48	; 0x30
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020c00 	.word	0x40020c00
 8001ddc:	40020000 	.word	0x40020000

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001df0:	4814      	ldr	r0, [pc, #80]	; (8001e44 <I2Cx_Init+0x58>)
 8001df2:	f003 fede 	bl	8005bb2 <HAL_I2C_GetState>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d121      	bne.n	8001e40 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <I2Cx_Init+0x58>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <I2Cx_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <I2Cx_Init+0x58>)
 8001e04:	2243      	movs	r2, #67	; 0x43
 8001e06:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <I2Cx_Init+0x58>)
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <I2Cx_Init+0x60>)
 8001e0c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <I2Cx_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <I2Cx_Init+0x58>)
 8001e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <I2Cx_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <I2Cx_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <I2Cx_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <I2Cx_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <I2Cx_Init+0x58>)
 8001e36:	f000 f86b 	bl	8001f10 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e3a:	4802      	ldr	r0, [pc, #8]	; (8001e44 <I2Cx_Init+0x58>)
 8001e3c:	f003 f86a 	bl	8004f14 <HAL_I2C_Init>
  }
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000030c 	.word	0x2000030c
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	000186a0 	.word	0x000186a0

08001e50 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	717b      	strb	r3, [r7, #5]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <I2Cx_WriteData+0x48>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	88f9      	ldrh	r1, [r7, #6]
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	2301      	movs	r3, #1
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <I2Cx_WriteData+0x4c>)
 8001e7e:	f003 f9bd 	bl	80051fc <HAL_I2C_Mem_Write>
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001e8c:	f000 f834 	bl	8001ef8 <I2Cx_Error>
  }
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200000d0 	.word	0x200000d0
 8001e9c:	2000030c 	.word	0x2000030c

08001ea0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	80fb      	strh	r3, [r7, #6]
 8001eac:	4613      	mov	r3, r2
 8001eae:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <I2Cx_ReadData+0x50>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	88f9      	ldrh	r1, [r7, #6]
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f107 030e 	add.w	r3, r7, #14
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <I2Cx_ReadData+0x54>)
 8001ed2:	f003 fa8d 	bl	80053f0 <HAL_I2C_Mem_Read>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001ee0:	f000 f80a 	bl	8001ef8 <I2Cx_Error>
  }
  return value;
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200000d0 	.word	0x200000d0
 8001ef4:	2000030c 	.word	0x2000030c

08001ef8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <I2Cx_Error+0x14>)
 8001efe:	f003 f94d 	bl	800519c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f02:	f7ff ff73 	bl	8001dec <I2Cx_Init>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000030c 	.word	0x2000030c

08001f10 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001f50:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001f56:	2312      	movs	r3, #18
 8001f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001f62:	2304      	movs	r3, #4
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f6e:	f001 f945 	bl	80031fc <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <I2Cx_MspInit+0xa4>)
 8001f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f88:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	201f      	movs	r0, #31
 8001f90:	f001 f84f 	bl	8003032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f94:	201f      	movs	r0, #31
 8001f96:	f001 f868 	bl	800306a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	2020      	movs	r0, #32
 8001fa0:	f001 f847 	bl	8003032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	f001 f860 	bl	800306a <HAL_NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001fc0:	4819      	ldr	r0, [pc, #100]	; (8002028 <SPIx_Init+0x6c>)
 8001fc2:	f007 f923 	bl	800920c <HAL_SPI_GetState>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d12b      	bne.n	8002024 <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <SPIx_Init+0x6c>)
 8001fce:	4a17      	ldr	r2, [pc, #92]	; (800202c <SPIx_Init+0x70>)
 8001fd0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <SPIx_Init+0x6c>)
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <SPIx_Init+0x6c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <SPIx_Init+0x6c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <SPIx_Init+0x6c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <SPIx_Init+0x6c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <SPIx_Init+0x6c>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <SPIx_Init+0x6c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <SPIx_Init+0x6c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <SPIx_Init+0x6c>)
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <SPIx_Init+0x6c>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SPIx_Init+0x6c>)
 8002012:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002016:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <SPIx_Init+0x6c>)
 800201a:	f000 f835 	bl	8002088 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <SPIx_Init+0x6c>)
 8002020:	f006 fda2 	bl	8008b68 <HAL_SPI_Init>
  }
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000360 	.word	0x20000360
 800202c:	40013000 	.word	0x40013000

08002030 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <SPIx_WriteRead+0x38>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f107 020f 	add.w	r2, r7, #15
 8002046:	1df9      	adds	r1, r7, #7
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <SPIx_WriteRead+0x3c>)
 800204e:	f006 fe3c 	bl	8008cca <HAL_SPI_TransmitReceive>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002058:	f000 f80a 	bl	8002070 <SPIx_Error>
  }
  
  return receivedbyte;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000d4 	.word	0x200000d4
 800206c:	20000360 	.word	0x20000360

08002070 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <SPIx_Error+0x14>)
 8002076:	f006 fe00 	bl	8008c7a <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 800207a:	f7ff ff9f 	bl	8001fbc <SPIx_Init>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000360 	.word	0x20000360

08002088 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <SPIx_MspInit+0x68>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <SPIx_MspInit+0x68>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209e:	6453      	str	r3, [r2, #68]	; 0x44
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <SPIx_MspInit+0x68>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <SPIx_MspInit+0x68>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <SPIx_MspInit+0x68>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <SPIx_MspInit+0x68>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80020c8:	23e0      	movs	r3, #224	; 0xe0
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80020d4:	2301      	movs	r3, #1
 80020d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80020d8:	2305      	movs	r3, #5
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <SPIx_MspInit+0x6c>)
 80020e4:	f001 f88a 	bl	80031fc <HAL_GPIO_Init>
}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000

080020f8 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <GYRO_IO_Init+0x8c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <GYRO_IO_Init+0x8c>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <GYRO_IO_Init+0x8c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800211a:	2308      	movs	r3, #8
 800211c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	4815      	ldr	r0, [pc, #84]	; (8002188 <GYRO_IO_Init+0x90>)
 8002132:	f001 f863 	bl	80031fc <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002136:	2201      	movs	r2, #1
 8002138:	2108      	movs	r1, #8
 800213a:	4813      	ldr	r0, [pc, #76]	; (8002188 <GYRO_IO_Init+0x90>)
 800213c:	f001 fac6 	bl	80036cc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <GYRO_IO_Init+0x8c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <GYRO_IO_Init+0x8c>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <GYRO_IO_Init+0x8c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800215c:	2303      	movs	r3, #3
 800215e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <GYRO_IO_Init+0x90>)
 8002174:	f001 f842 	bl	80031fc <HAL_GPIO_Init>
  
  SPIx_Init();
 8002178:	f7ff ff20 	bl	8001fbc <SPIx_Init>
}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40021000 	.word	0x40021000

0800218c <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800219c:	883b      	ldrh	r3, [r7, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d903      	bls.n	80021aa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	480f      	ldr	r0, [pc, #60]	; (80021ec <GYRO_IO_Write+0x60>)
 80021b0:	f001 fa8c 	bl	80036cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff3a 	bl	8002030 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80021bc:	e00a      	b.n	80021d4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff34 	bl	8002030 <SPIx_WriteRead>
    NumByteToWrite--;
 80021c8:	883b      	ldrh	r3, [r7, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3301      	adds	r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80021d4:	883b      	ldrh	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f1      	bne.n	80021be <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021da:	2201      	movs	r2, #1
 80021dc:	2108      	movs	r1, #8
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <GYRO_IO_Write+0x60>)
 80021e0:	f001 fa74 	bl	80036cc <HAL_GPIO_WritePin>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000

080021f0 <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
 80021fc:	4613      	mov	r3, r2
 80021fe:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002200:	883b      	ldrh	r3, [r7, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d904      	bls.n	8002210 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	e003      	b.n	8002218 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002216:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002218:	2200      	movs	r2, #0
 800221a:	2108      	movs	r1, #8
 800221c:	4810      	ldr	r0, [pc, #64]	; (8002260 <GYRO_IO_Read+0x70>)
 800221e:	f001 fa55 	bl	80036cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff03 	bl	8002030 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800222a:	e00c      	b.n	8002246 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff feff 	bl	8002030 <SPIx_WriteRead>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800223a:	883b      	ldrh	r3, [r7, #0]
 800223c:	3b01      	subs	r3, #1
 800223e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002246:	883b      	ldrh	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ef      	bne.n	800222c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800224c:	2201      	movs	r2, #1
 800224e:	2108      	movs	r1, #8
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <GYRO_IO_Read+0x70>)
 8002252:	f001 fa3b 	bl	80036cc <HAL_GPIO_WritePin>
}  
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000

08002264 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <COMPASSACCELERO_IO_Init+0x48>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <COMPASSACCELERO_IO_Init+0x48>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <COMPASSACCELERO_IO_Init+0x48>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002286:	2304      	movs	r3, #4
 8002288:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002292:	2302      	movs	r3, #2
 8002294:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <COMPASSACCELERO_IO_Init+0x4c>)
 800229c:	f000 ffae 	bl	80031fc <HAL_GPIO_Init>
  
  I2Cx_Init();
 80022a0:	f7ff fda4 	bl	8001dec <I2Cx_Init>
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40021000 	.word	0x40021000

080022b4 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022d6:	2330      	movs	r3, #48	; 0x30
 80022d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80022ee:	f000 ff85 	bl	80031fc <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80022f2:	2200      	movs	r2, #0
 80022f4:	210f      	movs	r1, #15
 80022f6:	200a      	movs	r0, #10
 80022f8:	f000 fe9b 	bl	8003032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80022fc:	200a      	movs	r0, #10
 80022fe:	f000 feb4 	bl	800306a <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40021000 	.word	0x40021000

08002314 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
 800231e:	460b      	mov	r3, r1
 8002320:	717b      	strb	r3, [r7, #5]
 8002322:	4613      	mov	r3, r2
 8002324:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002326:	793a      	ldrb	r2, [r7, #4]
 8002328:	7979      	ldrb	r1, [r7, #5]
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fd8f 	bl	8001e50 <I2Cx_WriteData>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	460a      	mov	r2, r1
 8002344:	80fb      	strh	r3, [r7, #6]
 8002346:	4613      	mov	r3, r2
 8002348:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800234a:	797a      	ldrb	r2, [r7, #5]
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fda5 	bl	8001ea0 <I2Cx_ReadData>
 8002356:	4603      	mov	r3, r0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800236a:	2300      	movs	r3, #0
 800236c:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002376:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <BSP_ACCELERO_Init+0x178>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
 800237e:	2b33      	cmp	r3, #51	; 0x33
 8002380:	d14f      	bne.n	8002422 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002382:	4b56      	ldr	r3, [pc, #344]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <BSP_ACCELERO_Init+0x178>)
 8002386:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002388:	2300      	movs	r3, #0
 800238a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 800238c:	2340      	movs	r3, #64	; 0x40
 800238e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002390:	2307      	movs	r3, #7
 8002392:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8002394:	2300      	movs	r3, #0
 8002396:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002398:	2300      	movs	r3, #0
 800239a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 800239c:	2300      	movs	r3, #0
 800239e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80023a0:	2308      	movs	r3, #8
 80023a2:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80023a4:	7b3a      	ldrb	r2, [r7, #12]
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80023ac:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	8abb      	ldrh	r3, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023ba:	7c3a      	ldrb	r2, [r7, #16]
 80023bc:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80023be:	4313      	orrs	r3, r2
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	7cbb      	ldrb	r3, [r7, #18]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	8aba      	ldrh	r2, [r7, #20]
 80023e4:	4610      	mov	r0, r2
 80023e6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80023ec:	2310      	movs	r3, #16
 80023ee:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023f8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80023fa:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002400:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002402:	4313      	orrs	r3, r2
 8002404:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8002406:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002408:	4313      	orrs	r3, r2
 800240a:	b2db      	uxtb	r3, r3
 800240c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	8aba      	ldrh	r2, [r7, #20]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	4610      	mov	r0, r2
 800241a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	e054      	b.n	80024cc <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <BSP_ACCELERO_Init+0x180>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4798      	blx	r3
 8002428:	4603      	mov	r3, r0
 800242a:	2b33      	cmp	r3, #51	; 0x33
 800242c:	d14e      	bne.n	80024cc <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 8002430:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <BSP_ACCELERO_Init+0x180>)
 8002432:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8002434:	2300      	movs	r3, #0
 8002436:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002438:	2340      	movs	r3, #64	; 0x40
 800243a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 800243c:	2307      	movs	r3, #7
 800243e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002440:	2300      	movs	r3, #0
 8002442:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8002444:	2300      	movs	r3, #0
 8002446:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002448:	2300      	movs	r3, #0
 800244a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 800244c:	2308      	movs	r3, #8
 800244e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002450:	7b3a      	ldrb	r2, [r7, #12]
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	4313      	orrs	r3, r2
 8002456:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002458:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800245a:	4313      	orrs	r3, r2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b29a      	uxth	r2, r3
 8002460:	8abb      	ldrh	r3, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002466:	7c3a      	ldrb	r2, [r7, #16]
 8002468:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800246a:	4313      	orrs	r3, r2
 800246c:	b2da      	uxtb	r2, r3
 800246e:	7cbb      	ldrb	r3, [r7, #18]
 8002470:	4313      	orrs	r3, r2
 8002472:	b2da      	uxtb	r2, r3
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	4313      	orrs	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800247c:	b21a      	sxth	r2, r3
 800247e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	b21b      	sxth	r3, r3
 8002486:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	8aba      	ldrh	r2, [r7, #20]
 8002490:	4610      	mov	r0, r2
 8002492:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002498:	2310      	movs	r3, #16
 800249a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024a4:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80024a6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80024ac:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80024b2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <BSP_ACCELERO_Init+0x17c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	8aba      	ldrh	r2, [r7, #20]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000009c 	.word	0x2000009c
 80024dc:	200003b8 	.word	0x200003b8
 80024e0:	20000068 	.word	0x20000068

080024e4 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <BSP_ACCELERO_GetXYZ+0x50>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <BSP_ACCELERO_GetXYZ+0x50>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <BSP_ACCELERO_GetXYZ+0x50>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <BSP_ACCELERO_GetXYZ+0x54>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10e      	bne.n	800252c <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	425b      	negs	r3, r3
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3302      	adds	r3, #2
 8002528:	b212      	sxth	r2, r2
 800252a:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200003b8 	.word	0x200003b8
 8002538:	2000009c 	.word	0x2000009c

0800253c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002546:	2300      	movs	r3, #0
 8002548:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800254a:	2300      	movs	r3, #0
 800254c:	703b      	strb	r3, [r7, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <BSP_GYRO_Init+0x160>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4798      	blx	r3
 8002558:	4603      	mov	r3, r0
 800255a:	2bd4      	cmp	r3, #212	; 0xd4
 800255c:	d005      	beq.n	800256a <BSP_GYRO_Init+0x2e>
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <BSP_GYRO_Init+0x160>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4798      	blx	r3
 8002564:	4603      	mov	r3, r0
 8002566:	2bd5      	cmp	r3, #213	; 0xd5
 8002568:	d146      	bne.n	80025f8 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <BSP_GYRO_Init+0x164>)
 800256c:	4a4b      	ldr	r2, [pc, #300]	; (800269c <BSP_GYRO_Init+0x160>)
 800256e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002570:	2308      	movs	r3, #8
 8002572:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002574:	2300      	movs	r3, #0
 8002576:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002578:	2307      	movs	r3, #7
 800257a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800257c:	2330      	movs	r3, #48	; 0x30
 800257e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002580:	2300      	movs	r3, #0
 8002582:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002584:	2300      	movs	r3, #0
 8002586:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002588:	2310      	movs	r3, #16
 800258a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800258c:	793a      	ldrb	r2, [r7, #4]
 800258e:	797b      	ldrb	r3, [r7, #5]
 8002590:	4313      	orrs	r3, r2
 8002592:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002594:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002596:	4313      	orrs	r3, r2
 8002598:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800259a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800259c:	4313      	orrs	r3, r2
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025a2:	7a3a      	ldrb	r2, [r7, #8]
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025aa:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <BSP_GYRO_Init+0x164>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	89ba      	ldrh	r2, [r7, #12]
 80025c4:	4610      	mov	r0, r2
 80025c6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80025c8:	2300      	movs	r3, #0
 80025ca:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025d0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80025d2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <BSP_GYRO_Init+0x164>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	89ba      	ldrh	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <BSP_GYRO_Init+0x164>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	2010      	movs	r0, #16
 80025f0:	4798      	blx	r3

    ret = GYRO_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e04b      	b.n	8002690 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <BSP_GYRO_Init+0x168>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4798      	blx	r3
 80025fe:	4603      	mov	r3, r0
 8002600:	2bd3      	cmp	r3, #211	; 0xd3
 8002602:	d145      	bne.n	8002690 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <BSP_GYRO_Init+0x164>)
 8002606:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <BSP_GYRO_Init+0x168>)
 8002608:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 800260a:	2308      	movs	r3, #8
 800260c:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 800260e:	2300      	movs	r3, #0
 8002610:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8002612:	2307      	movs	r3, #7
 8002614:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8002616:	2330      	movs	r3, #48	; 0x30
 8002618:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 800261a:	2300      	movs	r3, #0
 800261c:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 800261e:	2300      	movs	r3, #0
 8002620:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8002622:	2310      	movs	r3, #16
 8002624:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002626:	793a      	ldrb	r2, [r7, #4]
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	4313      	orrs	r3, r2
 800262c:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800262e:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002630:	4313      	orrs	r3, r2
 8002632:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002634:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002636:	4313      	orrs	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800263c:	7a3a      	ldrb	r2, [r7, #8]
 800263e:	7a7b      	ldrb	r3, [r7, #9]
 8002640:	4313      	orrs	r3, r2
 8002642:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002644:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002646:	4313      	orrs	r3, r2
 8002648:	b2db      	uxtb	r3, r3
 800264a:	b29b      	uxth	r3, r3
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b29a      	uxth	r2, r3
 8002650:	89bb      	ldrh	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <BSP_GYRO_Init+0x164>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	89ba      	ldrh	r2, [r7, #12]
 800265e:	4610      	mov	r0, r2
 8002660:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8002662:	2300      	movs	r3, #0
 8002664:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8002666:	2300      	movs	r3, #0
 8002668:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800266a:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800266c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800266e:	4313      	orrs	r3, r2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <BSP_GYRO_Init+0x164>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	89ba      	ldrh	r2, [r7, #12]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4610      	mov	r0, r2
 8002680:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <BSP_GYRO_Init+0x164>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	2010      	movs	r0, #16
 800268a:	4798      	blx	r3

    ret = GYRO_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000034 	.word	0x20000034
 80026a0:	200003bc 	.word	0x200003bc
 80026a4:	20000000 	.word	0x20000000

080026a8 <BSP_GYRO_EnableIT>:
  *        @arg L3GD20_INT2
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  */
void BSP_GYRO_EnableIT(uint8_t IntPin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if(GyroscopeDrv->EnableIT != NULL)
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <BSP_GYRO_EnableIT+0x28>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <BSP_GYRO_EnableIT+0x20>
  {
    GyroscopeDrv->EnableIT(IntPin);
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <BSP_GYRO_EnableIT+0x28>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	79fa      	ldrb	r2, [r7, #7]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200003bc 	.word	0x200003bc

080026d4 <BSP_GYRO_DisableIT>:
  *        @arg L3GD20_INT2
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  */
void BSP_GYRO_DisableIT(uint8_t IntPin)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if(GyroscopeDrv->DisableIT != NULL)
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <BSP_GYRO_DisableIT+0x28>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <BSP_GYRO_DisableIT+0x20>
  {
    GyroscopeDrv->DisableIT(IntPin);
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <BSP_GYRO_DisableIT+0x28>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3
  }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200003bc 	.word	0x200003bc

08002700 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <BSP_GYRO_GetXYZ+0x24>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <BSP_GYRO_GetXYZ+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
  }
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200003bc 	.word	0x200003bc

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_MspInit+0x4c>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_MspInit+0x4c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002766:	2007      	movs	r0, #7
 8002768:	f000 fc58 	bl	800301c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_I2C_MspInit+0x94>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d134      	bne.n	8002804 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80027b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c8:	2304      	movs	r3, #4
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	4810      	ldr	r0, [pc, #64]	; (8002814 <HAL_I2C_MspInit+0x9c>)
 80027d4:	f000 fd12 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_I2C_MspInit+0x98>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	201f      	movs	r0, #31
 80027fa:	f000 fc1a 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027fe:	201f      	movs	r0, #31
 8002800:	f000 fc33 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002804:	bf00      	nop
 8002806:	3728      	adds	r7, #40	; 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40005400 	.word	0x40005400
 8002810:	40023800 	.word	0x40023800
 8002814:	40020400 	.word	0x40020400

08002818 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_I2C_MspDeInit+0x40>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_I2C_MspDeInit+0x44>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_I2C_MspDeInit+0x44>)
 8002830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	4809      	ldr	r0, [pc, #36]	; (8002860 <HAL_I2C_MspDeInit+0x48>)
 800283a:	f000 fe63 	bl	8003504 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800283e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <HAL_I2C_MspDeInit+0x48>)
 8002844:	f000 fe5e 	bl	8003504 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002848:	201f      	movs	r0, #31
 800284a:	f000 fc1c 	bl	8003086 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40005400 	.word	0x40005400
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400

08002864 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	; 0x38
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a59      	ldr	r2, [pc, #356]	; (80029e8 <HAL_I2S_MspInit+0x184>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d15b      	bne.n	800293e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_I2S_MspInit+0x188>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028da:	2304      	movs	r3, #4
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80028ea:	2306      	movs	r3, #6
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	4619      	mov	r1, r3
 80028f4:	483e      	ldr	r0, [pc, #248]	; (80029f0 <HAL_I2S_MspInit+0x18c>)
 80028f6:	f000 fc81 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80028fa:	2308      	movs	r3, #8
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800290a:	2305      	movs	r3, #5
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002912:	4619      	mov	r1, r3
 8002914:	4836      	ldr	r0, [pc, #216]	; (80029f0 <HAL_I2S_MspInit+0x18c>)
 8002916:	f000 fc71 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800291a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800292c:	2305      	movs	r3, #5
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	482f      	ldr	r0, [pc, #188]	; (80029f4 <HAL_I2S_MspInit+0x190>)
 8002938:	f000 fc60 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800293c:	e04f      	b.n	80029de <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <HAL_I2S_MspInit+0x194>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d14a      	bne.n	80029de <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_I2S_MspInit+0x188>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_I2S_MspInit+0x188>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800299c:	2310      	movs	r3, #16
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029ac:	2306      	movs	r3, #6
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <HAL_I2S_MspInit+0x198>)
 80029b8:	f000 fc20 	bl	80031fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80029bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029ce:	2306      	movs	r3, #6
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <HAL_I2S_MspInit+0x18c>)
 80029da:	f000 fc0f 	bl	80031fc <HAL_GPIO_Init>
}
 80029de:	bf00      	nop
 80029e0:	3738      	adds	r7, #56	; 0x38
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40003800 	.word	0x40003800
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020800 	.word	0x40020800
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40003c00 	.word	0x40003c00
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_SPI_MspInit+0x94>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d133      	bne.n	8002a8a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_SPI_MspInit+0x98>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002a5a:	23e0      	movs	r3, #224	; 0xe0
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <HAL_SPI_MspInit+0x9c>)
 8002a76:	f000 fbc1 	bl	80031fc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2023      	movs	r0, #35	; 0x23
 8002a80:	f000 fad7 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a84:	2023      	movs	r0, #35	; 0x23
 8002a86:	f000 faf0 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40013000 	.word	0x40013000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000

08002aa0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_SPI_MspDeInit+0x34>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10c      	bne.n	8002acc <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_SPI_MspDeInit+0x38>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_SPI_MspDeInit+0x38>)
 8002ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8002abe:	21e0      	movs	r1, #224	; 0xe0
 8002ac0:	4806      	ldr	r0, [pc, #24]	; (8002adc <HAL_SPI_MspDeInit+0x3c>)
 8002ac2:	f000 fd1f 	bl	8003504 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8002ac6:	2023      	movs	r0, #35	; 0x23
 8002ac8:	f000 fadd 	bl	8003086 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013000 	.word	0x40013000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000

08002ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_UART_MspInit+0x94>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d133      	bne.n	8002b6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_UART_MspInit+0x98>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	4619      	mov	r1, r3
 8002b54:	4809      	ldr	r0, [pc, #36]	; (8002b7c <HAL_UART_MspInit+0x9c>)
 8002b56:	f000 fb51 	bl	80031fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2026      	movs	r0, #38	; 0x26
 8002b60:	f000 fa67 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b64:	2026      	movs	r0, #38	; 0x26
 8002b66:	f000 fa80 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <NMI_Handler+0x4>

08002b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <MemManage_Handler+0x4>

08002b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <BusFault_Handler+0x4>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <UsageFault_Handler+0x4>

08002b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f000 f8ee 	bl	8002dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <I2C1_EV_IRQHandler+0x10>)
 8002bda:	f002 fe2f 	bl	800583c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000170 	.word	0x20000170

08002be8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <SPI1_IRQHandler+0x10>)
 8002bee:	f006 fa0f 	bl	8009010 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000254 	.word	0x20000254

08002bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <USART2_IRQHandler+0x10>)
 8002c02:	f006 fccf 	bl	80095a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200002ac 	.word	0x200002ac

08002c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <OTG_FS_IRQHandler+0x10>)
 8002c16:	f000 ffdd 	bl	8003bd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200007a4 	.word	0x200007a4

08002c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <_sbrk+0x5c>)
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <_sbrk+0x60>)
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_sbrk+0x64>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <_sbrk+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c54:	f00a ffac 	bl	800dbb0 <__errno>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c62:	e009      	b.n	8002c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <_sbrk+0x64>)
 8002c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20020000 	.word	0x20020000
 8002c84:	00000400 	.word	0x00000400
 8002c88:	200003c0 	.word	0x200003c0
 8002c8c:	20000bf0 	.word	0x20000bf0

08002c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <SystemInit+0x20>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <SystemInit+0x20>)
 8002c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cba:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cbc:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cd0:	4c0b      	ldr	r4, [pc, #44]	; (8002d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cde:	f7ff ffd7 	bl	8002c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f00a ff6b 	bl	800dbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce6:	f7fe fd99 	bl	800181c <main>
  bx  lr    
 8002cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf4:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002cf8:	0800e3d4 	.word	0x0800e3d4
  ldr r2, =_sbss
 8002cfc:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002d00:	20000bf0 	.word	0x20000bf0

08002d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC_IRQHandler>
	...

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <HAL_Init+0x40>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_Init+0x40>)
 8002d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_Init+0x40>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d30:	2003      	movs	r0, #3
 8002d32:	f000 f973 	bl	800301c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 f808 	bl	8002d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3c:	f7ff fcf4 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00

08002d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_InitTick+0x54>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x58>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f999 	bl	80030a2 <HAL_SYSTICK_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00e      	b.n	8002d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d80a      	bhi.n	8002d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d80:	2200      	movs	r2, #0
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d88:	f000 f953 	bl	8003032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d8c:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <HAL_InitTick+0x5c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200000d8 	.word	0x200000d8
 8002da4:	200000e0 	.word	0x200000e0
 8002da8:	200000dc 	.word	0x200000dc

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200000e0 	.word	0x200000e0
 8002dd0:	200003c4 	.word	0x200003c4

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200003c4 	.word	0x200003c4

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ffee 	bl	8002dd4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_Delay+0x44>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000e0 	.word	0x200000e0

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db12      	blt.n	8002f0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	490a      	ldr	r1, [pc, #40]	; (8002f18 <__NVIC_DisableIRQ+0x44>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	3320      	adds	r3, #32
 8002efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f00:	f3bf 8f4f 	dsb	sy
}
 8002f04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f06:	f3bf 8f6f 	isb	sy
}
 8002f0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	; (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	; (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d301      	bcc.n	8002fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00f      	b.n	800300e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <SysTick_Config+0x40>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffc:	f7ff ff8e 	bl	8002f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SysTick_Config+0x40>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <SysTick_Config+0x40>)
 8003008:	2207      	movs	r2, #7
 800300a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000e010 	.word	0xe000e010

0800301c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff05 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003044:	f7ff ff1a 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7ff ff8e 	bl	8002f70 <NVIC_EncodePriority>
 8003054:	4602      	mov	r2, r0
 8003056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff5d 	bl	8002f1c <__NVIC_SetPriority>
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff0d 	bl	8002e98 <__NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff1d 	bl	8002ed4 <__NVIC_DisableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff94 	bl	8002fd8 <SysTick_Config>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff fe84 	bl	8002dd4 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d008      	beq.n	80030ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e052      	b.n	8003192 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0216 	bic.w	r2, r2, #22
 80030fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <HAL_DMA_Abort+0x62>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0208 	bic.w	r2, r2, #8
 800312a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313c:	e013      	b.n	8003166 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800313e:	f7ff fe49 	bl	8002dd4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b05      	cmp	r3, #5
 800314a:	d90c      	bls.n	8003166 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e015      	b.n	8003192 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e4      	bne.n	800313e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	223f      	movs	r2, #63	; 0x3f
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d004      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00c      	b.n	80031d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2205      	movs	r2, #5
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ec:	b2db      	uxtb	r3, r3
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e159      	b.n	80034cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 8148 	bne.w	80034c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	2b02      	cmp	r3, #2
 800324c:	d130      	bne.n	80032b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a2 	beq.w	80034c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a56      	ldr	r2, [pc, #344]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339e:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_GPIO_Init+0x2ec>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a49      	ldr	r2, [pc, #292]	; (80034ec <HAL_GPIO_Init+0x2f0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x202>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a48      	ldr	r2, [pc, #288]	; (80034f0 <HAL_GPIO_Init+0x2f4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x1fe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a47      	ldr	r2, [pc, #284]	; (80034f4 <HAL_GPIO_Init+0x2f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x1fa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_GPIO_Init+0x2fc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x1f6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_GPIO_Init+0x300>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x1f2>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e008      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033ee:	2307      	movs	r3, #7
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033f2:	2303      	movs	r3, #3
 80033f4:	e004      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033fe:	2300      	movs	r3, #0
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f002 0203 	and.w	r2, r2, #3
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	4093      	lsls	r3, r2
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003410:	4935      	ldr	r1, [pc, #212]	; (80034e8 <HAL_GPIO_Init+0x2ec>)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003442:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_GPIO_Init+0x304>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <HAL_GPIO_Init+0x304>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_GPIO_Init+0x304>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <HAL_GPIO_Init+0x304>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	f67f aea2 	bls.w	8003218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020c00 	.word	0x40020c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e0bb      	b.n	8003698 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003520:	2201      	movs	r2, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	429a      	cmp	r2, r3
 8003538:	f040 80ab 	bne.w	8003692 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800353c:	4a5c      	ldr	r2, [pc, #368]	; (80036b0 <HAL_GPIO_DeInit+0x1ac>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	220f      	movs	r2, #15
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_GPIO_DeInit+0x1b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_DeInit+0x96>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_GPIO_DeInit+0x1b4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_DeInit+0x92>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_GPIO_DeInit+0x1b8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_DeInit+0x8e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_GPIO_DeInit+0x1bc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_DeInit+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <HAL_GPIO_DeInit+0x1c0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_DeInit+0x86>
 8003586:	2304      	movs	r3, #4
 8003588:	e008      	b.n	800359c <HAL_GPIO_DeInit+0x98>
 800358a:	2307      	movs	r3, #7
 800358c:	e006      	b.n	800359c <HAL_GPIO_DeInit+0x98>
 800358e:	2303      	movs	r3, #3
 8003590:	e004      	b.n	800359c <HAL_GPIO_DeInit+0x98>
 8003592:	2302      	movs	r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_DeInit+0x98>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_GPIO_DeInit+0x98>
 800359a:	2300      	movs	r3, #0
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	f002 0203 	and.w	r2, r2, #3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4093      	lsls	r3, r2
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d132      	bne.n	8003612 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035ac:	4b46      	ldr	r3, [pc, #280]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4944      	ldr	r1, [pc, #272]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035ba:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	4941      	ldr	r1, [pc, #260]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035c8:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	493d      	ldr	r1, [pc, #244]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	493a      	ldr	r1, [pc, #232]	; (80036c8 <HAL_GPIO_DeInit+0x1c4>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035f4:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <HAL_GPIO_DeInit+0x1ac>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	43da      	mvns	r2, r3
 8003604:	482a      	ldr	r0, [pc, #168]	; (80036b0 <HAL_GPIO_DeInit+0x1ac>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	400a      	ands	r2, r1
 800360c:	3302      	adds	r3, #2
 800360e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	2103      	movs	r1, #3
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	08d2      	lsrs	r2, r2, #3
 8003648:	4019      	ands	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2103      	movs	r1, #3
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	2101      	movs	r1, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2103      	movs	r1, #3
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3301      	adds	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	f67f af40 	bls.w	8003520 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003700:	b08f      	sub	sp, #60	; 0x3c
 8003702:	af0a      	add	r7, sp, #40	; 0x28
 8003704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e054      	b.n	80037ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f009 fea2 	bl	800d474 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2203      	movs	r2, #3
 8003734:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f006 fece 	bl	800a4f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	687e      	ldr	r6, [r7, #4]
 800375c:	466d      	mov	r5, sp
 800375e:	f106 0410 	add.w	r4, r6, #16
 8003762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003772:	1d33      	adds	r3, r6, #4
 8003774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f006 fe48 	bl	800a40c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f006 fec5 	bl	800a512 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	687e      	ldr	r6, [r7, #4]
 8003790:	466d      	mov	r5, sp
 8003792:	f106 0410 	add.w	r4, r6, #16
 8003796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80037a6:	1d33      	adds	r3, r6, #4
 80037a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037aa:	6838      	ldr	r0, [r7, #0]
 80037ac:	f007 f84e 	bl	800a84c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80037c2:	b590      	push	{r4, r7, lr}
 80037c4:	b089      	sub	sp, #36	; 0x24
 80037c6:	af04      	add	r7, sp, #16
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	4608      	mov	r0, r1
 80037cc:	4611      	mov	r1, r2
 80037ce:	461a      	mov	r2, r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	70fb      	strb	r3, [r7, #3]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70bb      	strb	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_HCD_HC_Init+0x28>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e076      	b.n	80038d8 <HAL_HCD_HC_Init+0x116>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333d      	adds	r3, #61	; 0x3d
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	787a      	ldrb	r2, [r7, #1]
 8003814:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3340      	adds	r3, #64	; 0x40
 8003824:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003826:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3339      	adds	r3, #57	; 0x39
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333f      	adds	r3, #63	; 0x3f
 8003848:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800384c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	78ba      	ldrb	r2, [r7, #2]
 8003852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003856:	b2d0      	uxtb	r0, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	333a      	adds	r3, #58	; 0x3a
 8003864:	4602      	mov	r2, r0
 8003866:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da09      	bge.n	8003884 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	333b      	adds	r3, #59	; 0x3b
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e008      	b.n	8003896 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	333b      	adds	r3, #59	; 0x3b
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	333c      	adds	r3, #60	; 0x3c
 80038a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80038a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	787c      	ldrb	r4, [r7, #1]
 80038b0:	78ba      	ldrb	r2, [r7, #2]
 80038b2:	78f9      	ldrb	r1, [r7, #3]
 80038b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038b6:	9302      	str	r3, [sp, #8]
 80038b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4623      	mov	r3, r4
 80038c6:	f007 f947 	bl	800ab58 <USB_HC_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_HCD_HC_Halt+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e00f      	b.n	800391e <HAL_HCD_HC_Halt+0x3e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f007 fb97 	bl	800b042 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	4603      	mov	r3, r0
 8003938:	70fb      	strb	r3, [r7, #3]
 800393a:	460b      	mov	r3, r1
 800393c:	70bb      	strb	r3, [r7, #2]
 800393e:	4613      	mov	r3, r2
 8003940:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333b      	adds	r3, #59	; 0x3b
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	333f      	adds	r3, #63	; 0x3f
 8003962:	787a      	ldrb	r2, [r7, #1]
 8003964:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003966:	7c3b      	ldrb	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d112      	bne.n	8003992 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3342      	adds	r3, #66	; 0x42
 800397a:	2203      	movs	r2, #3
 800397c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	333d      	adds	r3, #61	; 0x3d
 800398c:	7f3a      	ldrb	r2, [r7, #28]
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e008      	b.n	80039a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3342      	adds	r3, #66	; 0x42
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f200 80c6 	bhi.w	8003b38 <HAL_HCD_HC_SubmitRequest+0x210>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	08003b25 	.word	0x08003b25
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003aa7 	.word	0x08003aa7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80039c4:	7c3b      	ldrb	r3, [r7, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80b8 	bne.w	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
 80039cc:	78bb      	ldrb	r3, [r7, #2]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 80b4 	bne.w	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80039d4:	8b3b      	ldrh	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3355      	adds	r3, #85	; 0x55
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3355      	adds	r3, #85	; 0x55
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3342      	adds	r3, #66	; 0x42
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a12:	e093      	b.n	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3342      	adds	r3, #66	; 0x42
 8003a22:	2202      	movs	r2, #2
 8003a24:	701a      	strb	r2, [r3, #0]
      break;
 8003a26:	e089      	b.n	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a28:	78bb      	ldrb	r3, [r7, #2]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3355      	adds	r3, #85	; 0x55
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3342      	adds	r3, #66	; 0x42
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003a54:	e073      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3342      	adds	r3, #66	; 0x42
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      break;
 8003a68:	e069      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3354      	adds	r3, #84	; 0x54
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3342      	adds	r3, #66	; 0x42
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
      break;
 8003a90:	e055      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3342      	adds	r3, #66	; 0x42
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	701a      	strb	r2, [r3, #0]
      break;
 8003aa4:	e04b      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003aa6:	78bb      	ldrb	r3, [r7, #2]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3355      	adds	r3, #85	; 0x55
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3342      	adds	r3, #66	; 0x42
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ad2:	e034      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3342      	adds	r3, #66	; 0x42
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e02a      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3354      	adds	r3, #84	; 0x54
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	3342      	adds	r3, #66	; 0x42
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e016      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3342      	adds	r3, #66	; 0x42
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
      break;
 8003b22:	e00c      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3342      	adds	r3, #66	; 0x42
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003b3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3344      	adds	r3, #68	; 0x44
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	8b3a      	ldrh	r2, [r7, #24]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f303 	mul.w	r3, r0, r3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	; 0x4c
 8003b60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3350      	adds	r3, #80	; 0x50
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3339      	adds	r3, #57	; 0x39
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3361      	adds	r3, #97	; 0x61
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	222c      	movs	r2, #44	; 0x2c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	3338      	adds	r3, #56	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	18d1      	adds	r1, r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f007 f8ea 	bl	800ad9c <USB_HC_StartXfer>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 fdeb 	bl	800a7c6 <USB_GetMode>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 80f6 	bne.w	8003de4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f006 fdcf 	bl	800a7a0 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80ec 	beq.w	8003de2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f006 fdc6 	bl	800a7a0 <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1e:	d104      	bne.n	8003c2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f006 fdb6 	bl	800a7a0 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d104      	bne.n	8003c4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f006 fda6 	bl	800a7a0 <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5e:	d104      	bne.n	8003c6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 fd96 	bl	800a7a0 <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2202      	movs	r2, #2
 8003c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f006 fd88 	bl	800a7a0 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9a:	d11c      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ca4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	6938      	ldr	r0, [r7, #16]
 8003cba:	f006 fc77 	bl	800a5ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f006 fca8 	bl	800a614 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f006 fe7e 	bl	800a9cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f009 fc4d 	bl	800d570 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f006 fd60 	bl	800a7a0 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cea:	d102      	bne.n	8003cf2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 f89e 	bl	8004e2e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f006 fd52 	bl	800a7a0 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d106      	bne.n	8003d14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f009 fc16 	bl	800d538 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f006 fd41 	bl	800a7a0 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d101      	bne.n	8003d2c <HAL_HCD_IRQHandler+0x158>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_HCD_IRQHandler+0x15a>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d012      	beq.n	8003d58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0210 	bic.w	r2, r2, #16
 8003d40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 ffa1 	bl	8004c8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f006 fd1f 	bl	800a7a0 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d6c:	d13a      	bne.n	8003de4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f007 f954 	bl	800b020 <USB_HC_ReadInterrupt>
 8003d78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e025      	b.n	8003dcc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d106      	bne.n	8003dba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8ab 	bl	8003f0e <HCD_HC_IN_IRQHandler>
 8003db8:	e005      	b.n	8003dc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fbf9 	bl	80045b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3d4      	bcc.n	8003d80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dde:	615a      	str	r2, [r3, #20]
 8003de0:	e000      	b.n	8003de4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003de2:	bf00      	nop
    }
  }
}
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_HCD_Start+0x16>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e013      	b.n	8003e28 <HAL_HCD_Start+0x3e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f006 fe40 	bl	800aa94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f006 fb58 	bl	800a4ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_HCD_Stop+0x16>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e00d      	b.n	8003e62 <HAL_HCD_Stop+0x32>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f007 fa2e 	bl	800b2b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f006 fde2 	bl	800aa40 <USB_ResetPort>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3360      	adds	r3, #96	; 0x60
 8003ea0:	781b      	ldrb	r3, [r3, #0]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3350      	adds	r3, #80	; 0x50
 8003ec8:	681b      	ldr	r3, [r3, #0]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f006 fe26 	bl	800ab34 <USB_GetCurrentFrame>
 8003ee8:	4603      	mov	r3, r0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f006 fe01 	bl	800ab06 <USB_GetHostSpeed>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d11a      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3361      	adds	r3, #97	; 0x61
 8003f5e:	2206      	movs	r2, #6
 8003f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f007 f868 	bl	800b042 <USB_HC_Halt>
 8003f72:	e0af      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8a:	d11b      	bne.n	8003fc4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3361      	adds	r3, #97	; 0x61
 8003fae:	2207      	movs	r2, #7
 8003fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f007 f840 	bl	800b042 <USB_HC_Halt>
 8003fc2:	e087      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d109      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2320      	movs	r3, #32
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	e072      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d11a      	bne.n	800403a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	2308      	movs	r3, #8
 8004014:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3361      	adds	r3, #97	; 0x61
 8004024:	2205      	movs	r2, #5
 8004026:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f007 f805 	bl	800b042 <USB_HC_Halt>
 8004038:	e04c      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d11b      	bne.n	800408a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	461a      	mov	r2, r3
 8004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004064:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3361      	adds	r3, #97	; 0x61
 8004074:	2208      	movs	r2, #8
 8004076:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f006 ffdd 	bl	800b042 <USB_HC_Halt>
 8004088:	e024      	b.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d119      	bne.n	80040d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	461a      	mov	r2, r3
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	3361      	adds	r3, #97	; 0x61
 80040c0:	2206      	movs	r2, #6
 80040c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f006 ffb7 	bl	800b042 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d112      	bne.n	8004112 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f006 ffa3 	bl	800b042 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004110:	e24e      	b.n	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 80df 	bne.w	80042e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	3348      	adds	r3, #72	; 0x48
 8004140:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	0159      	lsls	r1, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	440b      	add	r3, r1
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	202c      	movs	r0, #44	; 0x2c
 800415c:	fb00 f303 	mul.w	r3, r0, r3
 8004160:	440b      	add	r3, r1
 8004162:	3350      	adds	r3, #80	; 0x50
 8004164:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	3361      	adds	r3, #97	; 0x61
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	335c      	adds	r3, #92	; 0x5c
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	461a      	mov	r2, r3
 8004198:	2301      	movs	r3, #1
 800419a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	333f      	adds	r3, #63	; 0x3f
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	333f      	adds	r3, #63	; 0x3f
 80041be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d111      	bne.n	80041e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f006 ff37 	bl	800b042 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	461a      	mov	r2, r3
 80041e2:	2310      	movs	r3, #16
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	e03a      	b.n	800425e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	333f      	adds	r3, #63	; 0x3f
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d009      	beq.n	8004210 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	333f      	adds	r3, #63	; 0x3f
 800420a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800420c:	2b01      	cmp	r3, #1
 800420e:	d126      	bne.n	800425e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	440a      	add	r2, r1
 8004226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800422a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800422e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3360      	adds	r3, #96	; 0x60
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	b2d9      	uxtb	r1, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	202c      	movs	r0, #44	; 0x2c
 800424c:	fb00 f303 	mul.w	r3, r0, r3
 8004250:	4413      	add	r3, r2
 8004252:	3360      	adds	r3, #96	; 0x60
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f009 f997 	bl	800d58c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d12b      	bne.n	80042be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3348      	adds	r3, #72	; 0x48
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	202c      	movs	r0, #44	; 0x2c
 800427c:	fb00 f202 	mul.w	r2, r0, r2
 8004280:	440a      	add	r2, r1
 8004282:	3240      	adds	r2, #64	; 0x40
 8004284:	8812      	ldrh	r2, [r2, #0]
 8004286:	fbb3 f3f2 	udiv	r3, r3, r2
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 818e 	beq.w	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3354      	adds	r3, #84	; 0x54
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2d8      	uxtb	r0, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3354      	adds	r3, #84	; 0x54
 80042b8:	4602      	mov	r2, r0
 80042ba:	701a      	strb	r2, [r3, #0]
}
 80042bc:	e178      	b.n	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3354      	adds	r3, #84	; 0x54
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f083 0301 	eor.w	r3, r3, #1
 80042d2:	b2d8      	uxtb	r0, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3354      	adds	r3, #84	; 0x54
 80042e2:	4602      	mov	r2, r0
 80042e4:	701a      	strb	r2, [r3, #0]
}
 80042e6:	e163      	b.n	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f040 80f6 	bne.w	80044ec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	3361      	adds	r3, #97	; 0x61
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d109      	bne.n	8004328 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3360      	adds	r3, #96	; 0x60
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e0c9      	b.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	3361      	adds	r3, #97	; 0x61
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d109      	bne.n	8004350 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3360      	adds	r3, #96	; 0x60
 800434a:	2205      	movs	r2, #5
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e0b5      	b.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3361      	adds	r3, #97	; 0x61
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b06      	cmp	r3, #6
 8004362:	d009      	beq.n	8004378 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3361      	adds	r3, #97	; 0x61
 8004372:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004374:	2b08      	cmp	r3, #8
 8004376:	d150      	bne.n	800441a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	335c      	adds	r3, #92	; 0x5c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	202c      	movs	r0, #44	; 0x2c
 8004390:	fb00 f303 	mul.w	r3, r0, r3
 8004394:	440b      	add	r3, r1
 8004396:	335c      	adds	r3, #92	; 0x5c
 8004398:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	335c      	adds	r3, #92	; 0x5c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d912      	bls.n	80043d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	335c      	adds	r3, #92	; 0x5c
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3360      	adds	r3, #96	; 0x60
 80043ce:	2204      	movs	r2, #4
 80043d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043d2:	e073      	b.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3360      	adds	r3, #96	; 0x60
 80043e2:	2202      	movs	r2, #2
 80043e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004404:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004418:	e050      	b.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3361      	adds	r3, #97	; 0x61
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d122      	bne.n	8004474 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3360      	adds	r3, #96	; 0x60
 800443c:	2202      	movs	r2, #2
 800443e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004456:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e023      	b.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3361      	adds	r3, #97	; 0x61
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b07      	cmp	r3, #7
 8004486:	d119      	bne.n	80044bc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	335c      	adds	r3, #92	; 0x5c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	202c      	movs	r0, #44	; 0x2c
 80044a0:	fb00 f303 	mul.w	r3, r0, r3
 80044a4:	440b      	add	r3, r1
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3360      	adds	r3, #96	; 0x60
 80044b8:	2204      	movs	r2, #4
 80044ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	2302      	movs	r3, #2
 80044cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	b2d9      	uxtb	r1, r3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	202c      	movs	r0, #44	; 0x2c
 80044d8:	fb00 f303 	mul.w	r3, r0, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3360      	adds	r3, #96	; 0x60
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f009 f851 	bl	800d58c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044ea:	e061      	b.n	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d156      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	333f      	adds	r3, #63	; 0x3f
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d111      	bne.n	800453a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	335c      	adds	r3, #92	; 0x5c
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f006 fd85 	bl	800b042 <USB_HC_Halt>
 8004538:	e031      	b.n	800459e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	333f      	adds	r3, #63	; 0x3f
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	333f      	adds	r3, #63	; 0x3f
 800455c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800455e:	2b02      	cmp	r3, #2
 8004560:	d11d      	bne.n	800459e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	335c      	adds	r3, #92	; 0x5c
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d110      	bne.n	800459e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3361      	adds	r3, #97	; 0x61
 800458a:	2203      	movs	r2, #3
 800458c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fd52 	bl	800b042 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	461a      	mov	r2, r3
 80045ac:	2310      	movs	r3, #16
 80045ae:	6093      	str	r3, [r2, #8]
}
 80045b0:	bf00      	nop
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d11a      	bne.n	800461e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	2304      	movs	r3, #4
 80045f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	212c      	movs	r1, #44	; 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	3361      	adds	r3, #97	; 0x61
 8004608:	2206      	movs	r2, #6
 800460a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f006 fd13 	bl	800b042 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800461c:	e331      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d12e      	bne.n	8004692 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	461a      	mov	r2, r3
 8004642:	2320      	movs	r3, #32
 8004644:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	333d      	adds	r3, #61	; 0x3d
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 8313 	bne.w	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	333d      	adds	r3, #61	; 0x3d
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	3360      	adds	r3, #96	; 0x60
 800467c:	2202      	movs	r2, #2
 800467e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f006 fcd9 	bl	800b042 <USB_HC_Halt>
}
 8004690:	e2f7      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d112      	bne.n	80046d0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f006 fcba 	bl	800b042 <USB_HC_Halt>
}
 80046ce:	e2d8      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d140      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	335c      	adds	r3, #92	; 0x5c
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d111      	bne.n	8004732 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	333d      	adds	r3, #61	; 0x3d
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2340      	movs	r3, #64	; 0x40
 8004730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	461a      	mov	r2, r3
 8004740:	2301      	movs	r3, #1
 8004742:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3361      	adds	r3, #97	; 0x61
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f006 fc6e 	bl	800b042 <USB_HC_Halt>
}
 8004766:	e28c      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d12c      	bne.n	80047d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3361      	adds	r3, #97	; 0x61
 800478c:	2204      	movs	r2, #4
 800478e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	333d      	adds	r3, #61	; 0x3d
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	335c      	adds	r3, #92	; 0x5c
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f006 fc3f 	bl	800b042 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	461a      	mov	r2, r3
 80047d2:	2340      	movs	r3, #64	; 0x40
 80047d4:	6093      	str	r3, [r2, #8]
}
 80047d6:	e254      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d11a      	bne.n	8004824 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	461a      	mov	r2, r3
 80047fc:	2308      	movs	r3, #8
 80047fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3361      	adds	r3, #97	; 0x61
 800480e:	2205      	movs	r2, #5
 8004810:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f006 fc10 	bl	800b042 <USB_HC_Halt>
}
 8004822:	e22e      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d140      	bne.n	80048bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	335c      	adds	r3, #92	; 0x5c
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3361      	adds	r3, #97	; 0x61
 800485a:	2203      	movs	r2, #3
 800485c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	333d      	adds	r3, #61	; 0x3d
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d112      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	333c      	adds	r3, #60	; 0x3c
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	333d      	adds	r3, #61	; 0x3d
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	4611      	mov	r1, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f006 fbcd 	bl	800b042 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2310      	movs	r3, #16
 80048b8:	6093      	str	r3, [r2, #8]
}
 80048ba:	e1e2      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d164      	bne.n	800499c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d111      	bne.n	80048fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3361      	adds	r3, #97	; 0x61
 80048e8:	2206      	movs	r2, #6
 80048ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f006 fba3 	bl	800b042 <USB_HC_Halt>
 80048fc:	e044      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	212c      	movs	r1, #44	; 0x2c
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	335c      	adds	r3, #92	; 0x5c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	202c      	movs	r0, #44	; 0x2c
 8004916:	fb00 f303 	mul.w	r3, r0, r3
 800491a:	440b      	add	r3, r1
 800491c:	335c      	adds	r3, #92	; 0x5c
 800491e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	335c      	adds	r3, #92	; 0x5c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d920      	bls.n	8004976 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	335c      	adds	r3, #92	; 0x5c
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	3360      	adds	r3, #96	; 0x60
 8004954:	2204      	movs	r2, #4
 8004956:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	b2d9      	uxtb	r1, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	202c      	movs	r0, #44	; 0x2c
 8004962:	fb00 f303 	mul.w	r3, r0, r3
 8004966:	4413      	add	r3, r2
 8004968:	3360      	adds	r3, #96	; 0x60
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f008 fe0c 	bl	800d58c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004974:	e008      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3360      	adds	r3, #96	; 0x60
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	6093      	str	r3, [r2, #8]
}
 800499a:	e172      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b2:	d11b      	bne.n	80049ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	3361      	adds	r3, #97	; 0x61
 80049c2:	2208      	movs	r2, #8
 80049c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f006 fb36 	bl	800b042 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	461a      	mov	r2, r3
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e8:	6093      	str	r3, [r2, #8]
}
 80049ea:	e14a      	b.n	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	f040 813f 	bne.w	8004c82 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3361      	adds	r3, #97	; 0x61
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d17d      	bne.n	8004b14 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3360      	adds	r3, #96	; 0x60
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	333f      	adds	r3, #63	; 0x3f
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d00a      	beq.n	8004a54 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	333f      	adds	r3, #63	; 0x3f
 8004a4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	f040 8100 	bne.w	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d113      	bne.n	8004a84 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3355      	adds	r3, #85	; 0x55
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f083 0301 	eor.w	r3, r3, #1
 8004a70:	b2d8      	uxtb	r0, r3
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3355      	adds	r3, #85	; 0x55
 8004a80:	4602      	mov	r2, r0
 8004a82:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 80e3 	bne.w	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	334c      	adds	r3, #76	; 0x4c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80d8 	beq.w	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	334c      	adds	r3, #76	; 0x4c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	202c      	movs	r0, #44	; 0x2c
 8004aba:	fb00 f202 	mul.w	r2, r0, r2
 8004abe:	440a      	add	r2, r1
 8004ac0:	3240      	adds	r2, #64	; 0x40
 8004ac2:	8812      	ldrh	r2, [r2, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	202c      	movs	r0, #44	; 0x2c
 8004ace:	fb00 f202 	mul.w	r2, r0, r2
 8004ad2:	440a      	add	r2, r1
 8004ad4:	3240      	adds	r2, #64	; 0x40
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80b5 	beq.w	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	212c      	movs	r1, #44	; 0x2c
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	3355      	adds	r3, #85	; 0x55
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	f083 0301 	eor.w	r3, r3, #1
 8004afe:	b2d8      	uxtb	r0, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3355      	adds	r3, #85	; 0x55
 8004b0e:	4602      	mov	r2, r0
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e09f      	b.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	212c      	movs	r1, #44	; 0x2c
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	3361      	adds	r3, #97	; 0x61
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d109      	bne.n	8004b3c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	212c      	movs	r1, #44	; 0x2c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	3360      	adds	r3, #96	; 0x60
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e08b      	b.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	3361      	adds	r3, #97	; 0x61
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d109      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3360      	adds	r3, #96	; 0x60
 8004b5e:	2202      	movs	r2, #2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e077      	b.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3361      	adds	r3, #97	; 0x61
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d109      	bne.n	8004b8c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3360      	adds	r3, #96	; 0x60
 8004b86:	2205      	movs	r2, #5
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e063      	b.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3361      	adds	r3, #97	; 0x61
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d009      	beq.n	8004bb4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3361      	adds	r3, #97	; 0x61
 8004bae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d14f      	bne.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	335c      	adds	r3, #92	; 0x5c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	202c      	movs	r0, #44	; 0x2c
 8004bcc:	fb00 f303 	mul.w	r3, r0, r3
 8004bd0:	440b      	add	r3, r1
 8004bd2:	335c      	adds	r3, #92	; 0x5c
 8004bd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	212c      	movs	r1, #44	; 0x2c
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	335c      	adds	r3, #92	; 0x5c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d912      	bls.n	8004c10 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	335c      	adds	r3, #92	; 0x5c
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3360      	adds	r3, #96	; 0x60
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e021      	b.n	8004c54 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3360      	adds	r3, #96	; 0x60
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c38:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	461a      	mov	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	2302      	movs	r3, #2
 8004c64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	b2d9      	uxtb	r1, r3
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	202c      	movs	r0, #44	; 0x2c
 8004c70:	fb00 f303 	mul.w	r3, r0, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3360      	adds	r3, #96	; 0x60
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f008 fc85 	bl	800d58c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004c82:	bf00      	nop
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08a      	sub	sp, #40	; 0x28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	0c5b      	lsrs	r3, r3, #17
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d004      	beq.n	8004cd0 <HCD_RXQLVL_IRQHandler+0x46>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	f000 80a9 	beq.w	8004e20 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004cce:	e0aa      	b.n	8004e26 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a6 	beq.w	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3344      	adds	r3, #68	; 0x44
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 809b 	beq.w	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3350      	adds	r3, #80	; 0x50
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	441a      	add	r2, r3
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	202c      	movs	r0, #44	; 0x2c
 8004d08:	fb00 f303 	mul.w	r3, r0, r3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	334c      	adds	r3, #76	; 0x4c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d87a      	bhi.n	8004e0c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3344      	adds	r3, #68	; 0x44
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f005 fcde 	bl	800a6f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	212c      	movs	r1, #44	; 0x2c
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3344      	adds	r3, #68	; 0x44
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	441a      	add	r2, r3
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	202c      	movs	r0, #44	; 0x2c
 8004d4e:	fb00 f303 	mul.w	r3, r0, r3
 8004d52:	440b      	add	r3, r1
 8004d54:	3344      	adds	r3, #68	; 0x44
 8004d56:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	3350      	adds	r3, #80	; 0x50
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	202c      	movs	r0, #44	; 0x2c
 8004d72:	fb00 f303 	mul.w	r3, r0, r3
 8004d76:	440b      	add	r3, r1
 8004d78:	3350      	adds	r3, #80	; 0x50
 8004d7a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	0cdb      	lsrs	r3, r3, #19
 8004d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d90:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3340      	adds	r3, #64	; 0x40
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d13c      	bne.n	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d039      	beq.n	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dc6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3354      	adds	r3, #84	; 0x54
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f083 0301 	eor.w	r3, r3, #1
 8004df6:	b2d8      	uxtb	r0, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3354      	adds	r3, #84	; 0x54
 8004e06:	4602      	mov	r2, r0
 8004e08:	701a      	strb	r2, [r3, #0]
      break;
 8004e0a:	e00b      	b.n	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3360      	adds	r3, #96	; 0x60
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e001      	b.n	8004e24 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004e24:	bf00      	nop
  }
}
 8004e26:	bf00      	nop
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e5a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d10b      	bne.n	8004e7e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f008 fb6f 	bl	800d554 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d132      	bne.n	8004eee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f043 0308 	orr.w	r3, r3, #8
 8004e8e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d126      	bne.n	8004ee8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d113      	bne.n	8004eca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eac:	d106      	bne.n	8004ebc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f005 fd89 	bl	800a9cc <USB_InitFSLSPClkSel>
 8004eba:	e011      	b.n	8004ee0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f005 fd82 	bl	800a9cc <USB_InitFSLSPClkSel>
 8004ec8:	e00a      	b.n	8004ee0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d106      	bne.n	8004ee0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004ede:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f008 fb61 	bl	800d5a8 <HAL_HCD_PortEnabled_Callback>
 8004ee6:	e002      	b.n	8004eee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f008 fb6b 	bl	800d5c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d103      	bne.n	8004f00 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f06:	461a      	mov	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6013      	str	r3, [r2, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e12b      	b.n	800517e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd fc1c 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f78:	f003 fc7e 	bl	8008878 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a81      	ldr	r2, [pc, #516]	; (8005188 <HAL_I2C_Init+0x274>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d807      	bhi.n	8004f98 <HAL_I2C_Init+0x84>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a80      	ldr	r2, [pc, #512]	; (800518c <HAL_I2C_Init+0x278>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bf94      	ite	ls
 8004f90:	2301      	movls	r3, #1
 8004f92:	2300      	movhi	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e006      	b.n	8004fa6 <HAL_I2C_Init+0x92>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a7d      	ldr	r2, [pc, #500]	; (8005190 <HAL_I2C_Init+0x27c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bf94      	ite	ls
 8004fa0:	2301      	movls	r3, #1
 8004fa2:	2300      	movhi	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0e7      	b.n	800517e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a78      	ldr	r2, [pc, #480]	; (8005194 <HAL_I2C_Init+0x280>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0c9b      	lsrs	r3, r3, #18
 8004fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a6a      	ldr	r2, [pc, #424]	; (8005188 <HAL_I2C_Init+0x274>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d802      	bhi.n	8004fe8 <HAL_I2C_Init+0xd4>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	e009      	b.n	8004ffc <HAL_I2C_Init+0xe8>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	4a69      	ldr	r2, [pc, #420]	; (8005198 <HAL_I2C_Init+0x284>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800500e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	495c      	ldr	r1, [pc, #368]	; (8005188 <HAL_I2C_Init+0x274>)
 8005018:	428b      	cmp	r3, r1
 800501a:	d819      	bhi.n	8005050 <HAL_I2C_Init+0x13c>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e59      	subs	r1, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fbb1 f3f3 	udiv	r3, r1, r3
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005030:	400b      	ands	r3, r1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_I2C_Init+0x138>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e59      	subs	r1, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fbb1 f3f3 	udiv	r3, r1, r3
 8005044:	3301      	adds	r3, #1
 8005046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504a:	e051      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 800504c:	2304      	movs	r3, #4
 800504e:	e04f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d111      	bne.n	800507c <HAL_I2C_Init+0x168>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1e58      	subs	r0, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e012      	b.n	80050a2 <HAL_I2C_Init+0x18e>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1e58      	subs	r0, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	0099      	lsls	r1, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005092:	3301      	adds	r3, #1
 8005094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x196>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e022      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10e      	bne.n	80050d0 <HAL_I2C_Init+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e58      	subs	r0, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	440b      	add	r3, r1
 80050c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	e00f      	b.n	80050f0 <HAL_I2C_Init+0x1dc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e58      	subs	r0, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	0099      	lsls	r1, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6809      	ldr	r1, [r1, #0]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800511e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6911      	ldr	r1, [r2, #16]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	4311      	orrs	r1, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	430b      	orrs	r3, r1
 8005132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	000186a0 	.word	0x000186a0
 800518c:	001e847f 	.word	0x001e847f
 8005190:	003d08ff 	.word	0x003d08ff
 8005194:	431bde83 	.word	0x431bde83
 8005198:	10624dd3 	.word	0x10624dd3

0800519c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e021      	b.n	80051f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2224      	movs	r2, #36	; 0x24
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fd fb26 	bl	8002818 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	4608      	mov	r0, r1
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	4603      	mov	r3, r0
 800520c:	817b      	strh	r3, [r7, #10]
 800520e:	460b      	mov	r3, r1
 8005210:	813b      	strh	r3, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005216:	f7fd fddd 	bl	8002dd4 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b20      	cmp	r3, #32
 8005226:	f040 80d9 	bne.w	80053dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2319      	movs	r3, #25
 8005230:	2201      	movs	r2, #1
 8005232:	496d      	ldr	r1, [pc, #436]	; (80053e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f001 ffe5 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
 8005242:	e0cc      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_I2C_Mem_Write+0x56>
 800524e:	2302      	movs	r3, #2
 8005250:	e0c5      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d007      	beq.n	8005278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2221      	movs	r2, #33	; 0x21
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2240      	movs	r2, #64	; 0x40
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a4d      	ldr	r2, [pc, #308]	; (80053ec <HAL_I2C_Mem_Write+0x1f0>)
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ba:	88f8      	ldrh	r0, [r7, #6]
 80052bc:	893a      	ldrh	r2, [r7, #8]
 80052be:	8979      	ldrh	r1, [r7, #10]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4603      	mov	r3, r0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f001 fd74 	bl	8006db8 <I2C_RequestMemoryWrite>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d052      	beq.n	800537c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e081      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f002 f866 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d107      	bne.n	8005302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e06b      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d11b      	bne.n	800537c <HAL_I2C_Mem_Write+0x180>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1aa      	bne.n	80052da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f002 f852 	bl	8007432 <I2C_WaitOnBTFFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00d      	beq.n	80053b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	2b04      	cmp	r3, #4
 800539a:	d107      	bne.n	80053ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e016      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	00100002 	.word	0x00100002
 80053ec:	ffff0000 	.word	0xffff0000

080053f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08c      	sub	sp, #48	; 0x30
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800540a:	f7fd fce3 	bl	8002dd4 <HAL_GetTick>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	f040 8208 	bne.w	800582e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2319      	movs	r3, #25
 8005424:	2201      	movs	r2, #1
 8005426:	497b      	ldr	r1, [pc, #492]	; (8005614 <HAL_I2C_Mem_Read+0x224>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f001 feeb 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	e1fb      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2C_Mem_Read+0x56>
 8005442:	2302      	movs	r3, #2
 8005444:	e1f4      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d007      	beq.n	800546c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2222      	movs	r2, #34	; 0x22
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a5b      	ldr	r2, [pc, #364]	; (8005618 <HAL_I2C_Mem_Read+0x228>)
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054ae:	88f8      	ldrh	r0, [r7, #6]
 80054b0:	893a      	ldrh	r2, [r7, #8]
 80054b2:	8979      	ldrh	r1, [r7, #10]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	4603      	mov	r3, r0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 fd10 	bl	8006ee4 <I2C_RequestMemoryRead>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e1b0      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d113      	bne.n	80054fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e184      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	2b01      	cmp	r3, #1
 8005504:	d11b      	bne.n	800553e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e164      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b02      	cmp	r3, #2
 8005544:	d11b      	bne.n	800557e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	e144      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005594:	e138      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559a:	2b03      	cmp	r3, #3
 800559c:	f200 80f1 	bhi.w	8005782 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d123      	bne.n	80055f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f001 ffb3 	bl	8007518 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e139      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055ee:	e10b      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d14e      	bne.n	8005696 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	2200      	movs	r2, #0
 8005600:	4906      	ldr	r1, [pc, #24]	; (800561c <HAL_I2C_Mem_Read+0x22c>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 fdfe 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e10e      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
 8005612:	bf00      	nop
 8005614:	00100002 	.word	0x00100002
 8005618:	ffff0000 	.word	0xffff0000
 800561c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005694:	e0b8      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2200      	movs	r2, #0
 800569e:	4966      	ldr	r1, [pc, #408]	; (8005838 <HAL_I2C_Mem_Read+0x448>)
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f001 fdaf 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0bf      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	2200      	movs	r2, #0
 80056fa:	494f      	ldr	r1, [pc, #316]	; (8005838 <HAL_I2C_Mem_Read+0x448>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f001 fd81 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e091      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005780:	e042      	b.n	8005808 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 fec6 	bl	8007518 <I2C_WaitOnRXNEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e04c      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d118      	bne.n	8005808 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f aec2 	bne.w	8005596 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e000      	b.n	8005830 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3728      	adds	r7, #40	; 0x28
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	00010004 	.word	0x00010004

0800583c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b10      	cmp	r3, #16
 800586a:	d003      	beq.n	8005874 <HAL_I2C_EV_IRQHandler+0x38>
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	f040 80b1 	bne.w	80059d6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <HAL_I2C_EV_IRQHandler+0x6e>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005894:	d003      	beq.n	800589e <HAL_I2C_EV_IRQHandler+0x62>
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800589c:	d101      	bne.n	80058a2 <HAL_I2C_EV_IRQHandler+0x66>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_I2C_EV_IRQHandler+0x68>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f000 8114 	beq.w	8005ad2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_I2C_EV_IRQHandler+0x90>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 feaf 	bl	8007622 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fccd 	bl	8006264 <I2C_Master_SB>
 80058ca:	e083      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_I2C_EV_IRQHandler+0xac>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fd45 	bl	8006370 <I2C_Master_ADD10>
 80058e6:	e075      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_I2C_EV_IRQHandler+0xc8>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fd61 	bl	80063c4 <I2C_Master_ADDR>
 8005902:	e067      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591c:	f000 80db 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x10a>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x10a>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f945 	bl	8005bce <I2C_MasterTransmit_TXE>
 8005944:	e046      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80c2 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80bc 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b21      	cmp	r3, #33	; 0x21
 8005962:	d103      	bne.n	800596c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9ce 	bl	8005d06 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800596a:	e0b4      	b.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	f040 80b1 	bne.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fa3c 	bl	8005df2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800597a:	e0ac      	b.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598a:	f000 80a4 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <HAL_I2C_EV_IRQHandler+0x178>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_I2C_EV_IRQHandler+0x178>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fab4 	bl	8005f1a <I2C_MasterReceive_RXNE>
 80059b2:	e00f      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 808b 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8085 	beq.w	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb5f 	bl	8006090 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059d2:	e080      	b.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
 80059d4:	e07f      	b.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	e007      	b.n	80059f8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d011      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 ff1f 	bl	8006862 <I2C_Slave_ADDR>
 8005a24:	e05a      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x206>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 ff5a 	bl	80068f4 <I2C_Slave_STOPF>
 8005a40:	e04c      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b21      	cmp	r3, #33	; 0x21
 8005a46:	d002      	beq.n	8005a4e <HAL_I2C_EV_IRQHandler+0x212>
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b29      	cmp	r3, #41	; 0x29
 8005a4c:	d120      	bne.n	8005a90 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00d      	beq.n	8005a74 <HAL_I2C_EV_IRQHandler+0x238>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_I2C_EV_IRQHandler+0x238>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fe3a 	bl	80066e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a72:	e032      	b.n	8005ada <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d02d      	beq.n	8005ada <HAL_I2C_EV_IRQHandler+0x29e>
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d028      	beq.n	8005ada <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fe69 	bl	8006760 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a8e:	e024      	b.n	8005ada <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x27a>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x27a>
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fe77 	bl	80067a2 <I2C_SlaveReceive_RXNE>
 8005ab4:	e012      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fea7 	bl	800681e <I2C_SlaveReceive_BTF>
 8005ad0:	e004      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ada:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d150      	bne.n	8005c96 <I2C_MasterTransmit_TXE+0xc8>
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b21      	cmp	r3, #33	; 0x21
 8005bf8:	d14d      	bne.n	8005c96 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d01d      	beq.n	8005c3c <I2C_MasterTransmit_TXE+0x6e>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d01a      	beq.n	8005c3c <I2C_MasterTransmit_TXE+0x6e>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c0c:	d016      	beq.n	8005c3c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c1c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2211      	movs	r2, #17
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ff54 	bl	8005ae2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c3a:	e060      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c4a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d107      	bne.n	8005c86 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ff6f 	bl	8005b62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c84:	e03b      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ff27 	bl	8005ae2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c94:	e033      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b21      	cmp	r3, #33	; 0x21
 8005c9a:	d005      	beq.n	8005ca8 <I2C_MasterTransmit_TXE+0xda>
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d12d      	bne.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b22      	cmp	r3, #34	; 0x22
 8005ca6:	d12a      	bne.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005cc2:	e01c      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d103      	bne.n	8005cd8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f88e 	bl	8005df2 <I2C_MemoryTransmit_TXE_BTF>
}
 8005cd6:	e012      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cfc:	e7ff      	b.n	8005cfe <I2C_MasterTransmit_TXE+0x130>
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b21      	cmp	r3, #33	; 0x21
 8005d1e:	d164      	bne.n	8005dea <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d012      	beq.n	8005d50 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d4e:	e04c      	b.n	8005dea <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d01d      	beq.n	8005d92 <I2C_MasterTransmit_BTF+0x8c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d01a      	beq.n	8005d92 <I2C_MasterTransmit_BTF+0x8c>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d62:	d016      	beq.n	8005d92 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d72:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2211      	movs	r2, #17
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fea9 	bl	8005ae2 <HAL_I2C_MasterTxCpltCallback>
}
 8005d90:	e02b      	b.n	8005dea <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005da0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d107      	bne.n	8005ddc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fec4 	bl	8005b62 <HAL_I2C_MemTxCpltCallback>
}
 8005dda:	e006      	b.n	8005dea <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fe7c 	bl	8005ae2 <HAL_I2C_MasterTxCpltCallback>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11d      	bne.n	8005e46 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10b      	bne.n	8005e2a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e28:	e073      	b.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	121b      	asrs	r3, r3, #8
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e44:	e065      	b.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10b      	bne.n	8005e66 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e64:	e055      	b.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d151      	bne.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b22      	cmp	r3, #34	; 0x22
 8005e72:	d10d      	bne.n	8005e90 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e82:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e8e:	e040      	b.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d015      	beq.n	8005ec6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b21      	cmp	r3, #33	; 0x21
 8005e9e:	d112      	bne.n	8005ec6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ec4:	e025      	b.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d120      	bne.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b21      	cmp	r3, #33	; 0x21
 8005ed4:	d11d      	bne.n	8005f12 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ee4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fe28 	bl	8005b62 <HAL_I2C_MemTxCpltCallback>
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b22      	cmp	r3, #34	; 0x22
 8005f2c:	f040 80ac 	bne.w	8006088 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d921      	bls.n	8005f82 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	f040 808c 	bne.w	8006088 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f80:	e082      	b.n	8006088 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d075      	beq.n	8006076 <I2C_MasterReceive_RXNE+0x15c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d002      	beq.n	8005f96 <I2C_MasterReceive_RXNE+0x7c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d16f      	bne.n	8006076 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 fa8c 	bl	80074b4 <I2C_WaitOnSTOPRequestThroughIT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d142      	bne.n	8006028 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fc0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d10a      	bne.n	8006012 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fdb3 	bl	8005b76 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006010:	e03a      	b.n	8006088 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2212      	movs	r2, #18
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fd68 	bl	8005af6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006026:	e02f      	b.n	8006088 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006036:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fd8b 	bl	8005b8a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006074:	e008      	b.n	8006088 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	605a      	str	r2, [r3, #4]
}
 8006086:	e7ff      	b.n	8006088 <I2C_MasterReceive_RXNE+0x16e>
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d11b      	bne.n	80060e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80060de:	e0bd      	b.n	800625c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d129      	bne.n	800613e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d00a      	beq.n	8006116 <I2C_MasterReceive_BTF+0x86>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d007      	beq.n	8006116 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006114:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800613c:	e08e      	b.n	800625c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d176      	bne.n	8006236 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d002      	beq.n	8006154 <I2C_MasterReceive_BTF+0xc4>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b10      	cmp	r3, #16
 8006152:	d108      	bne.n	8006166 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e019      	b.n	800619a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b04      	cmp	r3, #4
 800616a:	d002      	beq.n	8006172 <I2C_MasterReceive_BTF+0xe2>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d108      	bne.n	8006184 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e00a      	b.n	800619a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b10      	cmp	r3, #16
 8006188:	d007      	beq.n	800619a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006198:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d10a      	bne.n	8006220 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fcac 	bl	8005b76 <HAL_I2C_MemRxCpltCallback>
}
 800621e:	e01d      	b.n	800625c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2212      	movs	r2, #18
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fc61 	bl	8005af6 <HAL_I2C_MasterRxCpltCallback>
}
 8006234:	e012      	b.n	800625c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d117      	bne.n	80062a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006290:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006292:	e067      	b.n	8006364 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	611a      	str	r2, [r3, #16]
}
 80062a6:	e05d      	b.n	8006364 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b0:	d133      	bne.n	800631a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b21      	cmp	r3, #33	; 0x21
 80062bc:	d109      	bne.n	80062d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ce:	611a      	str	r2, [r3, #16]
 80062d0:	e008      	b.n	80062e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <I2C_Master_SB+0x92>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d108      	bne.n	8006308 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d032      	beq.n	8006364 <I2C_Master_SB+0x100>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02d      	beq.n	8006364 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006316:	605a      	str	r2, [r3, #4]
}
 8006318:	e024      	b.n	8006364 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10e      	bne.n	8006340 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	b29b      	uxth	r3, r3
 8006328:	11db      	asrs	r3, r3, #7
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 0306 	and.w	r3, r3, #6
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f063 030f 	orn	r3, r3, #15
 8006336:	b2da      	uxtb	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	611a      	str	r2, [r3, #16]
}
 800633e:	e011      	b.n	8006364 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10d      	bne.n	8006364 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	b29b      	uxth	r3, r3
 800634e:	11db      	asrs	r3, r3, #7
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0306 	and.w	r3, r3, #6
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f063 030e 	orn	r3, r3, #14
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	611a      	str	r2, [r3, #16]
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <I2C_Master_ADD10+0x26>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <I2C_Master_ADD10+0x48>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b091      	sub	sp, #68	; 0x44
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b22      	cmp	r3, #34	; 0x22
 80063ec:	f040 8169 	bne.w	80066c2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10f      	bne.n	8006418 <I2C_Master_ADDR+0x54>
 80063f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	d10b      	bne.n	8006418 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006400:	2300      	movs	r3, #0
 8006402:	633b      	str	r3, [r7, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	633b      	str	r3, [r7, #48]	; 0x30
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	e160      	b.n	80066da <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11d      	bne.n	800645c <I2C_Master_ADDR+0x98>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006428:	d118      	bne.n	800645c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	651a      	str	r2, [r3, #80]	; 0x50
 800645a:	e13e      	b.n	80066da <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d113      	bne.n	800648e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006466:	2300      	movs	r3, #0
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e115      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	f040 808a 	bne.w	80065ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064a0:	d137      	bne.n	8006512 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d113      	bne.n	80064ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d2:	2300      	movs	r3, #0
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	e0e7      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e0d3      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	2b08      	cmp	r3, #8
 8006516:	d02e      	beq.n	8006576 <I2C_Master_ADDR+0x1b2>
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	2b20      	cmp	r3, #32
 800651c:	d02b      	beq.n	8006576 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	2b12      	cmp	r3, #18
 8006522:	d102      	bne.n	800652a <I2C_Master_ADDR+0x166>
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	2b01      	cmp	r3, #1
 8006528:	d125      	bne.n	8006576 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	2b04      	cmp	r3, #4
 800652e:	d00e      	beq.n	800654e <I2C_Master_ADDR+0x18a>
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	2b02      	cmp	r3, #2
 8006534:	d00b      	beq.n	800654e <I2C_Master_ADDR+0x18a>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b10      	cmp	r3, #16
 800653a:	d008      	beq.n	800654e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e007      	b.n	800655e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800655c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	e0a1      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006584:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	e085      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d14d      	bne.n	8006654 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d016      	beq.n	80065ec <I2C_Master_ADDR+0x228>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d013      	beq.n	80065ec <I2C_Master_ADDR+0x228>
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	d010      	beq.n	80065ec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e007      	b.n	80065fc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065fa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d117      	bne.n	800663c <I2C_Master_ADDR+0x278>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006612:	d00b      	beq.n	800662c <I2C_Master_ADDR+0x268>
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	2b01      	cmp	r3, #1
 8006618:	d008      	beq.n	800662c <I2C_Master_ADDR+0x268>
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b08      	cmp	r3, #8
 800661e:	d005      	beq.n	800662c <I2C_Master_ADDR+0x268>
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	2b10      	cmp	r3, #16
 8006624:	d002      	beq.n	800662c <I2C_Master_ADDR+0x268>
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	2b20      	cmp	r3, #32
 800662a:	d107      	bne.n	800663c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800663a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	e032      	b.n	80066ba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006662:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006672:	d117      	bne.n	80066a4 <I2C_Master_ADDR+0x2e0>
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800667a:	d00b      	beq.n	8006694 <I2C_Master_ADDR+0x2d0>
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	2b01      	cmp	r3, #1
 8006680:	d008      	beq.n	8006694 <I2C_Master_ADDR+0x2d0>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	2b08      	cmp	r3, #8
 8006686:	d005      	beq.n	8006694 <I2C_Master_ADDR+0x2d0>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	2b10      	cmp	r3, #16
 800668c:	d002      	beq.n	8006694 <I2C_Master_ADDR+0x2d0>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b20      	cmp	r3, #32
 8006692:	d107      	bne.n	80066a4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80066c0:	e00b      	b.n	80066da <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	e7ff      	b.n	80066da <I2C_Master_ADDR+0x316>
 80066da:	bf00      	nop
 80066dc:	3744      	adds	r7, #68	; 0x44
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02b      	beq.n	8006758 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d114      	bne.n	8006758 <I2C_SlaveTransmit_TXE+0x72>
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b29      	cmp	r3, #41	; 0x29
 8006732:	d111      	bne.n	8006758 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2221      	movs	r2, #33	; 0x21
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2228      	movs	r2, #40	; 0x28
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f9d9 	bl	8005b0a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02c      	beq.n	8006816 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d114      	bne.n	8006816 <I2C_SlaveReceive_RXNE+0x74>
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b2a      	cmp	r3, #42	; 0x2a
 80067f0:	d111      	bne.n	8006816 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006800:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2222      	movs	r2, #34	; 0x22
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2228      	movs	r2, #40	; 0x28
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff f984 	bl	8005b1e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800687c:	2b28      	cmp	r3, #40	; 0x28
 800687e:	d125      	bne.n	80068cc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800689a:	2301      	movs	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	81bb      	strh	r3, [r7, #12]
 80068ae:	e002      	b.n	80068b6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80068be:	89ba      	ldrh	r2, [r7, #12]
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff f934 	bl	8005b32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068ca:	e00e      	b.n	80068ea <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068cc:	2300      	movs	r3, #0
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006912:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006914:	2300      	movs	r3, #0
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800694c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006950:	d172      	bne.n	8006a38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	2b22      	cmp	r3, #34	; 0x22
 8006956:	d002      	beq.n	800695e <I2C_Slave_STOPF+0x6a>
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b2a      	cmp	r3, #42	; 0x2a
 800695c:	d135      	bne.n	80069ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0204 	orr.w	r2, r3, #4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006990:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc fc21 	bl	80031de <HAL_DMA_GetState>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d049      	beq.n	8006a36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	4a69      	ldr	r2, [pc, #420]	; (8006b4c <I2C_Slave_STOPF+0x258>)
 80069a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fc fbf3 	bl	800319a <HAL_DMA_Abort_IT>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d03d      	beq.n	8006a36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069c8:	e035      	b.n	8006a36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fc fbeb 	bl	80031de <HAL_DMA_GetState>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d014      	beq.n	8006a38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	4a4e      	ldr	r2, [pc, #312]	; (8006b4c <I2C_Slave_STOPF+0x258>)
 8006a14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fc fbbd 	bl	800319a <HAL_DMA_Abort_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	e000      	b.n	8006a38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d03e      	beq.n	8006ac0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d112      	bne.n	8006a76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d112      	bne.n	8006aaa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f843 	bl	8006b54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ace:	e039      	b.n	8006b44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d109      	bne.n	8006aea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2228      	movs	r2, #40	; 0x28
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff f81a 	bl	8005b1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b28      	cmp	r3, #40	; 0x28
 8006af4:	d111      	bne.n	8006b1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <I2C_Slave_STOPF+0x25c>)
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff f81b 	bl	8005b4e <HAL_I2C_ListenCpltCallback>
}
 8006b18:	e014      	b.n	8006b44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	2b22      	cmp	r3, #34	; 0x22
 8006b20:	d002      	beq.n	8006b28 <I2C_Slave_STOPF+0x234>
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b22      	cmp	r3, #34	; 0x22
 8006b26:	d10d      	bne.n	8006b44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fe ffed 	bl	8005b1e <HAL_I2C_SlaveRxCpltCallback>
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	080070b5 	.word	0x080070b5
 8006b50:	ffff0000 	.word	0xffff0000

08006b54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b10      	cmp	r3, #16
 8006b70:	d002      	beq.n	8006b78 <I2C_ITError+0x24>
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d10a      	bne.n	8006b8e <I2C_ITError+0x3a>
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b22      	cmp	r3, #34	; 0x22
 8006b7c:	d107      	bne.n	8006b8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b94:	2b28      	cmp	r3, #40	; 0x28
 8006b96:	d107      	bne.n	8006ba8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2228      	movs	r2, #40	; 0x28
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ba6:	e015      	b.n	8006bd4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb6:	d00a      	beq.n	8006bce <I2C_ITError+0x7a>
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	2b60      	cmp	r3, #96	; 0x60
 8006bbc:	d007      	beq.n	8006bce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be2:	d162      	bne.n	8006caa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d020      	beq.n	8006c44 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c06:	4a6a      	ldr	r2, [pc, #424]	; (8006db0 <I2C_ITError+0x25c>)
 8006c08:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fc fac3 	bl	800319a <HAL_DMA_Abort_IT>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8089 	beq.w	8006d2e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4798      	blx	r3
 8006c42:	e074      	b.n	8006d2e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	4a59      	ldr	r2, [pc, #356]	; (8006db0 <I2C_ITError+0x25c>)
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fc faa2 	bl	800319a <HAL_DMA_Abort_IT>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d068      	beq.n	8006d2e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d10b      	bne.n	8006c82 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	e041      	b.n	8006d2e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b60      	cmp	r3, #96	; 0x60
 8006cb4:	d125      	bne.n	8006d02 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d10b      	bne.n	8006cea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe ff4f 	bl	8005b9e <HAL_I2C_AbortCpltCallback>
 8006d00:	e015      	b.n	8006d2e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d10b      	bne.n	8006d28 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fe ff2e 	bl	8005b8a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10e      	bne.n	8006d5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d113      	bne.n	8006da8 <I2C_ITError+0x254>
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b28      	cmp	r3, #40	; 0x28
 8006d84:	d110      	bne.n	8006da8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <I2C_ITError+0x260>)
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fe fed3 	bl	8005b4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	080070b5 	.word	0x080070b5
 8006db4:	ffff0000 	.word	0xffff0000

08006db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	817b      	strh	r3, [r7, #10]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	813b      	strh	r3, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fa08 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e08:	d103      	bne.n	8006e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e05f      	b.n	8006ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e16:	897b      	ldrh	r3, [r7, #10]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	492d      	ldr	r1, [pc, #180]	; (8006ee0 <I2C_RequestMemoryWrite+0x128>)
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fa40 	bl	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e04c      	b.n	8006ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e54:	6a39      	ldr	r1, [r7, #32]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 faaa 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d107      	bne.n	8006e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e02b      	b.n	8006ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d105      	bne.n	8006e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e84:	893b      	ldrh	r3, [r7, #8]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	611a      	str	r2, [r3, #16]
 8006e8e:	e021      	b.n	8006ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e90:	893b      	ldrh	r3, [r7, #8]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	6a39      	ldr	r1, [r7, #32]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa84 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d107      	bne.n	8006ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e005      	b.n	8006ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	00010002 	.word	0x00010002

08006ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	4608      	mov	r0, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	817b      	strh	r3, [r7, #10]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	813b      	strh	r3, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f96a 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f44:	d103      	bne.n	8006f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e0aa      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	6a3a      	ldr	r2, [r7, #32]
 8006f66:	4952      	ldr	r1, [pc, #328]	; (80070b0 <I2C_RequestMemoryRead+0x1cc>)
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f9a2 	bl	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e097      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	6a39      	ldr	r1, [r7, #32]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fa0c 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d107      	bne.n	8006fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e076      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d105      	bne.n	8006fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fc0:	893b      	ldrh	r3, [r7, #8]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	611a      	str	r2, [r3, #16]
 8006fca:	e021      	b.n	8007010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fcc:	893b      	ldrh	r3, [r7, #8]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fdc:	6a39      	ldr	r1, [r7, #32]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f9e6 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00d      	beq.n	8007006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d107      	bne.n	8007002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e050      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007006:	893b      	ldrh	r3, [r7, #8]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	6a39      	ldr	r1, [r7, #32]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f9cb 	bl	80073b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b04      	cmp	r3, #4
 8007026:	d107      	bne.n	8007038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e035      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800704a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	2200      	movs	r2, #0
 8007054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f8d3 	bl	8007204 <I2C_WaitOnFlagUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007072:	d103      	bne.n	800707c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e013      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007080:	897b      	ldrh	r3, [r7, #10]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	6a3a      	ldr	r2, [r7, #32]
 8007094:	4906      	ldr	r1, [pc, #24]	; (80070b0 <I2C_RequestMemoryRead+0x1cc>)
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f90b 	bl	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	00010002 	.word	0x00010002

080070b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80070ce:	4b4b      	ldr	r3, [pc, #300]	; (80071fc <I2C_DMAAbort+0x148>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	08db      	lsrs	r3, r3, #3
 80070d4:	4a4a      	ldr	r2, [pc, #296]	; (8007200 <I2C_DMAAbort+0x14c>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	0a1a      	lsrs	r2, r3, #8
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	00da      	lsls	r2, r3, #3
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f043 0220 	orr.w	r2, r3, #32
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80070fa:	e00a      	b.n	8007112 <I2C_DMAAbort+0x5e>
    }
    count--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007110:	d0ea      	beq.n	80070e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	2200      	movs	r2, #0
 8007120:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	2200      	movs	r2, #0
 8007130:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007140:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	2200      	movs	r2, #0
 8007156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	2200      	movs	r2, #0
 8007166:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d10e      	bne.n	80071a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2200      	movs	r2, #0
 8007198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800719a:	6978      	ldr	r0, [r7, #20]
 800719c:	f7fe fcff 	bl	8005b9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071a0:	e027      	b.n	80071f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071a2:	7cfb      	ldrb	r3, [r7, #19]
 80071a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071a8:	2b28      	cmp	r3, #40	; 0x28
 80071aa:	d117      	bne.n	80071dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2228      	movs	r2, #40	; 0x28
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071da:	e007      	b.n	80071ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80071ec:	6978      	ldr	r0, [r7, #20]
 80071ee:	f7fe fccc 	bl	8005b8a <HAL_I2C_ErrorCallback>
}
 80071f2:	bf00      	nop
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	200000d8 	.word	0x200000d8
 8007200:	14f8b589 	.word	0x14f8b589

08007204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007214:	e025      	b.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800721c:	d021      	beq.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721e:	f7fb fdd9 	bl	8002dd4 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d116      	bne.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0220 	orr.w	r2, r3, #32
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e023      	b.n	80072aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	0c1b      	lsrs	r3, r3, #16
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10d      	bne.n	8007288 <I2C_WaitOnFlagUntilTimeout+0x84>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	43da      	mvns	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	e00c      	b.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	43da      	mvns	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4013      	ands	r3, r2
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf0c      	ite	eq
 800729a:	2301      	moveq	r3, #1
 800729c:	2300      	movne	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d0b6      	beq.n	8007216 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072c0:	e051      	b.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d0:	d123      	bne.n	800731a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e046      	b.n	80073a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007320:	d021      	beq.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007322:	f7fb fd57 	bl	8002dd4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d302      	bcc.n	8007338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d116      	bne.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f043 0220 	orr.w	r2, r3, #32
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e020      	b.n	80073a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10c      	bne.n	800738a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	43da      	mvns	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4013      	ands	r3, r2
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	bf14      	ite	ne
 8007382:	2301      	movne	r3, #1
 8007384:	2300      	moveq	r3, #0
 8007386:	b2db      	uxtb	r3, r3
 8007388:	e00b      	b.n	80073a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	43da      	mvns	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4013      	ands	r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d18d      	bne.n	80072c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073bc:	e02d      	b.n	800741a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f900 	bl	80075c4 <I2C_IsAcknowledgeFailed>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e02d      	b.n	800742a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d4:	d021      	beq.n	800741a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d6:	f7fb fcfd 	bl	8002dd4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d302      	bcc.n	80073ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d116      	bne.n	800741a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f043 0220 	orr.w	r2, r3, #32
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e007      	b.n	800742a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d1ca      	bne.n	80073be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800743e:	e02d      	b.n	800749c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f8bf 	bl	80075c4 <I2C_IsAcknowledgeFailed>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e02d      	b.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007456:	d021      	beq.n	800749c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007458:	f7fb fcbc 	bl	8002dd4 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d116      	bne.n	800749c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f043 0220 	orr.w	r2, r3, #32
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e007      	b.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d1ca      	bne.n	8007440 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074c0:	4b13      	ldr	r3, [pc, #76]	; (8007510 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	08db      	lsrs	r3, r3, #3
 80074c6:	4a13      	ldr	r2, [pc, #76]	; (8007514 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	0a1a      	lsrs	r2, r3, #8
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b01      	subs	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d107      	bne.n	80074f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e008      	b.n	8007504 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d0e9      	beq.n	80074d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	200000d8 	.word	0x200000d8
 8007514:	14f8b589 	.word	0x14f8b589

08007518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007524:	e042      	b.n	80075ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b10      	cmp	r3, #16
 8007532:	d119      	bne.n	8007568 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0210 	mvn.w	r2, #16
 800753c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e029      	b.n	80075bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007568:	f7fb fc34 	bl	8002dd4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	d302      	bcc.n	800757e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d116      	bne.n	80075ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e007      	b.n	80075bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d1b5      	bne.n	8007526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075da:	d11b      	bne.n	8007614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f043 0204 	orr.w	r2, r3, #4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007632:	d103      	bne.n	800763c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800763a:	e007      	b.n	800764c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007644:	d102      	bne.n	800764c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2208      	movs	r2, #8
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e128      	b.n	80078bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a90      	ldr	r2, [pc, #576]	; (80078c4 <HAL_I2S_Init+0x26c>)
 8007682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fb f8ed 	bl	8002864 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80076a0:	f023 030f 	bic.w	r3, r3, #15
 80076a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2202      	movs	r2, #2
 80076ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d060      	beq.n	8007778 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80076be:	2310      	movs	r3, #16
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	e001      	b.n	80076c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80076c4:	2320      	movs	r3, #32
 80076c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d802      	bhi.n	80076d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80076d6:	2001      	movs	r0, #1
 80076d8:	f001 f9e6 	bl	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 80076dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e6:	d125      	bne.n	8007734 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d010      	beq.n	8007712 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	3305      	adds	r3, #5
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	e01f      	b.n	8007752 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	fbb2 f2f3 	udiv	r2, r2, r3
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	461a      	mov	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	fbb2 f3f3 	udiv	r3, r2, r3
 800772e:	3305      	adds	r3, #5
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	e00e      	b.n	8007752 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	fbb2 f2f3 	udiv	r2, r2, r3
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	3305      	adds	r3, #5
 8007750:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4a5c      	ldr	r2, [pc, #368]	; (80078c8 <HAL_I2S_Init+0x270>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	08db      	lsrs	r3, r3, #3
 800775c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e003      	b.n	8007780 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007778:	2302      	movs	r3, #2
 800777a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d902      	bls.n	800778c <HAL_I2S_Init+0x134>
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	2bff      	cmp	r3, #255	; 0xff
 800778a:	d907      	bls.n	800779c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007790:	f043 0210 	orr.w	r2, r3, #16
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e08f      	b.n	80078bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	ea42 0103 	orr.w	r1, r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6851      	ldr	r1, [r2, #4]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6892      	ldr	r2, [r2, #8]
 80077c6:	4311      	orrs	r1, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	68d2      	ldr	r2, [r2, #12]
 80077cc:	4311      	orrs	r1, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6992      	ldr	r2, [r2, #24]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d161      	bne.n	80078ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a38      	ldr	r2, [pc, #224]	; (80078cc <HAL_I2S_Init+0x274>)
 80077ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a37      	ldr	r2, [pc, #220]	; (80078d0 <HAL_I2S_Init+0x278>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d101      	bne.n	80077fc <HAL_I2S_Init+0x1a4>
 80077f8:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <HAL_I2S_Init+0x27c>)
 80077fa:	e001      	b.n	8007800 <HAL_I2S_Init+0x1a8>
 80077fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	4932      	ldr	r1, [pc, #200]	; (80078d0 <HAL_I2S_Init+0x278>)
 8007808:	428a      	cmp	r2, r1
 800780a:	d101      	bne.n	8007810 <HAL_I2S_Init+0x1b8>
 800780c:	4a31      	ldr	r2, [pc, #196]	; (80078d4 <HAL_I2S_Init+0x27c>)
 800780e:	e001      	b.n	8007814 <HAL_I2S_Init+0x1bc>
 8007810:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007814:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007818:	f023 030f 	bic.w	r3, r3, #15
 800781c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2b      	ldr	r2, [pc, #172]	; (80078d0 <HAL_I2S_Init+0x278>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d101      	bne.n	800782c <HAL_I2S_Init+0x1d4>
 8007828:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <HAL_I2S_Init+0x27c>)
 800782a:	e001      	b.n	8007830 <HAL_I2S_Init+0x1d8>
 800782c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007830:	2202      	movs	r2, #2
 8007832:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a25      	ldr	r2, [pc, #148]	; (80078d0 <HAL_I2S_Init+0x278>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d101      	bne.n	8007842 <HAL_I2S_Init+0x1ea>
 800783e:	4b25      	ldr	r3, [pc, #148]	; (80078d4 <HAL_I2S_Init+0x27c>)
 8007840:	e001      	b.n	8007846 <HAL_I2S_Init+0x1ee>
 8007842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007852:	d003      	beq.n	800785c <HAL_I2S_Init+0x204>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800785c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e001      	b.n	8007868 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007864:	2300      	movs	r3, #0
 8007866:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007872:	4313      	orrs	r3, r2
 8007874:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800787c:	4313      	orrs	r3, r2
 800787e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007886:	4313      	orrs	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	897b      	ldrh	r3, [r7, #10]
 800788c:	4313      	orrs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007894:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a0d      	ldr	r2, [pc, #52]	; (80078d0 <HAL_I2S_Init+0x278>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <HAL_I2S_Init+0x24c>
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <HAL_I2S_Init+0x27c>)
 80078a2:	e001      	b.n	80078a8 <HAL_I2S_Init+0x250>
 80078a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078a8:	897a      	ldrh	r2, [r7, #10]
 80078aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3720      	adds	r7, #32
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	080079cf 	.word	0x080079cf
 80078c8:	cccccccd 	.word	0xcccccccd
 80078cc:	08007ae5 	.word	0x08007ae5
 80078d0:	40003800 	.word	0x40003800
 80078d4:	40003400 	.word	0x40003400

080078d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	1c9a      	adds	r2, r3, #2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10e      	bne.n	8007968 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007958:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ffb8 	bl	80078d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	b292      	uxth	r2, r2
 8007984:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	1c9a      	adds	r2, r3, #2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10e      	bne.n	80079c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff ff93 	bl	80078ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b086      	sub	sp, #24
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d13a      	bne.n	8007a60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d109      	bne.n	8007a08 <I2S_IRQHandler+0x3a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fe:	2b40      	cmp	r3, #64	; 0x40
 8007a00:	d102      	bne.n	8007a08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ffb4 	bl	8007970 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d126      	bne.n	8007a60 <I2S_IRQHandler+0x92>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d11f      	bne.n	8007a60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a30:	2300      	movs	r3, #0
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	f043 0202 	orr.w	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ff50 	bl	8007900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d136      	bne.n	8007ada <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d109      	bne.n	8007a8a <I2S_IRQHandler+0xbc>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a80:	2b80      	cmp	r3, #128	; 0x80
 8007a82:	d102      	bne.n	8007a8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff45 	bl	8007914 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d122      	bne.n	8007ada <I2S_IRQHandler+0x10c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d11b      	bne.n	8007ada <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ab0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007acc:	f043 0204 	orr.w	r2, r3, #4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ff13 	bl	8007900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a92      	ldr	r2, [pc, #584]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007afe:	4b92      	ldr	r3, [pc, #584]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b00:	e001      	b.n	8007b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007b02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a8b      	ldr	r2, [pc, #556]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d101      	bne.n	8007b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007b1c:	4b8a      	ldr	r3, [pc, #552]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b1e:	e001      	b.n	8007b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b30:	d004      	beq.n	8007b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8099 	bne.w	8007c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d107      	bne.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f925 	bl	8007da0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9c8 	bl	8007f00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d13a      	bne.n	8007bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d035      	beq.n	8007bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a6e      	ldr	r2, [pc, #440]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007b8e:	4b6e      	ldr	r3, [pc, #440]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b90:	e001      	b.n	8007b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4969      	ldr	r1, [pc, #420]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007ba2:	4b69      	ldr	r3, [pc, #420]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ba4:	e001      	b.n	8007baa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be2:	f043 0202 	orr.w	r2, r3, #2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fe88 	bl	8007900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	f040 80c3 	bne.w	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80bd 	beq.w	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a49      	ldr	r2, [pc, #292]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007c22:	4b49      	ldr	r3, [pc, #292]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c24:	e001      	b.n	8007c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4944      	ldr	r1, [pc, #272]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c32:	428b      	cmp	r3, r1
 8007c34:	d101      	bne.n	8007c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007c36:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c38:	e001      	b.n	8007c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c44:	2300      	movs	r3, #0
 8007c46:	60bb      	str	r3, [r7, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	60bb      	str	r3, [r7, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5e:	f043 0204 	orr.w	r2, r3, #4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fe4a 	bl	8007900 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c6c:	e089      	b.n	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d107      	bne.n	8007c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8be 	bl	8007e04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d107      	bne.n	8007ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8fd 	bl	8007e9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	d12f      	bne.n	8007d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02a      	beq.n	8007d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cc4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d101      	bne.n	8007cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007cd0:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cd2:	e001      	b.n	8007cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4919      	ldr	r1, [pc, #100]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ce6:	e001      	b.n	8007cec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cf0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	f043 0202 	orr.w	r2, r3, #2
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff fdfa 	bl	8007900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d136      	bne.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d031      	beq.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d101      	bne.n	8007d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d2c:	e001      	b.n	8007d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4902      	ldr	r1, [pc, #8]	; (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d3a:	428b      	cmp	r3, r1
 8007d3c:	d106      	bne.n	8007d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007d3e:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d40:	e006      	b.n	8007d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007d42:	bf00      	nop
 8007d44:	40003800 	.word	0x40003800
 8007d48:	40003400 	.word	0x40003400
 8007d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fdc0 	bl	8007900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d80:	e000      	b.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d82:	bf00      	nop
}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	1c99      	adds	r1, r3, #2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6251      	str	r1, [r2, #36]	; 0x24
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d113      	bne.n	8007dfa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007de0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff ffc9 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	1c99      	adds	r1, r3, #2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6251      	str	r1, [r2, #36]	; 0x24
 8007e16:	8819      	ldrh	r1, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d101      	bne.n	8007e26 <I2SEx_TxISR_I2SExt+0x22>
 8007e22:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e24:	e001      	b.n	8007e2a <I2SEx_TxISR_I2SExt+0x26>
 8007e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d121      	bne.n	8007e8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <I2SEx_TxISR_I2SExt+0x50>
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e52:	e001      	b.n	8007e58 <I2SEx_TxISR_I2SExt+0x54>
 8007e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	490d      	ldr	r1, [pc, #52]	; (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e60:	428b      	cmp	r3, r1
 8007e62:	d101      	bne.n	8007e68 <I2SEx_TxISR_I2SExt+0x64>
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e66:	e001      	b.n	8007e6c <I2SEx_TxISR_I2SExt+0x68>
 8007e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff81 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40003800 	.word	0x40003800
 8007e98:	40003400 	.word	0x40003400

08007e9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68d8      	ldr	r0, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	1c99      	adds	r1, r3, #2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007eb4:	b282      	uxth	r2, r0
 8007eb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d113      	bne.n	8007ef8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ede:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ff4a 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a20      	ldr	r2, [pc, #128]	; (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d101      	bne.n	8007f16 <I2SEx_RxISR_I2SExt+0x16>
 8007f12:	4b20      	ldr	r3, [pc, #128]	; (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f14:	e001      	b.n	8007f1a <I2SEx_RxISR_I2SExt+0x1a>
 8007f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f1a:	68d8      	ldr	r0, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	1c99      	adds	r1, r3, #2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007f26:	b282      	uxth	r2, r0
 8007f28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d121      	bne.n	8007f86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d101      	bne.n	8007f50 <I2SEx_RxISR_I2SExt+0x50>
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f4e:	e001      	b.n	8007f54 <I2SEx_RxISR_I2SExt+0x54>
 8007f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	490d      	ldr	r1, [pc, #52]	; (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	d101      	bne.n	8007f64 <I2SEx_RxISR_I2SExt+0x64>
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f62:	e001      	b.n	8007f68 <I2SEx_RxISR_I2SExt+0x68>
 8007f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff03 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40003800 	.word	0x40003800
 8007f94:	40003400 	.word	0x40003400

08007f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e267      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d075      	beq.n	80080a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fb6:	4b88      	ldr	r3, [pc, #544]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d00c      	beq.n	8007fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc2:	4b85      	ldr	r3, [pc, #532]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d112      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fce:	4b82      	ldr	r3, [pc, #520]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fdc:	4b7e      	ldr	r3, [pc, #504]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d05b      	beq.n	80080a0 <HAL_RCC_OscConfig+0x108>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d157      	bne.n	80080a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e242      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffc:	d106      	bne.n	800800c <HAL_RCC_OscConfig+0x74>
 8007ffe:	4b76      	ldr	r3, [pc, #472]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a75      	ldr	r2, [pc, #468]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e01d      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008014:	d10c      	bne.n	8008030 <HAL_RCC_OscConfig+0x98>
 8008016:	4b70      	ldr	r3, [pc, #448]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a6f      	ldr	r2, [pc, #444]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 800801c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	4b6d      	ldr	r3, [pc, #436]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6c      	ldr	r2, [pc, #432]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	e00b      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 8008030:	4b69      	ldr	r3, [pc, #420]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a68      	ldr	r2, [pc, #416]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	4b66      	ldr	r3, [pc, #408]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a65      	ldr	r2, [pc, #404]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d013      	beq.n	8008078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008050:	f7fa fec0 	bl	8002dd4 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008058:	f7fa febc 	bl	8002dd4 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b64      	cmp	r3, #100	; 0x64
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e207      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800806a:	4b5b      	ldr	r3, [pc, #364]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0xc0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008078:	f7fa feac 	bl	8002dd4 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008080:	f7fa fea8 	bl	8002dd4 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e1f3      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008092:	4b51      	ldr	r3, [pc, #324]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0xe8>
 800809e:	e000      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d063      	beq.n	8008176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ae:	4b4a      	ldr	r3, [pc, #296]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ba:	4b47      	ldr	r3, [pc, #284]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d11c      	bne.n	8008100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c6:	4b44      	ldr	r3, [pc, #272]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d116      	bne.n	8008100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080d2:	4b41      	ldr	r3, [pc, #260]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <HAL_RCC_OscConfig+0x152>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d001      	beq.n	80080ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e1c7      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ea:	4b3b      	ldr	r3, [pc, #236]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	4937      	ldr	r1, [pc, #220]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080fe:	e03a      	b.n	8008176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d020      	beq.n	800814a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008108:	4b34      	ldr	r3, [pc, #208]	; (80081dc <HAL_RCC_OscConfig+0x244>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fa fe61 	bl	8002dd4 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008116:	f7fa fe5d 	bl	8002dd4 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e1a8      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008128:	4b2b      	ldr	r3, [pc, #172]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008134:	4b28      	ldr	r3, [pc, #160]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4925      	ldr	r1, [pc, #148]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008144:	4313      	orrs	r3, r2
 8008146:	600b      	str	r3, [r1, #0]
 8008148:	e015      	b.n	8008176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800814a:	4b24      	ldr	r3, [pc, #144]	; (80081dc <HAL_RCC_OscConfig+0x244>)
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fa fe40 	bl	8002dd4 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008158:	f7fa fe3c 	bl	8002dd4 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e187      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d036      	beq.n	80081f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d016      	beq.n	80081b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_RCC_OscConfig+0x248>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008190:	f7fa fe20 	bl	8002dd4 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008198:	f7fa fe1c 	bl	8002dd4 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e167      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <HAL_RCC_OscConfig+0x240>)
 80081ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0x200>
 80081b6:	e01b      	b.n	80081f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <HAL_RCC_OscConfig+0x248>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081be:	f7fa fe09 	bl	8002dd4 <HAL_GetTick>
 80081c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081c4:	e00e      	b.n	80081e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081c6:	f7fa fe05 	bl	8002dd4 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d907      	bls.n	80081e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e150      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
 80081d8:	40023800 	.word	0x40023800
 80081dc:	42470000 	.word	0x42470000
 80081e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081e4:	4b88      	ldr	r3, [pc, #544]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ea      	bne.n	80081c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8097 	beq.w	800832c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008202:	4b81      	ldr	r3, [pc, #516]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10f      	bne.n	800822e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800820e:	2300      	movs	r3, #0
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	4b7d      	ldr	r3, [pc, #500]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	4a7c      	ldr	r2, [pc, #496]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800821c:	6413      	str	r3, [r2, #64]	; 0x40
 800821e:	4b7a      	ldr	r3, [pc, #488]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800822a:	2301      	movs	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822e:	4b77      	ldr	r3, [pc, #476]	; (800840c <HAL_RCC_OscConfig+0x474>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d118      	bne.n	800826c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800823a:	4b74      	ldr	r3, [pc, #464]	; (800840c <HAL_RCC_OscConfig+0x474>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a73      	ldr	r2, [pc, #460]	; (800840c <HAL_RCC_OscConfig+0x474>)
 8008240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008246:	f7fa fdc5 	bl	8002dd4 <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800824e:	f7fa fdc1 	bl	8002dd4 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e10c      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008260:	4b6a      	ldr	r3, [pc, #424]	; (800840c <HAL_RCC_OscConfig+0x474>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f0      	beq.n	800824e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d106      	bne.n	8008282 <HAL_RCC_OscConfig+0x2ea>
 8008274:	4b64      	ldr	r3, [pc, #400]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	4a63      	ldr	r2, [pc, #396]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	6713      	str	r3, [r2, #112]	; 0x70
 8008280:	e01c      	b.n	80082bc <HAL_RCC_OscConfig+0x324>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b05      	cmp	r3, #5
 8008288:	d10c      	bne.n	80082a4 <HAL_RCC_OscConfig+0x30c>
 800828a:	4b5f      	ldr	r3, [pc, #380]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	4a5e      	ldr	r2, [pc, #376]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008290:	f043 0304 	orr.w	r3, r3, #4
 8008294:	6713      	str	r3, [r2, #112]	; 0x70
 8008296:	4b5c      	ldr	r3, [pc, #368]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	4a5b      	ldr	r2, [pc, #364]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	6713      	str	r3, [r2, #112]	; 0x70
 80082a2:	e00b      	b.n	80082bc <HAL_RCC_OscConfig+0x324>
 80082a4:	4b58      	ldr	r3, [pc, #352]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80082a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a8:	4a57      	ldr	r2, [pc, #348]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	6713      	str	r3, [r2, #112]	; 0x70
 80082b0:	4b55      	ldr	r3, [pc, #340]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b4:	4a54      	ldr	r2, [pc, #336]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80082b6:	f023 0304 	bic.w	r3, r3, #4
 80082ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d015      	beq.n	80082f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c4:	f7fa fd86 	bl	8002dd4 <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fa fd82 	bl	8002dd4 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0cb      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082e2:	4b49      	ldr	r3, [pc, #292]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ee      	beq.n	80082cc <HAL_RCC_OscConfig+0x334>
 80082ee:	e014      	b.n	800831a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f0:	f7fa fd70 	bl	8002dd4 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082f6:	e00a      	b.n	800830e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f8:	f7fa fd6c 	bl	8002dd4 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	f241 3288 	movw	r2, #5000	; 0x1388
 8008306:	4293      	cmp	r3, r2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e0b5      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800830e:	4b3e      	ldr	r3, [pc, #248]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1ee      	bne.n	80082f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d105      	bne.n	800832c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	4a38      	ldr	r2, [pc, #224]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800832a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80a1 	beq.w	8008478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008336:	4b34      	ldr	r3, [pc, #208]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
 800833e:	2b08      	cmp	r3, #8
 8008340:	d05c      	beq.n	80083fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d141      	bne.n	80083ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834a:	4b31      	ldr	r3, [pc, #196]	; (8008410 <HAL_RCC_OscConfig+0x478>)
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008350:	f7fa fd40 	bl	8002dd4 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008358:	f7fa fd3c 	bl	8002dd4 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e087      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800836a:	4b27      	ldr	r3, [pc, #156]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f0      	bne.n	8008358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69da      	ldr	r2, [r3, #28]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	019b      	lsls	r3, r3, #6
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	3b01      	subs	r3, #1
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	061b      	lsls	r3, r3, #24
 800839a:	491b      	ldr	r1, [pc, #108]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 800839c:	4313      	orrs	r3, r2
 800839e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <HAL_RCC_OscConfig+0x478>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a6:	f7fa fd15 	bl	8002dd4 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ae:	f7fa fd11 	bl	8002dd4 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e05c      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c0:	4b11      	ldr	r3, [pc, #68]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCC_OscConfig+0x416>
 80083cc:	e054      	b.n	8008478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ce:	4b10      	ldr	r3, [pc, #64]	; (8008410 <HAL_RCC_OscConfig+0x478>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d4:	f7fa fcfe 	bl	8002dd4 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083dc:	f7fa fcfa 	bl	8002dd4 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e045      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ee:	4b06      	ldr	r3, [pc, #24]	; (8008408 <HAL_RCC_OscConfig+0x470>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f0      	bne.n	80083dc <HAL_RCC_OscConfig+0x444>
 80083fa:	e03d      	b.n	8008478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d107      	bne.n	8008414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e038      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
 8008408:	40023800 	.word	0x40023800
 800840c:	40007000 	.word	0x40007000
 8008410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008414:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <HAL_RCC_OscConfig+0x4ec>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d028      	beq.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d121      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d11a      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008444:	4013      	ands	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800844a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800844c:	4293      	cmp	r3, r2
 800844e:	d111      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	3b01      	subs	r3, #1
 800845e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008460:	429a      	cmp	r2, r3
 8008462:	d107      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008470:	429a      	cmp	r2, r3
 8008472:	d001      	beq.n	8008478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e000      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40023800 	.word	0x40023800

08008488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e0cc      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800849c:	4b68      	ldr	r3, [pc, #416]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d90c      	bls.n	80084c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084aa:	4b65      	ldr	r3, [pc, #404]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b2:	4b63      	ldr	r3, [pc, #396]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0b8      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d020      	beq.n	8008512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084dc:	4b59      	ldr	r3, [pc, #356]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4a58      	ldr	r2, [pc, #352]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084f4:	4b53      	ldr	r3, [pc, #332]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4a52      	ldr	r2, [pc, #328]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008500:	4b50      	ldr	r3, [pc, #320]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	494d      	ldr	r1, [pc, #308]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 800850e:	4313      	orrs	r3, r2
 8008510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d044      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d107      	bne.n	8008536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008526:	4b47      	ldr	r3, [pc, #284]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d119      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e07f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d003      	beq.n	8008546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008542:	2b03      	cmp	r3, #3
 8008544:	d107      	bne.n	8008556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008546:	4b3f      	ldr	r3, [pc, #252]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e06f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008556:	4b3b      	ldr	r3, [pc, #236]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e067      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008566:	4b37      	ldr	r3, [pc, #220]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f023 0203 	bic.w	r2, r3, #3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4934      	ldr	r1, [pc, #208]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	4313      	orrs	r3, r2
 8008576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008578:	f7fa fc2c 	bl	8002dd4 <HAL_GetTick>
 800857c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800857e:	e00a      	b.n	8008596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008580:	f7fa fc28 	bl	8002dd4 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f241 3288 	movw	r2, #5000	; 0x1388
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e04f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008596:	4b2b      	ldr	r3, [pc, #172]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 020c 	and.w	r2, r3, #12
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d1eb      	bne.n	8008580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d20c      	bcs.n	80085d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b6:	4b22      	ldr	r3, [pc, #136]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085be:	4b20      	ldr	r3, [pc, #128]	; (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d001      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e032      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085dc:	4b19      	ldr	r3, [pc, #100]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4916      	ldr	r1, [pc, #88]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	490e      	ldr	r1, [pc, #56]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800860e:	f000 f821 	bl	8008654 <HAL_RCC_GetSysClockFreq>
 8008612:	4602      	mov	r2, r0
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	091b      	lsrs	r3, r3, #4
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	490a      	ldr	r1, [pc, #40]	; (8008648 <HAL_RCC_ClockConfig+0x1c0>)
 8008620:	5ccb      	ldrb	r3, [r1, r3]
 8008622:	fa22 f303 	lsr.w	r3, r2, r3
 8008626:	4a09      	ldr	r2, [pc, #36]	; (800864c <HAL_RCC_ClockConfig+0x1c4>)
 8008628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <HAL_RCC_ClockConfig+0x1c8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7fa fb8c 	bl	8002d4c <HAL_InitTick>

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40023c00 	.word	0x40023c00
 8008644:	40023800 	.word	0x40023800
 8008648:	0800e378 	.word	0x0800e378
 800864c:	200000d8 	.word	0x200000d8
 8008650:	200000dc 	.word	0x200000dc

08008654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008658:	b094      	sub	sp, #80	; 0x50
 800865a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	647b      	str	r3, [r7, #68]	; 0x44
 8008660:	2300      	movs	r3, #0
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008664:	2300      	movs	r3, #0
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800866c:	4b79      	ldr	r3, [pc, #484]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 030c 	and.w	r3, r3, #12
 8008674:	2b08      	cmp	r3, #8
 8008676:	d00d      	beq.n	8008694 <HAL_RCC_GetSysClockFreq+0x40>
 8008678:	2b08      	cmp	r3, #8
 800867a:	f200 80e1 	bhi.w	8008840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x34>
 8008682:	2b04      	cmp	r3, #4
 8008684:	d003      	beq.n	800868e <HAL_RCC_GetSysClockFreq+0x3a>
 8008686:	e0db      	b.n	8008840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008688:	4b73      	ldr	r3, [pc, #460]	; (8008858 <HAL_RCC_GetSysClockFreq+0x204>)
 800868a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800868c:	e0db      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800868e:	4b73      	ldr	r3, [pc, #460]	; (800885c <HAL_RCC_GetSysClockFreq+0x208>)
 8008690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008692:	e0d8      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008694:	4b6f      	ldr	r3, [pc, #444]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800869e:	4b6d      	ldr	r3, [pc, #436]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d063      	beq.n	8008772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086aa:	4b6a      	ldr	r3, [pc, #424]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	099b      	lsrs	r3, r3, #6
 80086b0:	2200      	movs	r2, #0
 80086b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
 80086be:	2300      	movs	r3, #0
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
 80086c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	f04f 0000 	mov.w	r0, #0
 80086ce:	f04f 0100 	mov.w	r1, #0
 80086d2:	0159      	lsls	r1, r3, #5
 80086d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d8:	0150      	lsls	r0, r2, #5
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4621      	mov	r1, r4
 80086e0:	1a51      	subs	r1, r2, r1
 80086e2:	6139      	str	r1, [r7, #16]
 80086e4:	4629      	mov	r1, r5
 80086e6:	eb63 0301 	sbc.w	r3, r3, r1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086f8:	4659      	mov	r1, fp
 80086fa:	018b      	lsls	r3, r1, #6
 80086fc:	4651      	mov	r1, sl
 80086fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008702:	4651      	mov	r1, sl
 8008704:	018a      	lsls	r2, r1, #6
 8008706:	4651      	mov	r1, sl
 8008708:	ebb2 0801 	subs.w	r8, r2, r1
 800870c:	4659      	mov	r1, fp
 800870e:	eb63 0901 	sbc.w	r9, r3, r1
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800871e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008726:	4690      	mov	r8, r2
 8008728:	4699      	mov	r9, r3
 800872a:	4623      	mov	r3, r4
 800872c:	eb18 0303 	adds.w	r3, r8, r3
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	462b      	mov	r3, r5
 8008734:	eb49 0303 	adc.w	r3, r9, r3
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008746:	4629      	mov	r1, r5
 8008748:	024b      	lsls	r3, r1, #9
 800874a:	4621      	mov	r1, r4
 800874c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008750:	4621      	mov	r1, r4
 8008752:	024a      	lsls	r2, r1, #9
 8008754:	4610      	mov	r0, r2
 8008756:	4619      	mov	r1, r3
 8008758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800875a:	2200      	movs	r2, #0
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
 800875e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008764:	f7f7 fd94 	bl	8000290 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4613      	mov	r3, r2
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	e058      	b.n	8008824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008772:	4b38      	ldr	r3, [pc, #224]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	2200      	movs	r2, #0
 800877a:	4618      	mov	r0, r3
 800877c:	4611      	mov	r1, r2
 800877e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008782:	623b      	str	r3, [r7, #32]
 8008784:	2300      	movs	r3, #0
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
 8008788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800878c:	4642      	mov	r2, r8
 800878e:	464b      	mov	r3, r9
 8008790:	f04f 0000 	mov.w	r0, #0
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	0159      	lsls	r1, r3, #5
 800879a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800879e:	0150      	lsls	r0, r2, #5
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4641      	mov	r1, r8
 80087a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80087aa:	4649      	mov	r1, r9
 80087ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087c4:	ebb2 040a 	subs.w	r4, r2, sl
 80087c8:	eb63 050b 	sbc.w	r5, r3, fp
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	00eb      	lsls	r3, r5, #3
 80087d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087da:	00e2      	lsls	r2, r4, #3
 80087dc:	4614      	mov	r4, r2
 80087de:	461d      	mov	r5, r3
 80087e0:	4643      	mov	r3, r8
 80087e2:	18e3      	adds	r3, r4, r3
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	464b      	mov	r3, r9
 80087e8:	eb45 0303 	adc.w	r3, r5, r3
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087fa:	4629      	mov	r1, r5
 80087fc:	028b      	lsls	r3, r1, #10
 80087fe:	4621      	mov	r1, r4
 8008800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008804:	4621      	mov	r1, r4
 8008806:	028a      	lsls	r2, r1, #10
 8008808:	4610      	mov	r0, r2
 800880a:	4619      	mov	r1, r3
 800880c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800880e:	2200      	movs	r2, #0
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	61fa      	str	r2, [r7, #28]
 8008814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008818:	f7f7 fd3a 	bl	8000290 <__aeabi_uldivmod>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4613      	mov	r3, r2
 8008822:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	3301      	adds	r3, #1
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800883e:	e002      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008840:	4b05      	ldr	r3, [pc, #20]	; (8008858 <HAL_RCC_GetSysClockFreq+0x204>)
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008848:	4618      	mov	r0, r3
 800884a:	3750      	adds	r7, #80	; 0x50
 800884c:	46bd      	mov	sp, r7
 800884e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008852:	bf00      	nop
 8008854:	40023800 	.word	0x40023800
 8008858:	00f42400 	.word	0x00f42400
 800885c:	007a1200 	.word	0x007a1200

08008860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008864:	4b03      	ldr	r3, [pc, #12]	; (8008874 <HAL_RCC_GetHCLKFreq+0x14>)
 8008866:	681b      	ldr	r3, [r3, #0]
}
 8008868:	4618      	mov	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	200000d8 	.word	0x200000d8

08008878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800887c:	f7ff fff0 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 8008880:	4602      	mov	r2, r0
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	0a9b      	lsrs	r3, r3, #10
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	4903      	ldr	r1, [pc, #12]	; (800889c <HAL_RCC_GetPCLK1Freq+0x24>)
 800888e:	5ccb      	ldrb	r3, [r1, r3]
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40023800 	.word	0x40023800
 800889c:	0800e388 	.word	0x0800e388

080088a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088a4:	f7ff ffdc 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 80088a8:	4602      	mov	r2, r0
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	0b5b      	lsrs	r3, r3, #13
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	4903      	ldr	r1, [pc, #12]	; (80088c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088b6:	5ccb      	ldrb	r3, [r1, r3]
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40023800 	.word	0x40023800
 80088c4:	0800e388 	.word	0x0800e388

080088c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d038      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088f0:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088f6:	f7fa fa6d 	bl	8002dd4 <HAL_GetTick>
 80088fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088fc:	e008      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088fe:	f7fa fa69 	bl	8002dd4 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e0bd      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008910:	4b61      	ldr	r3, [pc, #388]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	019b      	lsls	r3, r3, #6
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	071b      	lsls	r3, r3, #28
 800892e:	495a      	ldr	r1, [pc, #360]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008936:	4b57      	ldr	r3, [pc, #348]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008938:	2201      	movs	r2, #1
 800893a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800893c:	f7fa fa4a 	bl	8002dd4 <HAL_GetTick>
 8008940:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008942:	e008      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008944:	f7fa fa46 	bl	8002dd4 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e09a      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008956:	4b50      	ldr	r3, [pc, #320]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0f0      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8083 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	4b48      	ldr	r3, [pc, #288]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	4a47      	ldr	r2, [pc, #284]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800897a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800897e:	6413      	str	r3, [r2, #64]	; 0x40
 8008980:	4b45      	ldr	r3, [pc, #276]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800898c:	4b43      	ldr	r3, [pc, #268]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a42      	ldr	r2, [pc, #264]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008996:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008998:	f7fa fa1c 	bl	8002dd4 <HAL_GetTick>
 800899c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800899e:	e008      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089a0:	f7fa fa18 	bl	8002dd4 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e06c      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089b2:	4b3a      	ldr	r3, [pc, #232]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089be:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d02f      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d028      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089dc:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089e6:	4b2e      	ldr	r3, [pc, #184]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80089f2:	4a29      	ldr	r2, [pc, #164]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089f8:	4b27      	ldr	r3, [pc, #156]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d114      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008a04:	f7fa f9e6 	bl	8002dd4 <HAL_GetTick>
 8008a08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a0a:	e00a      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a0c:	f7fa f9e2 	bl	8002dd4 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e034      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a22:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0ee      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a3a:	d10d      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008a3c:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a50:	4911      	ldr	r1, [pc, #68]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	608b      	str	r3, [r1, #8]
 8008a56:	e005      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	4a0e      	ldr	r2, [pc, #56]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a62:	6093      	str	r3, [r2, #8]
 8008a64:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a70:	4909      	ldr	r1, [pc, #36]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7d1a      	ldrb	r2, [r3, #20]
 8008a86:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008a88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	42470068 	.word	0x42470068
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	42470e40 	.word	0x42470e40
 8008aa4:	424711e0 	.word	0x424711e0

08008aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d140      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008ac6:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d131      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008adc:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008ade:	617b      	str	r3, [r7, #20]
          break;
 8008ae0:	e031      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ae2:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aee:	d109      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008af0:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008afa:	4a19      	ldr	r2, [pc, #100]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e008      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b0e:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b1c:	099b      	lsrs	r3, r3, #6
 8008b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	fb02 f303 	mul.w	r3, r2, r3
 8008b28:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b30:	0f1b      	lsrs	r3, r3, #28
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3c:	617b      	str	r3, [r7, #20]
          break;
 8008b3e:	e002      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
          break;
 8008b44:	bf00      	nop
        }
      }
      break;
 8008b46:	bf00      	nop
    }
  }
  return frequency;
 8008b48:	697b      	ldr	r3, [r7, #20]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	00bb8000 	.word	0x00bb8000
 8008b60:	007a1200 	.word	0x007a1200
 8008b64:	00f42400 	.word	0x00f42400

08008b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e07b      	b.n	8008c72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d108      	bne.n	8008b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8a:	d009      	beq.n	8008ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
 8008b92:	e005      	b.n	8008ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7f9 ff20 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c24:	ea42 0103 	orr.w	r1, r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	f003 0104 	and.w	r1, r3, #4
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f003 0210 	and.w	r2, r3, #16
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69da      	ldr	r2, [r3, #28]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e01a      	b.n	8008cc2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7f9 fefb 	bl	8002aa0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08c      	sub	sp, #48	; 0x30
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x26>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e18a      	b.n	8009006 <HAL_SPI_TransmitReceive+0x33c>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cf8:	f7fa f86c 	bl	8002dd4 <HAL_GetTick>
 8008cfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d0e:	887b      	ldrh	r3, [r7, #2]
 8008d10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d00f      	beq.n	8008d3a <HAL_SPI_TransmitReceive+0x70>
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d20:	d107      	bne.n	8008d32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <HAL_SPI_TransmitReceive+0x68>
 8008d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d003      	beq.n	8008d3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d32:	2302      	movs	r3, #2
 8008d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d38:	e15b      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_SPI_TransmitReceive+0x82>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_SPI_TransmitReceive+0x82>
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d52:	e14e      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d003      	beq.n	8008d68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2205      	movs	r2, #5
 8008d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	887a      	ldrh	r2, [r7, #2]
 8008d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	887a      	ldrh	r2, [r7, #2]
 8008d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	887a      	ldrh	r2, [r7, #2]
 8008d8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	887a      	ldrh	r2, [r7, #2]
 8008d90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	d007      	beq.n	8008dbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc4:	d178      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_SPI_TransmitReceive+0x10a>
 8008dce:	8b7b      	ldrh	r3, [r7, #26]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d166      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	881a      	ldrh	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	1c9a      	adds	r2, r3, #2
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df8:	e053      	b.n	8008ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d11b      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x176>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d016      	beq.n	8008e40 <HAL_SPI_TransmitReceive+0x176>
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d113      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d119      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x1b8>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d014      	beq.n	8008e82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	b292      	uxth	r2, r2
 8008e64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	1c9a      	adds	r2, r3, #2
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e82:	f7f9 ffa7 	bl	8002dd4 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d807      	bhi.n	8008ea2 <HAL_SPI_TransmitReceive+0x1d8>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e98:	d003      	beq.n	8008ea2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ea0:	e0a7      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1a6      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x130>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1a1      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x130>
 8008eb6:	e07c      	b.n	8008fb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <HAL_SPI_TransmitReceive+0x1fc>
 8008ec0:	8b7b      	ldrh	r3, [r7, #26]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d16b      	bne.n	8008f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eec:	e057      	b.n	8008f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d11c      	bne.n	8008f36 <HAL_SPI_TransmitReceive+0x26c>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d017      	beq.n	8008f36 <HAL_SPI_TransmitReceive+0x26c>
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d114      	bne.n	8008f36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d119      	bne.n	8008f78 <HAL_SPI_TransmitReceive+0x2ae>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d014      	beq.n	8008f78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f74:	2301      	movs	r3, #1
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f78:	f7f9 ff2c 	bl	8002dd4 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d803      	bhi.n	8008f90 <HAL_SPI_TransmitReceive+0x2c6>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f8e:	d102      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x2cc>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f9c:	e029      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1a2      	bne.n	8008eee <HAL_SPI_TransmitReceive+0x224>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d19d      	bne.n	8008eee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 f9d2 	bl	8009360 <SPI_EndRxTxTransaction>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008fce:	e010      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	e000      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009006:	4618      	mov	r0, r3
 8009008:	3730      	adds	r7, #48	; 0x30
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10e      	bne.n	8009050 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
    return;
 800904e:	e0ce      	b.n	80091ee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <HAL_SPI_IRQHandler+0x5e>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
    return;
 800906c:	e0bf      	b.n	80091ee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <HAL_SPI_IRQHandler+0x7e>
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 80b0 	beq.w	80091ee <HAL_SPI_IRQHandler+0x1de>
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80aa 	beq.w	80091ee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d023      	beq.n	80090ec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d011      	beq.n	80090d4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	f043 0204 	orr.w	r2, r3, #4
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	e00b      	b.n	80090ec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090d4:	2300      	movs	r3, #0
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	693b      	ldr	r3, [r7, #16]
        return;
 80090ea:	e080      	b.n	80091ee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f003 0320 	and.w	r3, r3, #32
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d014      	beq.n	8009120 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fa:	f043 0201 	orr.w	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00c      	beq.n	8009144 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	f043 0208 	orr.w	r2, r3, #8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009136:	2300      	movs	r3, #0
 8009138:	60bb      	str	r3, [r7, #8]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009148:	2b00      	cmp	r3, #0
 800914a:	d04f      	beq.n	80091ec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800915a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d104      	bne.n	8009178 <HAL_SPI_IRQHandler+0x168>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d034      	beq.n	80091e2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0203 	bic.w	r2, r2, #3
 8009186:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d011      	beq.n	80091b4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009194:	4a17      	ldr	r2, [pc, #92]	; (80091f4 <HAL_SPI_IRQHandler+0x1e4>)
 8009196:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919c:	4618      	mov	r0, r3
 800919e:	f7f9 fffc 	bl	800319a <HAL_DMA_Abort_IT>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d016      	beq.n	80091ea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	4a0c      	ldr	r2, [pc, #48]	; (80091f4 <HAL_SPI_IRQHandler+0x1e4>)
 80091c2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f9 ffe6 	bl	800319a <HAL_DMA_Abort_IT>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80091e0:	e003      	b.n	80091ea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f808 	bl	80091f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80091e8:	e000      	b.n	80091ec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80091ea:	bf00      	nop
    return;
 80091ec:	bf00      	nop
  }
}
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	08009229 	.word	0x08009229

080091f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800921a:	b2db      	uxtb	r3, r3
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff ffd8 	bl	80091f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009260:	f7f9 fdb8 	bl	8002dd4 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4413      	add	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009270:	f7f9 fdb0 	bl	8002dd4 <HAL_GetTick>
 8009274:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009276:	4b39      	ldr	r3, [pc, #228]	; (800935c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	015b      	lsls	r3, r3, #5
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009286:	e054      	b.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928e:	d050      	beq.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009290:	f7f9 fda0 	bl	8002dd4 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	429a      	cmp	r2, r3
 800929e:	d902      	bls.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d13d      	bne.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092be:	d111      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c8:	d004      	beq.n	80092d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d2:	d107      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ec:	d10f      	bne.n	800930e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800930c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e017      	b.n	8009352 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	3b01      	subs	r3, #1
 8009330:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4013      	ands	r3, r2
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	429a      	cmp	r2, r3
 8009340:	bf0c      	ite	eq
 8009342:	2301      	moveq	r3, #1
 8009344:	2300      	movne	r3, #0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	429a      	cmp	r2, r3
 800934e:	d19b      	bne.n	8009288 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	200000d8 	.word	0x200000d8

08009360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800936c:	4b1b      	ldr	r3, [pc, #108]	; (80093dc <SPI_EndRxTxTransaction+0x7c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <SPI_EndRxTxTransaction+0x80>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	0d5b      	lsrs	r3, r3, #21
 8009378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800937c:	fb02 f303 	mul.w	r3, r2, r3
 8009380:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800938a:	d112      	bne.n	80093b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff ff5a 	bl	8009250 <SPI_WaitFlagStateUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d016      	beq.n	80093d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e00f      	b.n	80093d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00a      	beq.n	80093ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c8:	2b80      	cmp	r3, #128	; 0x80
 80093ca:	d0f2      	beq.n	80093b2 <SPI_EndRxTxTransaction+0x52>
 80093cc:	e000      	b.n	80093d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80093ce:	bf00      	nop
  }

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200000d8 	.word	0x200000d8
 80093e0:	165e9f81 	.word	0x165e9f81

080093e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e03f      	b.n	8009476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7f9 fb68 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2224      	movs	r2, #36	; 0x24
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fd7b 	bl	8009f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800943c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695a      	ldr	r2, [r3, #20]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800945c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2220      	movs	r2, #32
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b08a      	sub	sp, #40	; 0x28
 8009482:	af02      	add	r7, sp, #8
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	603b      	str	r3, [r7, #0]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b20      	cmp	r3, #32
 800949c:	d17c      	bne.n	8009598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_UART_Transmit+0x2c>
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e075      	b.n	800959a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UART_Transmit+0x3e>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e06e      	b.n	800959a <HAL_UART_Transmit+0x11c>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2221      	movs	r2, #33	; 0x21
 80094ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094d2:	f7f9 fc7f 	bl	8002dd4 <HAL_GetTick>
 80094d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	88fa      	ldrh	r2, [r7, #6]
 80094e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ec:	d108      	bne.n	8009500 <HAL_UART_Transmit+0x82>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	e003      	b.n	8009508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009504:	2300      	movs	r3, #0
 8009506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009510:	e02a      	b.n	8009568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2200      	movs	r2, #0
 800951a:	2180      	movs	r1, #128	; 0x80
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 faf9 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e036      	b.n	800959a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	3302      	adds	r3, #2
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	e007      	b.n	800955a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	3301      	adds	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1cf      	bne.n	8009512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2200      	movs	r2, #0
 800957a:	2140      	movs	r1, #64	; 0x40
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 fac9 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e006      	b.n	800959a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	e000      	b.n	800959a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009598:	2302      	movs	r3, #2
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b0ba      	sub	sp, #232	; 0xe8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10f      	bne.n	800960a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <HAL_UART_IRQHandler+0x66>
 80095f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fbd3 	bl	8009dae <UART_Receive_IT>
      return;
 8009608:	e256      	b.n	8009ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800960a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 80de 	beq.w	80097d0 <HAL_UART_IRQHandler+0x22c>
 8009614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80d1 	beq.w	80097d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <HAL_UART_IRQHandler+0xae>
 800963a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	f043 0201 	orr.w	r2, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <HAL_UART_IRQHandler+0xd2>
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	f043 0202 	orr.w	r2, r3, #2
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <HAL_UART_IRQHandler+0xf6>
 8009682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f043 0204 	orr.w	r2, r3, #4
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800969a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d011      	beq.n	80096ca <HAL_UART_IRQHandler+0x126>
 80096a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	f043 0208 	orr.w	r2, r3, #8
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 81ed 	beq.w	8009aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <HAL_UART_IRQHandler+0x14e>
 80096e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e4:	f003 0320 	and.w	r3, r3, #32
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb5e 	bl	8009dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fc:	2b40      	cmp	r3, #64	; 0x40
 80096fe:	bf0c      	ite	eq
 8009700:	2301      	moveq	r3, #1
 8009702:	2300      	movne	r3, #0
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <HAL_UART_IRQHandler+0x17a>
 8009716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d04f      	beq.n	80097be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa66 	bl	8009bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d141      	bne.n	80097b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800974c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800975e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800976a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1d9      	bne.n	8009732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	2b00      	cmp	r3, #0
 8009784:	d013      	beq.n	80097ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	4a7d      	ldr	r2, [pc, #500]	; (8009980 <HAL_UART_IRQHandler+0x3dc>)
 800978c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	4618      	mov	r0, r3
 8009794:	f7f9 fd01 	bl	800319a <HAL_DMA_Abort_IT>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d016      	beq.n	80097cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	e00e      	b.n	80097cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f99a 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b4:	e00a      	b.n	80097cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f996 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	e006      	b.n	80097cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f992 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097ca:	e170      	b.n	8009aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	bf00      	nop
    return;
 80097ce:	e16e      	b.n	8009aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	f040 814a 	bne.w	8009a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097de:	f003 0310 	and.w	r3, r3, #16
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8143 	beq.w	8009a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 813c 	beq.w	8009a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	60bb      	str	r3, [r7, #8]
 800980a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	f040 80b4 	bne.w	8009984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8140 	beq.w	8009ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800983a:	429a      	cmp	r2, r3
 800983c:	f080 8139 	bcs.w	8009ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009852:	f000 8088 	beq.w	8009966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800986c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	330c      	adds	r3, #12
 800987e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800988e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800989a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1d9      	bne.n	8009856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3314      	adds	r3, #20
 80098a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098b4:	f023 0301 	bic.w	r3, r3, #1
 80098b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3314      	adds	r3, #20
 80098c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e1      	bne.n	80098a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3314      	adds	r3, #20
 80098e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3314      	adds	r3, #20
 80098fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e3      	bne.n	80098de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2220      	movs	r2, #32
 800991a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800992e:	e853 3f00 	ldrex	r3, [r3]
 8009932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009936:	f023 0310 	bic.w	r3, r3, #16
 800993a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	330c      	adds	r3, #12
 8009944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009948:	65ba      	str	r2, [r7, #88]	; 0x58
 800994a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800994e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009950:	e841 2300 	strex	r3, r2, [r1]
 8009954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e3      	bne.n	8009924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	4618      	mov	r0, r3
 8009962:	f7f9 fbaa 	bl	80030ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996e:	b29b      	uxth	r3, r3
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	b29b      	uxth	r3, r3
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f8c0 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800997c:	e099      	b.n	8009ab2 <HAL_UART_IRQHandler+0x50e>
 800997e:	bf00      	nop
 8009980:	08009cb7 	.word	0x08009cb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800998c:	b29b      	uxth	r3, r3
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 808b 	beq.w	8009ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80099a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8086 	beq.w	8009ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	330c      	adds	r3, #12
 80099b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	330c      	adds	r3, #12
 80099ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099ce:	647a      	str	r2, [r7, #68]	; 0x44
 80099d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e3      	bne.n	80099aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3314      	adds	r3, #20
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	e853 3f00 	ldrex	r3, [r3]
 80099f0:	623b      	str	r3, [r7, #32]
   return(result);
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	f023 0301 	bic.w	r3, r3, #1
 80099f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3314      	adds	r3, #20
 8009a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a06:	633a      	str	r2, [r7, #48]	; 0x30
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e3      	bne.n	80099e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0310 	bic.w	r3, r3, #16
 8009a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	330c      	adds	r3, #12
 8009a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a4c:	61fa      	str	r2, [r7, #28]
 8009a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	69b9      	ldr	r1, [r7, #24]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	617b      	str	r3, [r7, #20]
   return(result);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e3      	bne.n	8009a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f848 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a6c:	e023      	b.n	8009ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d009      	beq.n	8009a8e <HAL_UART_IRQHandler+0x4ea>
 8009a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f929 	bl	8009cde <UART_Transmit_IT>
    return;
 8009a8c:	e014      	b.n	8009ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x514>
 8009a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d008      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f969 	bl	8009d7e <UART_EndTransmit_IT>
    return;
 8009aac:	e004      	b.n	8009ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8009aae:	bf00      	nop
 8009ab0:	e002      	b.n	8009ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8009ab2:	bf00      	nop
 8009ab4:	e000      	b.n	8009ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8009ab6:	bf00      	nop
  }
}
 8009ab8:	37e8      	adds	r7, #232	; 0xe8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop

08009ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b090      	sub	sp, #64	; 0x40
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b24:	e050      	b.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2c:	d04c      	beq.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d007      	beq.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b34:	f7f9 f94e 	bl	8002dd4 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d241      	bcs.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	330c      	adds	r3, #12
 8009b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b64:	637a      	str	r2, [r7, #52]	; 0x34
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e5      	bne.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3314      	adds	r3, #20
 8009b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	613b      	str	r3, [r7, #16]
   return(result);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3314      	adds	r3, #20
 8009b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b98:	623a      	str	r2, [r7, #32]
 8009b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	69f9      	ldr	r1, [r7, #28]
 8009b9e:	6a3a      	ldr	r2, [r7, #32]
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e5      	bne.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e00f      	b.n	8009be8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2301      	moveq	r3, #1
 8009bda:	2300      	movne	r3, #0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d09f      	beq.n	8009b26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3740      	adds	r7, #64	; 0x40
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b095      	sub	sp, #84	; 0x54
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	330c      	adds	r3, #12
 8009bfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	330c      	adds	r3, #12
 8009c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c18:	643a      	str	r2, [r7, #64]	; 0x40
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e5      	bne.n	8009bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3314      	adds	r3, #20
 8009c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f023 0301 	bic.w	r3, r3, #1
 8009c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d119      	bne.n	8009c9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f023 0310 	bic.w	r3, r3, #16
 8009c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c88:	61ba      	str	r2, [r7, #24]
 8009c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	6979      	ldr	r1, [r7, #20]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	613b      	str	r3, [r7, #16]
   return(result);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e5      	bne.n	8009c68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009caa:	bf00      	nop
 8009cac:	3754      	adds	r7, #84	; 0x54
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff ff09 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b21      	cmp	r3, #33	; 0x21
 8009cf0:	d13e      	bne.n	8009d70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfa:	d114      	bne.n	8009d26 <UART_Transmit_IT+0x48>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d110      	bne.n	8009d26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	1c9a      	adds	r2, r3, #2
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	621a      	str	r2, [r3, #32]
 8009d24:	e008      	b.n	8009d38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	1c59      	adds	r1, r3, #1
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6211      	str	r1, [r2, #32]
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4619      	mov	r1, r3
 8009d46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10f      	bne.n	8009d6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e000      	b.n	8009d72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d70:	2302      	movs	r3, #2
  }
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fe8e 	bl	8009ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b08c      	sub	sp, #48	; 0x30
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b22      	cmp	r3, #34	; 0x22
 8009dc0:	f040 80ab 	bne.w	8009f1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dcc:	d117      	bne.n	8009dfe <UART_Receive_IT+0x50>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d113      	bne.n	8009dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df6:	1c9a      	adds	r2, r3, #2
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8009dfc:	e026      	b.n	8009e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e10:	d007      	beq.n	8009e22 <UART_Receive_IT+0x74>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <UART_Receive_IT+0x82>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e008      	b.n	8009e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d15a      	bne.n	8009f16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0220 	bic.w	r2, r2, #32
 8009e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695a      	ldr	r2, [r3, #20]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0201 	bic.w	r2, r2, #1
 8009e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d135      	bne.n	8009f0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	330c      	adds	r3, #12
 8009eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f023 0310 	bic.w	r3, r3, #16
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	330c      	adds	r3, #12
 8009ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec6:	623a      	str	r2, [r7, #32]
 8009ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	69f9      	ldr	r1, [r7, #28]
 8009ecc:	6a3a      	ldr	r2, [r7, #32]
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e5      	bne.n	8009ea6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d10a      	bne.n	8009efe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff fdf9 	bl	8009afc <HAL_UARTEx_RxEventCallback>
 8009f0a:	e002      	b.n	8009f12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff fde1 	bl	8009ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e002      	b.n	8009f1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e000      	b.n	8009f1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009f1a:	2302      	movs	r3, #2
  }
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3730      	adds	r7, #48	; 0x30
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f28:	b0c0      	sub	sp, #256	; 0x100
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f40:	68d9      	ldr	r1, [r3, #12]
 8009f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	ea40 0301 	orr.w	r3, r0, r1
 8009f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f7c:	f021 010c 	bic.w	r1, r1, #12
 8009f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9e:	6999      	ldr	r1, [r3, #24]
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	ea40 0301 	orr.w	r3, r0, r1
 8009faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b8f      	ldr	r3, [pc, #572]	; (800a1f0 <UART_SetConfig+0x2cc>)
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d005      	beq.n	8009fc4 <UART_SetConfig+0xa0>
 8009fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b8d      	ldr	r3, [pc, #564]	; (800a1f4 <UART_SetConfig+0x2d0>)
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d104      	bne.n	8009fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fc4:	f7fe fc6c 	bl	80088a0 <HAL_RCC_GetPCLK2Freq>
 8009fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009fcc:	e003      	b.n	8009fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fce:	f7fe fc53 	bl	8008878 <HAL_RCC_GetPCLK1Freq>
 8009fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fe0:	f040 810c 	bne.w	800a1fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	1891      	adds	r1, r2, r2
 8009ffc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ffe:	415b      	adcs	r3, r3
 800a000:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a006:	4621      	mov	r1, r4
 800a008:	eb12 0801 	adds.w	r8, r2, r1
 800a00c:	4629      	mov	r1, r5
 800a00e:	eb43 0901 	adc.w	r9, r3, r1
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a01e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a026:	4690      	mov	r8, r2
 800a028:	4699      	mov	r9, r3
 800a02a:	4623      	mov	r3, r4
 800a02c:	eb18 0303 	adds.w	r3, r8, r3
 800a030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a034:	462b      	mov	r3, r5
 800a036:	eb49 0303 	adc.w	r3, r9, r3
 800a03a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a04a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a04e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a052:	460b      	mov	r3, r1
 800a054:	18db      	adds	r3, r3, r3
 800a056:	653b      	str	r3, [r7, #80]	; 0x50
 800a058:	4613      	mov	r3, r2
 800a05a:	eb42 0303 	adc.w	r3, r2, r3
 800a05e:	657b      	str	r3, [r7, #84]	; 0x54
 800a060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a068:	f7f6 f912 	bl	8000290 <__aeabi_uldivmod>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4b61      	ldr	r3, [pc, #388]	; (800a1f8 <UART_SetConfig+0x2d4>)
 800a072:	fba3 2302 	umull	r2, r3, r3, r2
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	011c      	lsls	r4, r3, #4
 800a07a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a07e:	2200      	movs	r2, #0
 800a080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a084:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a08c:	4642      	mov	r2, r8
 800a08e:	464b      	mov	r3, r9
 800a090:	1891      	adds	r1, r2, r2
 800a092:	64b9      	str	r1, [r7, #72]	; 0x48
 800a094:	415b      	adcs	r3, r3
 800a096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a09c:	4641      	mov	r1, r8
 800a09e:	eb12 0a01 	adds.w	sl, r2, r1
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	eb43 0b01 	adc.w	fp, r3, r1
 800a0a8:	f04f 0200 	mov.w	r2, #0
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0bc:	4692      	mov	sl, r2
 800a0be:	469b      	mov	fp, r3
 800a0c0:	4643      	mov	r3, r8
 800a0c2:	eb1a 0303 	adds.w	r3, sl, r3
 800a0c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	eb4b 0303 	adc.w	r3, fp, r3
 800a0d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	18db      	adds	r3, r3, r3
 800a0ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	eb42 0303 	adc.w	r3, r2, r3
 800a0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0fe:	f7f6 f8c7 	bl	8000290 <__aeabi_uldivmod>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4611      	mov	r1, r2
 800a108:	4b3b      	ldr	r3, [pc, #236]	; (800a1f8 <UART_SetConfig+0x2d4>)
 800a10a:	fba3 2301 	umull	r2, r3, r3, r1
 800a10e:	095b      	lsrs	r3, r3, #5
 800a110:	2264      	movs	r2, #100	; 0x64
 800a112:	fb02 f303 	mul.w	r3, r2, r3
 800a116:	1acb      	subs	r3, r1, r3
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a11e:	4b36      	ldr	r3, [pc, #216]	; (800a1f8 <UART_SetConfig+0x2d4>)
 800a120:	fba3 2302 	umull	r2, r3, r3, r2
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a12c:	441c      	add	r4, r3
 800a12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a132:	2200      	movs	r2, #0
 800a134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a13c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	1891      	adds	r1, r2, r2
 800a146:	63b9      	str	r1, [r7, #56]	; 0x38
 800a148:	415b      	adcs	r3, r3
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a14c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a150:	4641      	mov	r1, r8
 800a152:	1851      	adds	r1, r2, r1
 800a154:	6339      	str	r1, [r7, #48]	; 0x30
 800a156:	4649      	mov	r1, r9
 800a158:	414b      	adcs	r3, r1
 800a15a:	637b      	str	r3, [r7, #52]	; 0x34
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a168:	4659      	mov	r1, fp
 800a16a:	00cb      	lsls	r3, r1, #3
 800a16c:	4651      	mov	r1, sl
 800a16e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a172:	4651      	mov	r1, sl
 800a174:	00ca      	lsls	r2, r1, #3
 800a176:	4610      	mov	r0, r2
 800a178:	4619      	mov	r1, r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	4642      	mov	r2, r8
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a184:	464b      	mov	r3, r9
 800a186:	460a      	mov	r2, r1
 800a188:	eb42 0303 	adc.w	r3, r2, r3
 800a18c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a19c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a1a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	18db      	adds	r3, r3, r3
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	eb42 0303 	adc.w	r3, r2, r3
 800a1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a1ba:	f7f6 f869 	bl	8000290 <__aeabi_uldivmod>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <UART_SetConfig+0x2d4>)
 800a1c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1c8:	095b      	lsrs	r3, r3, #5
 800a1ca:	2164      	movs	r1, #100	; 0x64
 800a1cc:	fb01 f303 	mul.w	r3, r1, r3
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	3332      	adds	r3, #50	; 0x32
 800a1d6:	4a08      	ldr	r2, [pc, #32]	; (800a1f8 <UART_SetConfig+0x2d4>)
 800a1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1dc:	095b      	lsrs	r3, r3, #5
 800a1de:	f003 0207 	and.w	r2, r3, #7
 800a1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4422      	add	r2, r4
 800a1ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1ec:	e106      	b.n	800a3fc <UART_SetConfig+0x4d8>
 800a1ee:	bf00      	nop
 800a1f0:	40011000 	.word	0x40011000
 800a1f4:	40011400 	.word	0x40011400
 800a1f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a200:	2200      	movs	r2, #0
 800a202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a206:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a20a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a20e:	4642      	mov	r2, r8
 800a210:	464b      	mov	r3, r9
 800a212:	1891      	adds	r1, r2, r2
 800a214:	6239      	str	r1, [r7, #32]
 800a216:	415b      	adcs	r3, r3
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
 800a21a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a21e:	4641      	mov	r1, r8
 800a220:	1854      	adds	r4, r2, r1
 800a222:	4649      	mov	r1, r9
 800a224:	eb43 0501 	adc.w	r5, r3, r1
 800a228:	f04f 0200 	mov.w	r2, #0
 800a22c:	f04f 0300 	mov.w	r3, #0
 800a230:	00eb      	lsls	r3, r5, #3
 800a232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a236:	00e2      	lsls	r2, r4, #3
 800a238:	4614      	mov	r4, r2
 800a23a:	461d      	mov	r5, r3
 800a23c:	4643      	mov	r3, r8
 800a23e:	18e3      	adds	r3, r4, r3
 800a240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a244:	464b      	mov	r3, r9
 800a246:	eb45 0303 	adc.w	r3, r5, r3
 800a24a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a25a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a26a:	4629      	mov	r1, r5
 800a26c:	008b      	lsls	r3, r1, #2
 800a26e:	4621      	mov	r1, r4
 800a270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a274:	4621      	mov	r1, r4
 800a276:	008a      	lsls	r2, r1, #2
 800a278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a27c:	f7f6 f808 	bl	8000290 <__aeabi_uldivmod>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4b60      	ldr	r3, [pc, #384]	; (800a408 <UART_SetConfig+0x4e4>)
 800a286:	fba3 2302 	umull	r2, r3, r3, r2
 800a28a:	095b      	lsrs	r3, r3, #5
 800a28c:	011c      	lsls	r4, r3, #4
 800a28e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a292:	2200      	movs	r2, #0
 800a294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a29c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	1891      	adds	r1, r2, r2
 800a2a6:	61b9      	str	r1, [r7, #24]
 800a2a8:	415b      	adcs	r3, r3
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	1851      	adds	r1, r2, r1
 800a2b4:	6139      	str	r1, [r7, #16]
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	414b      	adcs	r3, r1
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	f04f 0300 	mov.w	r3, #0
 800a2c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	00cb      	lsls	r3, r1, #3
 800a2cc:	4651      	mov	r1, sl
 800a2ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	00ca      	lsls	r2, r1, #3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4642      	mov	r2, r8
 800a2de:	189b      	adds	r3, r3, r2
 800a2e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	460a      	mov	r2, r1
 800a2e8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2fc:	f04f 0200 	mov.w	r2, #0
 800a300:	f04f 0300 	mov.w	r3, #0
 800a304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a308:	4649      	mov	r1, r9
 800a30a:	008b      	lsls	r3, r1, #2
 800a30c:	4641      	mov	r1, r8
 800a30e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a312:	4641      	mov	r1, r8
 800a314:	008a      	lsls	r2, r1, #2
 800a316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a31a:	f7f5 ffb9 	bl	8000290 <__aeabi_uldivmod>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	4611      	mov	r1, r2
 800a324:	4b38      	ldr	r3, [pc, #224]	; (800a408 <UART_SetConfig+0x4e4>)
 800a326:	fba3 2301 	umull	r2, r3, r3, r1
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	2264      	movs	r2, #100	; 0x64
 800a32e:	fb02 f303 	mul.w	r3, r2, r3
 800a332:	1acb      	subs	r3, r1, r3
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	3332      	adds	r3, #50	; 0x32
 800a338:	4a33      	ldr	r2, [pc, #204]	; (800a408 <UART_SetConfig+0x4e4>)
 800a33a:	fba2 2303 	umull	r2, r3, r2, r3
 800a33e:	095b      	lsrs	r3, r3, #5
 800a340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a344:	441c      	add	r4, r3
 800a346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a34a:	2200      	movs	r2, #0
 800a34c:	673b      	str	r3, [r7, #112]	; 0x70
 800a34e:	677a      	str	r2, [r7, #116]	; 0x74
 800a350:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	1891      	adds	r1, r2, r2
 800a35a:	60b9      	str	r1, [r7, #8]
 800a35c:	415b      	adcs	r3, r3
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a364:	4641      	mov	r1, r8
 800a366:	1851      	adds	r1, r2, r1
 800a368:	6039      	str	r1, [r7, #0]
 800a36a:	4649      	mov	r1, r9
 800a36c:	414b      	adcs	r3, r1
 800a36e:	607b      	str	r3, [r7, #4]
 800a370:	f04f 0200 	mov.w	r2, #0
 800a374:	f04f 0300 	mov.w	r3, #0
 800a378:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a37c:	4659      	mov	r1, fp
 800a37e:	00cb      	lsls	r3, r1, #3
 800a380:	4651      	mov	r1, sl
 800a382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a386:	4651      	mov	r1, sl
 800a388:	00ca      	lsls	r2, r1, #3
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	4603      	mov	r3, r0
 800a390:	4642      	mov	r2, r8
 800a392:	189b      	adds	r3, r3, r2
 800a394:	66bb      	str	r3, [r7, #104]	; 0x68
 800a396:	464b      	mov	r3, r9
 800a398:	460a      	mov	r2, r1
 800a39a:	eb42 0303 	adc.w	r3, r2, r3
 800a39e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3aa:	667a      	str	r2, [r7, #100]	; 0x64
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	008b      	lsls	r3, r1, #2
 800a3bc:	4641      	mov	r1, r8
 800a3be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3c2:	4641      	mov	r1, r8
 800a3c4:	008a      	lsls	r2, r1, #2
 800a3c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3ca:	f7f5 ff61 	bl	8000290 <__aeabi_uldivmod>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	; (800a408 <UART_SetConfig+0x4e4>)
 800a3d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a3d8:	095b      	lsrs	r3, r3, #5
 800a3da:	2164      	movs	r1, #100	; 0x64
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	3332      	adds	r3, #50	; 0x32
 800a3e6:	4a08      	ldr	r2, [pc, #32]	; (800a408 <UART_SetConfig+0x4e4>)
 800a3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ec:	095b      	lsrs	r3, r3, #5
 800a3ee:	f003 020f 	and.w	r2, r3, #15
 800a3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4422      	add	r2, r4
 800a3fa:	609a      	str	r2, [r3, #8]
}
 800a3fc:	bf00      	nop
 800a3fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a402:	46bd      	mov	sp, r7
 800a404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a408:	51eb851f 	.word	0x51eb851f

0800a40c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a40c:	b084      	sub	sp, #16
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	f107 001c 	add.w	r0, r7, #28
 800a41a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	2b01      	cmp	r3, #1
 800a422:	d122      	bne.n	800a46a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d105      	bne.n	800a45e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f9c0 	bl	800a7e4 <USB_CoreReset>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
 800a468:	e01a      	b.n	800a4a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f9b4 	bl	800a7e4 <USB_CoreReset>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
 800a492:	e005      	b.n	800a4a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d10b      	bne.n	800a4be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f043 0206 	orr.w	r2, r3, #6
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f043 0220 	orr.w	r2, r3, #32
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4ca:	b004      	add	sp, #16
 800a4cc:	4770      	bx	lr

0800a4ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f043 0201 	orr.w	r2, r3, #1
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f023 0201 	bic.w	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d115      	bne.n	800a560 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a540:	2001      	movs	r0, #1
 800a542:	f7f8 fc53 	bl	8002dec <HAL_Delay>
      ms++;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3301      	adds	r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f93a 	bl	800a7c6 <USB_GetMode>
 800a552:	4603      	mov	r3, r0
 800a554:	2b01      	cmp	r3, #1
 800a556:	d01e      	beq.n	800a596 <USB_SetCurrentMode+0x84>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b31      	cmp	r3, #49	; 0x31
 800a55c:	d9f0      	bls.n	800a540 <USB_SetCurrentMode+0x2e>
 800a55e:	e01a      	b.n	800a596 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d115      	bne.n	800a592 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a572:	2001      	movs	r0, #1
 800a574:	f7f8 fc3a 	bl	8002dec <HAL_Delay>
      ms++;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f921 	bl	800a7c6 <USB_GetMode>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <USB_SetCurrentMode+0x84>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b31      	cmp	r3, #49	; 0x31
 800a58e:	d9f0      	bls.n	800a572 <USB_SetCurrentMode+0x60>
 800a590:	e001      	b.n	800a596 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e005      	b.n	800a5a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b32      	cmp	r3, #50	; 0x32
 800a59a:	d101      	bne.n	800a5a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e000      	b.n	800a5a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a13      	ldr	r2, [pc, #76]	; (800a610 <USB_FlushTxFifo+0x64>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d901      	bls.n	800a5cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e01b      	b.n	800a604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	daf2      	bge.n	800a5ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	019b      	lsls	r3, r3, #6
 800a5dc:	f043 0220 	orr.w	r2, r3, #32
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	4a08      	ldr	r2, [pc, #32]	; (800a610 <USB_FlushTxFifo+0x64>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d901      	bls.n	800a5f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e006      	b.n	800a604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d0f0      	beq.n	800a5e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	00030d40 	.word	0x00030d40

0800a614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4a11      	ldr	r2, [pc, #68]	; (800a670 <USB_FlushRxFifo+0x5c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d901      	bls.n	800a632 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e018      	b.n	800a664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	daf2      	bge.n	800a620 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2210      	movs	r2, #16
 800a642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4a08      	ldr	r2, [pc, #32]	; (800a670 <USB_FlushRxFifo+0x5c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d901      	bls.n	800a656 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e006      	b.n	800a664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f003 0310 	and.w	r3, r3, #16
 800a65e:	2b10      	cmp	r3, #16
 800a660:	d0f0      	beq.n	800a644 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	00030d40 	.word	0x00030d40

0800a674 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a674:	b480      	push	{r7}
 800a676:	b089      	sub	sp, #36	; 0x24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4611      	mov	r1, r2
 800a680:	461a      	mov	r2, r3
 800a682:	460b      	mov	r3, r1
 800a684:	71fb      	strb	r3, [r7, #7]
 800a686:	4613      	mov	r3, r2
 800a688:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a696:	2b00      	cmp	r3, #0
 800a698:	d123      	bne.n	800a6e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a69a:	88bb      	ldrh	r3, [r7, #4]
 800a69c:	3303      	adds	r3, #3
 800a69e:	089b      	lsrs	r3, r3, #2
 800a6a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	e018      	b.n	800a6da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	031a      	lsls	r2, r3, #12
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	61bb      	str	r3, [r7, #24]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d3e2      	bcc.n	800a6a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3724      	adds	r7, #36	; 0x24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b08b      	sub	sp, #44	; 0x2c
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	089b      	lsrs	r3, r3, #2
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a716:	2300      	movs	r3, #0
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	e014      	b.n	800a746 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	601a      	str	r2, [r3, #0]
    pDest++;
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	3301      	adds	r3, #1
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	3301      	adds	r3, #1
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	3301      	adds	r3, #1
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	3301      	adds	r3, #1
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	3301      	adds	r3, #1
 800a744:	623b      	str	r3, [r7, #32]
 800a746:	6a3a      	ldr	r2, [r7, #32]
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d3e6      	bcc.n	800a71c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a74e:	8bfb      	ldrh	r3, [r7, #30]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01e      	beq.n	800a792 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75e:	461a      	mov	r2, r3
 800a760:	f107 0310 	add.w	r3, r7, #16
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
 800a774:	b2da      	uxtb	r2, r3
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	701a      	strb	r2, [r3, #0]
      i++;
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	3301      	adds	r3, #1
 800a77e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	3301      	adds	r3, #1
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a786:	8bfb      	ldrh	r3, [r7, #30]
 800a788:	3b01      	subs	r3, #1
 800a78a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a78c:	8bfb      	ldrh	r3, [r7, #30]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1ea      	bne.n	800a768 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a794:	4618      	mov	r0, r3
 800a796:	372c      	adds	r7, #44	; 0x2c
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4a13      	ldr	r2, [pc, #76]	; (800a848 <USB_CoreReset+0x64>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d901      	bls.n	800a802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e01b      	b.n	800a83a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	daf2      	bge.n	800a7f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f043 0201 	orr.w	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4a09      	ldr	r2, [pc, #36]	; (800a848 <USB_CoreReset+0x64>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d901      	bls.n	800a82c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e006      	b.n	800a83a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b01      	cmp	r3, #1
 800a836:	d0f0      	beq.n	800a81a <USB_CoreReset+0x36>

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	00030d40 	.word	0x00030d40

0800a84c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a84c:	b084      	sub	sp, #16
 800a84e:	b580      	push	{r7, lr}
 800a850:	b086      	sub	sp, #24
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a85a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a86c:	461a      	mov	r2, r3
 800a86e:	2300      	movs	r3, #0
 800a870:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d018      	beq.n	800a8d4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d10a      	bne.n	800a8be <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b6:	f043 0304 	orr.w	r3, r3, #4
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	e014      	b.n	800a8e8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8cc:	f023 0304 	bic.w	r3, r3, #4
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	e009      	b.n	800a8e8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8e2:	f023 0304 	bic.w	r3, r3, #4
 800a8e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8e8:	2110      	movs	r1, #16
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fe5e 	bl	800a5ac <USB_FlushTxFifo>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fe8a 	bl	800a614 <USB_FlushRxFifo>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	e015      	b.n	800a93c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91c:	461a      	mov	r2, r3
 800a91e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a922:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a930:	461a      	mov	r2, r3
 800a932:	2300      	movs	r3, #0
 800a934:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	3301      	adds	r3, #1
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	429a      	cmp	r2, r3
 800a942:	d3e5      	bcc.n	800a910 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a950:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a964:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a13      	ldr	r2, [pc, #76]	; (800a9b8 <USB_HostInit+0x16c>)
 800a96a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <USB_HostInit+0x170>)
 800a970:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a974:	e009      	b.n	800a98a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2280      	movs	r2, #128	; 0x80
 800a97a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a10      	ldr	r2, [pc, #64]	; (800a9c0 <USB_HostInit+0x174>)
 800a980:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a0f      	ldr	r2, [pc, #60]	; (800a9c4 <USB_HostInit+0x178>)
 800a986:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d105      	bne.n	800a99c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	f043 0210 	orr.w	r2, r3, #16
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699a      	ldr	r2, [r3, #24]
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <USB_HostInit+0x17c>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9b4:	b004      	add	sp, #16
 800a9b6:	4770      	bx	lr
 800a9b8:	01000200 	.word	0x01000200
 800a9bc:	00e00300 	.word	0x00e00300
 800a9c0:	00600080 	.word	0x00600080
 800a9c4:	004000e0 	.word	0x004000e0
 800a9c8:	a3200008 	.word	0xa3200008

0800a9cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9ea:	f023 0303 	bic.w	r3, r3, #3
 800a9ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	f003 0303 	and.w	r3, r3, #3
 800a9fe:	68f9      	ldr	r1, [r7, #12]
 800aa00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d107      	bne.n	800aa1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa14:	461a      	mov	r2, r3
 800aa16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa1a:	6053      	str	r3, [r2, #4]
 800aa1c:	e009      	b.n	800aa32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d106      	bne.n	800aa32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f241 7370 	movw	r3, #6000	; 0x1770
 800aa30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aa60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aa70:	2064      	movs	r0, #100	; 0x64
 800aa72:	f7f8 f9bb 	bl	8002dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800aa84:	200a      	movs	r0, #10
 800aa86:	f7f8 f9b1 	bl	8002dec <HAL_Delay>

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aab8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <USB_DriveVbus+0x44>
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d106      	bne.n	800aad8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aad6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae2:	d109      	bne.n	800aaf8 <USB_DriveVbus+0x64>
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaf6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	0c5b      	lsrs	r3, r3, #17
 800ab24:	f003 0303 	and.w	r3, r3, #3
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	b29b      	uxth	r3, r3
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	70fb      	strb	r3, [r7, #3]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70bb      	strb	r3, [r7, #2]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab86:	461a      	mov	r2, r3
 800ab88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ab8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d87e      	bhi.n	800ac94 <USB_HC_Init+0x13c>
 800ab96:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <USB_HC_Init+0x44>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800abad 	.word	0x0800abad
 800aba0:	0800ac57 	.word	0x0800ac57
 800aba4:	0800abad 	.word	0x0800abad
 800aba8:	0800ac19 	.word	0x0800ac19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb8:	461a      	mov	r2, r3
 800abba:	f240 439d 	movw	r3, #1181	; 0x49d
 800abbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800abc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	da10      	bge.n	800abea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abe6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800abe8:	e057      	b.n	800ac9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d051      	beq.n	800ac9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	78fa      	ldrb	r2, [r7, #3]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac14:	60d3      	str	r3, [r2, #12]
      break;
 800ac16:	e040      	b.n	800ac9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac24:	461a      	mov	r2, r3
 800ac26:	f240 639d 	movw	r3, #1693	; 0x69d
 800ac2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ac2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da34      	bge.n	800ac9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	78fa      	ldrb	r2, [r7, #3]
 800ac44:	0151      	lsls	r1, r2, #5
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	440a      	add	r2, r1
 800ac4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac52:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ac54:	e023      	b.n	800ac9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac62:	461a      	mov	r2, r3
 800ac64:	f240 2325 	movw	r3, #549	; 0x225
 800ac68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ac6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	da17      	bge.n	800aca2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ac72:	78fb      	ldrb	r3, [r7, #3]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	78fa      	ldrb	r2, [r7, #3]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ac90:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ac92:	e006      	b.n	800aca2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	77fb      	strb	r3, [r7, #31]
      break;
 800ac98:	e004      	b.n	800aca4 <USB_HC_Init+0x14c>
      break;
 800ac9a:	bf00      	nop
 800ac9c:	e002      	b.n	800aca4 <USB_HC_Init+0x14c>
      break;
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <USB_HC_Init+0x14c>
      break;
 800aca2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	78fa      	ldrb	r2, [r7, #3]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acbe:	f043 0302 	orr.w	r3, r3, #2
 800acc2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acca:	699a      	ldr	r2, [r3, #24]
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	2101      	movs	r1, #1
 800acd4:	fa01 f303 	lsl.w	r3, r1, r3
 800acd8:	6939      	ldr	r1, [r7, #16]
 800acda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800acde:	4313      	orrs	r3, r2
 800ace0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800acee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da03      	bge.n	800acfe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800acf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acfa:	61bb      	str	r3, [r7, #24]
 800acfc:	e001      	b.n	800ad02 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff feff 	bl	800ab06 <USB_GetHostSpeed>
 800ad08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ad0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d106      	bne.n	800ad20 <USB_HC_Init+0x1c8>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d003      	beq.n	800ad20 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ad18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	e001      	b.n	800ad24 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad24:	787b      	ldrb	r3, [r7, #1]
 800ad26:	059b      	lsls	r3, r3, #22
 800ad28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ad2c:	78bb      	ldrb	r3, [r7, #2]
 800ad2e:	02db      	lsls	r3, r3, #11
 800ad30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ad36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad3a:	049b      	lsls	r3, r3, #18
 800ad3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ad40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ad42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ad44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ad48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	0159      	lsls	r1, r3, #5
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	440b      	add	r3, r1
 800ad56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad60:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ad62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d003      	beq.n	800ad72 <USB_HC_Init+0x21a>
 800ad6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d10f      	bne.n	800ad92 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ad92:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3720      	adds	r7, #32
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	4613      	mov	r3, r2
 800ada8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	785b      	ldrb	r3, [r3, #1]
 800adb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800adb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d02d      	beq.n	800ae22 <USB_HC_StartXfer+0x86>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d129      	bne.n	800ae22 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d117      	bne.n	800ae04 <USB_HC_StartXfer+0x68>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	79db      	ldrb	r3, [r3, #7]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <USB_HC_StartXfer+0x48>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	79db      	ldrb	r3, [r3, #7]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d10f      	bne.n	800ae04 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	4413      	add	r3, r2
 800adec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae02:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10b      	bne.n	800ae22 <USB_HC_StartXfer+0x86>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	795b      	ldrb	r3, [r3, #5]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d107      	bne.n	800ae22 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	4619      	mov	r1, r3
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 fa0f 	bl	800b23c <USB_DoPing>
      return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e0f8      	b.n	800b014 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d018      	beq.n	800ae5c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	8912      	ldrh	r2, [r2, #8]
 800ae32:	4413      	add	r3, r2
 800ae34:	3b01      	subs	r3, #1
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	8912      	ldrh	r2, [r2, #8]
 800ae3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae3e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ae40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae42:	8b7b      	ldrh	r3, [r7, #26]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d90b      	bls.n	800ae60 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ae48:	8b7b      	ldrh	r3, [r7, #26]
 800ae4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ae4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	8912      	ldrh	r2, [r2, #8]
 800ae52:	fb03 f202 	mul.w	r2, r3, r2
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	611a      	str	r2, [r3, #16]
 800ae5a:	e001      	b.n	800ae60 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	78db      	ldrb	r3, [r3, #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d007      	beq.n	800ae78 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ae68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	8912      	ldrh	r2, [r2, #8]
 800ae6e:	fb03 f202 	mul.w	r2, r3, r2
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	611a      	str	r2, [r3, #16]
 800ae76:	e003      	b.n	800ae80 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ae88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae8a:	04d9      	lsls	r1, r3, #19
 800ae8c:	4b63      	ldr	r3, [pc, #396]	; (800b01c <USB_HC_StartXfer+0x280>)
 800ae8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ae90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	7a9b      	ldrb	r3, [r3, #10]
 800ae96:	075b      	lsls	r3, r3, #29
 800ae98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ae9c:	69f9      	ldr	r1, [r7, #28]
 800ae9e:	0148      	lsls	r0, r1, #5
 800aea0:	6a39      	ldr	r1, [r7, #32]
 800aea2:	4401      	add	r1, r0
 800aea4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aea8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aeaa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	68d9      	ldr	r1, [r3, #12]
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec2:	460a      	mov	r2, r1
 800aec4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bf0c      	ite	eq
 800aed6:	2301      	moveq	r3, #1
 800aed8:	2300      	movne	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	6a3a      	ldr	r2, [r7, #32]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aef8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aefc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	7e7b      	ldrb	r3, [r7, #25]
 800af0e:	075b      	lsls	r3, r3, #29
 800af10:	69f9      	ldr	r1, [r7, #28]
 800af12:	0148      	lsls	r0, r1, #5
 800af14:	6a39      	ldr	r1, [r7, #32]
 800af16:	4401      	add	r1, r0
 800af18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800af1c:	4313      	orrs	r3, r2
 800af1e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	4413      	add	r3, r2
 800af28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af36:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	78db      	ldrb	r3, [r3, #3]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	e003      	b.n	800af52 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af50:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af58:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	4413      	add	r3, r2
 800af62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af66:	461a      	mov	r2, r3
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800af6c:	79fb      	ldrb	r3, [r7, #7]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	e04e      	b.n	800b014 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d149      	bne.n	800b012 <USB_HC_StartXfer+0x276>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d045      	beq.n	800b012 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	79db      	ldrb	r3, [r3, #7]
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d830      	bhi.n	800aff0 <USB_HC_StartXfer+0x254>
 800af8e:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <USB_HC_StartXfer+0x1f8>)
 800af90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afc9 	.word	0x0800afc9
 800af9c:	0800afa5 	.word	0x0800afa5
 800afa0:	0800afc9 	.word	0x0800afc9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	3303      	adds	r3, #3
 800afaa:	089b      	lsrs	r3, r3, #2
 800afac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800afae:	8afa      	ldrh	r2, [r7, #22]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d91c      	bls.n	800aff4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	f043 0220 	orr.w	r2, r3, #32
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	619a      	str	r2, [r3, #24]
        }
        break;
 800afc6:	e015      	b.n	800aff4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	3303      	adds	r3, #3
 800afce:	089b      	lsrs	r3, r3, #2
 800afd0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800afd2:	8afa      	ldrh	r2, [r7, #22]
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	429a      	cmp	r2, r3
 800afe0:	d90a      	bls.n	800aff8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	619a      	str	r2, [r3, #24]
        }
        break;
 800afee:	e003      	b.n	800aff8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800aff0:	bf00      	nop
 800aff2:	e002      	b.n	800affa <USB_HC_StartXfer+0x25e>
        break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <USB_HC_StartXfer+0x25e>
        break;
 800aff8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	68d9      	ldr	r1, [r3, #12]
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	785a      	ldrb	r2, [r3, #1]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	b29b      	uxth	r3, r3
 800b008:	2000      	movs	r0, #0
 800b00a:	9000      	str	r0, [sp, #0]
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff fb31 	bl	800a674 <USB_WritePacket>
  }

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3728      	adds	r7, #40	; 0x28
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	1ff80000 	.word	0x1ff80000

0800b020 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	b29b      	uxth	r3, r3
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b042:	b480      	push	{r7}
 800b044:	b089      	sub	sp, #36	; 0x24
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b052:	78fb      	ldrb	r3, [r7, #3]
 800b054:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	4413      	add	r3, r2
 800b062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	0c9b      	lsrs	r3, r3, #18
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	4413      	add	r3, r2
 800b078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	0fdb      	lsrs	r3, r3, #31
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b20      	cmp	r3, #32
 800b090:	d104      	bne.n	800b09c <USB_HC_Halt+0x5a>
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	e0c8      	b.n	800b22e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <USB_HC_Halt+0x66>
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d163      	bne.n	800b170 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f040 80ab 	bne.w	800b22c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d133      	bne.n	800b14a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b100:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	0151      	lsls	r1, r2, #5
 800b114:	69fa      	ldr	r2, [r7, #28]
 800b116:	440a      	add	r2, r1
 800b118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b11c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b120:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3301      	adds	r3, #1
 800b126:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b12e:	d81d      	bhi.n	800b16c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b146:	d0ec      	beq.n	800b122 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b148:	e070      	b.n	800b22c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	4413      	add	r3, r2
 800b152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b168:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b16a:	e05f      	b.n	800b22c <USB_HC_Halt+0x1ea>
            break;
 800b16c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b16e:	e05d      	b.n	800b22c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	0151      	lsls	r1, r2, #5
 800b182:	69fa      	ldr	r2, [r7, #28]
 800b184:	440a      	add	r2, r1
 800b186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b18a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b18e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d133      	bne.n	800b208 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	0151      	lsls	r1, r2, #5
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	440a      	add	r2, r1
 800b1d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1ec:	d81d      	bhi.n	800b22a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b204:	d0ec      	beq.n	800b1e0 <USB_HC_Halt+0x19e>
 800b206:	e011      	b.n	800b22c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	e000      	b.n	800b22c <USB_HC_Halt+0x1ea>
          break;
 800b22a:	bf00      	nop
    }
  }

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3724      	adds	r7, #36	; 0x24
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
	...

0800b23c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b087      	sub	sp, #28
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b24c:	78fb      	ldrb	r3, [r7, #3]
 800b24e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b250:	2301      	movs	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	04da      	lsls	r2, r3, #19
 800b258:	4b15      	ldr	r3, [pc, #84]	; (800b2b0 <USB_DoPing+0x74>)
 800b25a:	4013      	ands	r3, r2
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	440a      	add	r2, r1
 800b264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b26c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	4413      	add	r3, r2
 800b276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b284:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b28c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	4413      	add	r3, r2
 800b296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b29a:	461a      	mov	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	1ff80000 	.word	0x1ff80000

0800b2b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff f911 	bl	800a4f0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2ce:	2110      	movs	r1, #16
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff f96b 	bl	800a5ac <USB_FlushTxFifo>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff f997 	bl	800a614 <USB_FlushRxFifo>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61bb      	str	r3, [r7, #24]
 800b2f4:	e01f      	b.n	800b336 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b30c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b314:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b31c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4413      	add	r3, r2
 800b326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b32a:	461a      	mov	r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	3301      	adds	r3, #1
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d9dc      	bls.n	800b2f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e034      	b.n	800b3ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b358:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b360:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b368:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	4413      	add	r3, r2
 800b372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b376:	461a      	mov	r2, r3
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b388:	d80c      	bhi.n	800b3a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	4413      	add	r3, r2
 800b392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b39c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a0:	d0ec      	beq.n	800b37c <USB_StopHost+0xc8>
 800b3a2:	e000      	b.n	800b3a6 <USB_StopHost+0xf2>
        break;
 800b3a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b0f      	cmp	r3, #15
 800b3b0:	d9c7      	bls.n	800b342 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff f880 	bl	800a4ce <USB_EnableGlobalInt>

  return ret;
 800b3ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBH_CDC_InterfaceInit>:
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b089      	sub	sp, #36	; 0x24
 800b3dc:	af04      	add	r7, sp, #16
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	2102      	movs	r1, #2
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fc66 	bl	800bcb8 <USBH_FindInterface>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	2bff      	cmp	r3, #255	; 0xff
 800b3f4:	d002      	beq.n	800b3fc <USBH_CDC_InterfaceInit+0x24>
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d901      	bls.n	800b400 <USBH_CDC_InterfaceInit+0x28>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e13d      	b.n	800b67c <USBH_CDC_InterfaceInit+0x2a4>
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fc3b 	bl	800bc80 <USBH_SelectInterface>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73bb      	strb	r3, [r7, #14]
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <USBH_CDC_InterfaceInit+0x40>
 800b414:	2302      	movs	r3, #2
 800b416:	e131      	b.n	800b67c <USBH_CDC_InterfaceInit+0x2a4>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b41e:	2050      	movs	r0, #80	; 0x50
 800b420:	f002 fad2 	bl	800d9c8 <malloc>
 800b424:	4603      	mov	r3, r0
 800b426:	61e3      	str	r3, [r4, #28]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBH_CDC_InterfaceInit+0x64>
 800b438:	2302      	movs	r3, #2
 800b43a:	e11f      	b.n	800b67c <USBH_CDC_InterfaceInit+0x2a4>
 800b43c:	2250      	movs	r2, #80	; 0x50
 800b43e:	2100      	movs	r1, #0
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f002 fb9d 	bl	800db80 <memset>
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	211a      	movs	r1, #26
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	4413      	add	r3, r2
 800b452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da15      	bge.n	800b48a <USBH_CDC_InterfaceInit+0xb2>
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	211a      	movs	r1, #26
 800b464:	fb01 f303 	mul.w	r3, r1, r3
 800b468:	4413      	add	r3, r2
 800b46a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b46e:	781a      	ldrb	r2, [r3, #0]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	705a      	strb	r2, [r3, #1]
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	211a      	movs	r1, #26
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b484:	881a      	ldrh	r2, [r3, #0]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	815a      	strh	r2, [r3, #10]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 ff2e 	bl	800d2f2 <USBH_AllocPipe>
 800b496:	4603      	mov	r3, r0
 800b498:	461a      	mov	r2, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	7819      	ldrb	r1, [r3, #0]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	7858      	ldrb	r0, [r3, #1]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	8952      	ldrh	r2, [r2, #10]
 800b4b6:	9202      	str	r2, [sp, #8]
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	9201      	str	r2, [sp, #4]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4623      	mov	r3, r4
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f001 fee6 	bl	800d294 <USBH_OpenPipe>
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f002 f9f5 	bl	800d8c0 <USBH_LL_SetToggle>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	210a      	movs	r1, #10
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fbeb 	bl	800bcb8 <USBH_FindInterface>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2bff      	cmp	r3, #255	; 0xff
 800b4ea:	d002      	beq.n	800b4f2 <USBH_CDC_InterfaceInit+0x11a>
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d901      	bls.n	800b4f6 <USBH_CDC_InterfaceInit+0x11e>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e0c2      	b.n	800b67c <USBH_CDC_InterfaceInit+0x2a4>
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	211a      	movs	r1, #26
 800b4fc:	fb01 f303 	mul.w	r3, r1, r3
 800b500:	4413      	add	r3, r2
 800b502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	b25b      	sxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	da16      	bge.n	800b53c <USBH_CDC_InterfaceInit+0x164>
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	211a      	movs	r1, #26
 800b514:	fb01 f303 	mul.w	r3, r1, r3
 800b518:	4413      	add	r3, r2
 800b51a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b51e:	781a      	ldrb	r2, [r3, #0]
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	73da      	strb	r2, [r3, #15]
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	211a      	movs	r1, #26
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	4413      	add	r3, r2
 800b530:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b534:	881a      	ldrh	r2, [r3, #0]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	835a      	strh	r2, [r3, #26]
 800b53a:	e015      	b.n	800b568 <USBH_CDC_InterfaceInit+0x190>
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	211a      	movs	r1, #26
 800b542:	fb01 f303 	mul.w	r3, r1, r3
 800b546:	4413      	add	r3, r2
 800b548:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	739a      	strb	r2, [r3, #14]
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	211a      	movs	r1, #26
 800b558:	fb01 f303 	mul.w	r3, r1, r3
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b562:	881a      	ldrh	r2, [r3, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	831a      	strh	r2, [r3, #24]
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	211a      	movs	r1, #26
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	b25b      	sxtb	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	da16      	bge.n	800b5ae <USBH_CDC_InterfaceInit+0x1d6>
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	211a      	movs	r1, #26
 800b586:	fb01 f303 	mul.w	r3, r1, r3
 800b58a:	4413      	add	r3, r2
 800b58c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b590:	781a      	ldrb	r2, [r3, #0]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	73da      	strb	r2, [r3, #15]
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	211a      	movs	r1, #26
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b5a6:	881a      	ldrh	r2, [r3, #0]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	835a      	strh	r2, [r3, #26]
 800b5ac:	e015      	b.n	800b5da <USBH_CDC_InterfaceInit+0x202>
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	211a      	movs	r1, #26
 800b5b4:	fb01 f303 	mul.w	r3, r1, r3
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5be:	781a      	ldrb	r2, [r3, #0]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	739a      	strb	r2, [r3, #14]
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	211a      	movs	r1, #26
 800b5ca:	fb01 f303 	mul.w	r3, r1, r3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b5d4:	881a      	ldrh	r2, [r3, #0]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	831a      	strh	r2, [r3, #24]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	7b9b      	ldrb	r3, [r3, #14]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 fe86 	bl	800d2f2 <USBH_AllocPipe>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	735a      	strb	r2, [r3, #13]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	7bdb      	ldrb	r3, [r3, #15]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 fe7c 	bl	800d2f2 <USBH_AllocPipe>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	731a      	strb	r2, [r3, #12]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	7b59      	ldrb	r1, [r3, #13]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	7b98      	ldrb	r0, [r3, #14]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	8b12      	ldrh	r2, [r2, #24]
 800b61a:	9202      	str	r2, [sp, #8]
 800b61c:	2202      	movs	r2, #2
 800b61e:	9201      	str	r2, [sp, #4]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	4623      	mov	r3, r4
 800b624:	4602      	mov	r2, r0
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fe34 	bl	800d294 <USBH_OpenPipe>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	7b19      	ldrb	r1, [r3, #12]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	7bd8      	ldrb	r0, [r3, #15]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	8b52      	ldrh	r2, [r2, #26]
 800b644:	9202      	str	r2, [sp, #8]
 800b646:	2202      	movs	r2, #2
 800b648:	9201      	str	r2, [sp, #4]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	4623      	mov	r3, r4
 800b64e:	4602      	mov	r2, r0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 fe1f 	bl	800d294 <USBH_OpenPipe>
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	7b5b      	ldrb	r3, [r3, #13]
 800b662:	2200      	movs	r2, #0
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f002 f92a 	bl	800d8c0 <USBH_LL_SetToggle>
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	7b1b      	ldrb	r3, [r3, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f002 f923 	bl	800d8c0 <USBH_LL_SetToggle>
 800b67a:	2300      	movs	r3, #0
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	bd90      	pop	{r4, r7, pc}

0800b684 <USBH_CDC_InterfaceDeInit>:
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00e      	beq.n	800b6bc <USBH_CDC_InterfaceDeInit+0x38>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 fe14 	bl	800d2d2 <USBH_ClosePipe>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f001 fe3f 	bl	800d334 <USBH_FreePipe>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	7b1b      	ldrb	r3, [r3, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00e      	beq.n	800b6e2 <USBH_CDC_InterfaceDeInit+0x5e>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	7b1b      	ldrb	r3, [r3, #12]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 fe01 	bl	800d2d2 <USBH_ClosePipe>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	7b1b      	ldrb	r3, [r3, #12]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 fe2c 	bl	800d334 <USBH_FreePipe>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	731a      	strb	r2, [r3, #12]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	7b5b      	ldrb	r3, [r3, #13]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00e      	beq.n	800b708 <USBH_CDC_InterfaceDeInit+0x84>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	7b5b      	ldrb	r3, [r3, #13]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f001 fdee 	bl	800d2d2 <USBH_ClosePipe>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	7b5b      	ldrb	r3, [r3, #13]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 fe19 	bl	800d334 <USBH_FreePipe>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	735a      	strb	r2, [r3, #13]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <USBH_CDC_InterfaceDeInit+0xa8>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f002 f95b 	bl	800d9d8 <free>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b728:	2200      	movs	r2, #0
 800b72a:	61da      	str	r2, [r3, #28]
 800b72c:	2300      	movs	r3, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBH_CDC_ClassRequest>:
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3340      	adds	r3, #64	; 0x40
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f8b1 	bl	800b8b6 <GetLineCoding>
 800b754:	4603      	mov	r3, r0
 800b756:	72fb      	strb	r3, [r7, #11]
 800b758:	7afb      	ldrb	r3, [r7, #11]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d105      	bne.n	800b76a <USBH_CDC_ClassRequest+0x34>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b764:	2102      	movs	r1, #2
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	4798      	blx	r3
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_CDC_Process>:
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	2301      	movs	r3, #1
 800b77e:	73fb      	strb	r3, [r7, #15]
 800b780:	2300      	movs	r3, #0
 800b782:	73bb      	strb	r3, [r7, #14]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	60bb      	str	r3, [r7, #8]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b794:	2b04      	cmp	r3, #4
 800b796:	d877      	bhi.n	800b888 <USBH_CDC_Process+0x114>
 800b798:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <USBH_CDC_Process+0x2c>)
 800b79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79e:	bf00      	nop
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7bb 	.word	0x0800b7bb
 800b7a8:	0800b7eb 	.word	0x0800b7eb
 800b7ac:	0800b85f 	.word	0x0800b85f
 800b7b0:	0800b86d 	.word	0x0800b86d
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
 800b7b8:	e06d      	b.n	800b896 <USBH_CDC_Process+0x122>
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f897 	bl	800b8f4 <SetLineCoding>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73bb      	strb	r3, [r7, #14]
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <USBH_CDC_Process+0x66>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b7d8:	e058      	b.n	800b88c <USBH_CDC_Process+0x118>
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d055      	beq.n	800b88c <USBH_CDC_Process+0x118>
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2204      	movs	r2, #4
 800b7e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b7e8:	e050      	b.n	800b88c <USBH_CDC_Process+0x118>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	3340      	adds	r3, #64	; 0x40
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f860 	bl	800b8b6 <GetLineCoding>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73bb      	strb	r3, [r7, #14]
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d126      	bne.n	800b84e <USBH_CDC_Process+0xda>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b812:	791b      	ldrb	r3, [r3, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d13b      	bne.n	800b890 <USBH_CDC_Process+0x11c>
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b822:	799b      	ldrb	r3, [r3, #6]
 800b824:	429a      	cmp	r2, r3
 800b826:	d133      	bne.n	800b890 <USBH_CDC_Process+0x11c>
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b832:	795b      	ldrb	r3, [r3, #5]
 800b834:	429a      	cmp	r2, r3
 800b836:	d12b      	bne.n	800b890 <USBH_CDC_Process+0x11c>
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d124      	bne.n	800b890 <USBH_CDC_Process+0x11c>
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f958 	bl	800bafc <USBH_CDC_LineCodingChanged>
 800b84c:	e020      	b.n	800b890 <USBH_CDC_Process+0x11c>
 800b84e:	7bbb      	ldrb	r3, [r7, #14]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d01d      	beq.n	800b890 <USBH_CDC_Process+0x11c>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2204      	movs	r2, #4
 800b858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b85c:	e018      	b.n	800b890 <USBH_CDC_Process+0x11c>
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f867 	bl	800b932 <CDC_ProcessTransmission>
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f8da 	bl	800ba1e <CDC_ProcessReception>
 800b86a:	e014      	b.n	800b896 <USBH_CDC_Process+0x122>
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 ffef 	bl	800c852 <USBH_ClrFeature>
 800b874:	4603      	mov	r3, r0
 800b876:	73bb      	strb	r3, [r7, #14]
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <USBH_CDC_Process+0x120>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b886:	e005      	b.n	800b894 <USBH_CDC_Process+0x120>
 800b888:	bf00      	nop
 800b88a:	e004      	b.n	800b896 <USBH_CDC_Process+0x122>
 800b88c:	bf00      	nop
 800b88e:	e002      	b.n	800b896 <USBH_CDC_Process+0x122>
 800b890:	bf00      	nop
 800b892:	e000      	b.n	800b896 <USBH_CDC_Process+0x122>
 800b894:	bf00      	nop
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBH_CDC_SOFProcess>:
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <GetLineCoding>:
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	22a1      	movs	r2, #161	; 0xa1
 800b8c4:	741a      	strb	r2, [r3, #16]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2221      	movs	r2, #33	; 0x21
 800b8ca:	745a      	strb	r2, [r3, #17]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	825a      	strh	r2, [r3, #18]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	829a      	strh	r2, [r3, #20]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2207      	movs	r2, #7
 800b8dc:	82da      	strh	r2, [r3, #22]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2207      	movs	r2, #7
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 fa83 	bl	800cdf0 <USBH_CtlReq>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <SetLineCoding>:
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2221      	movs	r2, #33	; 0x21
 800b902:	741a      	strb	r2, [r3, #16]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	745a      	strb	r2, [r3, #17]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	825a      	strh	r2, [r3, #18]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	829a      	strh	r2, [r3, #20]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2207      	movs	r2, #7
 800b91a:	82da      	strh	r2, [r3, #22]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2207      	movs	r2, #7
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fa64 	bl	800cdf0 <USBH_CtlReq>
 800b928:	4603      	mov	r3, r0
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <CDC_ProcessTransmission>:
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af02      	add	r7, sp, #8
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	2300      	movs	r3, #0
 800b946:	72fb      	strb	r3, [r7, #11]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d002      	beq.n	800b958 <CDC_ProcessTransmission+0x26>
 800b952:	2b02      	cmp	r3, #2
 800b954:	d023      	beq.n	800b99e <CDC_ProcessTransmission+0x6c>
 800b956:	e05e      	b.n	800ba16 <CDC_ProcessTransmission+0xe4>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	8b12      	ldrh	r2, [r2, #24]
 800b960:	4293      	cmp	r3, r2
 800b962:	d90b      	bls.n	800b97c <CDC_ProcessTransmission+0x4a>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	69d9      	ldr	r1, [r3, #28]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	8b1a      	ldrh	r2, [r3, #24]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	7b5b      	ldrb	r3, [r3, #13]
 800b970:	2001      	movs	r0, #1
 800b972:	9000      	str	r0, [sp, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 fc4a 	bl	800d20e <USBH_BulkSendData>
 800b97a:	e00b      	b.n	800b994 <CDC_ProcessTransmission+0x62>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	69d9      	ldr	r1, [r3, #28]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	b29a      	uxth	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	7b5b      	ldrb	r3, [r3, #13]
 800b98a:	2001      	movs	r0, #1
 800b98c:	9000      	str	r0, [sp, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f001 fc3d 	bl	800d20e <USBH_BulkSendData>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b99c:	e03b      	b.n	800ba16 <CDC_ProcessTransmission+0xe4>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	7b5b      	ldrb	r3, [r3, #13]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 ff61 	bl	800d86c <USBH_LL_GetURBState>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	72fb      	strb	r3, [r7, #11]
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d128      	bne.n	800ba06 <CDC_ProcessTransmission+0xd4>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	8b12      	ldrh	r2, [r2, #24]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d90e      	bls.n	800b9de <CDC_ProcessTransmission+0xac>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	8b12      	ldrh	r2, [r2, #24]
 800b9c8:	1a9a      	subs	r2, r3, r2
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	625a      	str	r2, [r3, #36]	; 0x24
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	8b12      	ldrh	r2, [r2, #24]
 800b9d6:	441a      	add	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	61da      	str	r2, [r3, #28]
 800b9dc:	e002      	b.n	800b9e4 <CDC_ProcessTransmission+0xb2>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <CDC_ProcessTransmission+0xc4>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b9f4:	e00e      	b.n	800ba14 <CDC_ProcessTransmission+0xe2>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f868 	bl	800bad4 <USBH_CDC_TransmitCallback>
 800ba04:	e006      	b.n	800ba14 <CDC_ProcessTransmission+0xe2>
 800ba06:	7afb      	ldrb	r3, [r7, #11]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d103      	bne.n	800ba14 <CDC_ProcessTransmission+0xe2>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <CDC_ProcessReception>:
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b086      	sub	sp, #24
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	617b      	str	r3, [r7, #20]
 800ba30:	2300      	movs	r3, #0
 800ba32:	74fb      	strb	r3, [r7, #19]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d002      	beq.n	800ba44 <CDC_ProcessReception+0x26>
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d00e      	beq.n	800ba60 <CDC_ProcessReception+0x42>
 800ba42:	e043      	b.n	800bacc <CDC_ProcessReception+0xae>
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	6a19      	ldr	r1, [r3, #32]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	8b5a      	ldrh	r2, [r3, #26]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	7b1b      	ldrb	r3, [r3, #12]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f001 fc01 	bl	800d258 <USBH_BulkReceiveData>
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2204      	movs	r2, #4
 800ba5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ba5e:	e035      	b.n	800bacc <CDC_ProcessReception+0xae>
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	7b1b      	ldrb	r3, [r3, #12]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 ff00 	bl	800d86c <USBH_LL_GetURBState>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	74fb      	strb	r3, [r7, #19]
 800ba70:	7cfb      	ldrb	r3, [r7, #19]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d129      	bne.n	800baca <CDC_ProcessReception+0xac>
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	7b1b      	ldrb	r3, [r3, #12]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 fe63 	bl	800d748 <USBH_LL_GetLastXferSize>
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d016      	beq.n	800babc <CDC_ProcessReception+0x9e>
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	8b5b      	ldrh	r3, [r3, #26]
 800ba92:	461a      	mov	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d910      	bls.n	800babc <CDC_ProcessReception+0x9e>
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad2      	subs	r2, r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	629a      	str	r2, [r3, #40]	; 0x28
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	6a1a      	ldr	r2, [r3, #32]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	441a      	add	r2, r3
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	621a      	str	r2, [r3, #32]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2203      	movs	r2, #3
 800bab6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800baba:	e006      	b.n	800baca <CDC_ProcessReception+0xac>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f80f 	bl	800bae8 <USBH_CDC_ReceiveCallback>
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBH_CDC_TransmitCallback>:
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USBH_CDC_ReceiveCallback>:
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USBH_CDC_LineCodingChanged>:
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb24:	2302      	movs	r3, #2
 800bb26:	e029      	b.n	800bb7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	79fa      	ldrb	r2, [r7, #7]
 800bb2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 f81f 	bl	800bb84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f001 fd33 	bl	800d5e0 <USBH_LL_Init>

  return USBH_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e009      	b.n	800bbaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	33e0      	adds	r3, #224	; 0xe0
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	2200      	movs	r2, #0
 800bba2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b0f      	cmp	r3, #15
 800bbae:	d9f2      	bls.n	800bb96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e009      	b.n	800bbca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd0:	d3f1      	bcc.n	800bbb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2240      	movs	r2, #64	; 0x40
 800bbf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d016      	beq.n	800bc6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10e      	bne.n	800bc68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc50:	1c59      	adds	r1, r3, #1
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	33de      	adds	r3, #222	; 0xde
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
 800bc66:	e004      	b.n	800bc72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bc68:	2302      	movs	r3, #2
 800bc6a:	73fb      	strb	r3, [r7, #15]
 800bc6c:	e001      	b.n	800bc72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bc6e:	2302      	movs	r3, #2
 800bc70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d204      	bcs.n	800bca6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bca4:	e001      	b.n	800bcaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bca6:	2302      	movs	r3, #2
 800bca8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	70fb      	strb	r3, [r7, #3]
 800bcca:	460b      	mov	r3, r1
 800bccc:	70bb      	strb	r3, [r7, #2]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bce0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bce2:	e025      	b.n	800bd30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	221a      	movs	r2, #26
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	3308      	adds	r3, #8
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	795b      	ldrb	r3, [r3, #5]
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d002      	beq.n	800bd06 <USBH_FindInterface+0x4e>
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	2bff      	cmp	r3, #255	; 0xff
 800bd04:	d111      	bne.n	800bd2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd0a:	78ba      	ldrb	r2, [r7, #2]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d002      	beq.n	800bd16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd10:	78bb      	ldrb	r3, [r7, #2]
 800bd12:	2bff      	cmp	r3, #255	; 0xff
 800bd14:	d109      	bne.n	800bd2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd1a:	787a      	ldrb	r2, [r7, #1]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d002      	beq.n	800bd26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd20:	787b      	ldrb	r3, [r7, #1]
 800bd22:	2bff      	cmp	r3, #255	; 0xff
 800bd24:	d101      	bne.n	800bd2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	e006      	b.n	800bd38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d9d6      	bls.n	800bce4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bd36:	23ff      	movs	r3, #255	; 0xff
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	371c      	adds	r7, #28
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fc83 	bl	800d658 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bd52:	2101      	movs	r1, #1
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 fd9c 	bl	800d892 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d102      	bne.n	800bd86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2203      	movs	r2, #3
 800bd84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b0b      	cmp	r3, #11
 800bd8e:	f200 81be 	bhi.w	800c10e <USBH_Process+0x3aa>
 800bd92:	a201      	add	r2, pc, #4	; (adr r2, 800bd98 <USBH_Process+0x34>)
 800bd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd98:	0800bdc9 	.word	0x0800bdc9
 800bd9c:	0800bdfb 	.word	0x0800bdfb
 800bda0:	0800be63 	.word	0x0800be63
 800bda4:	0800c0a9 	.word	0x0800c0a9
 800bda8:	0800c10f 	.word	0x0800c10f
 800bdac:	0800bf07 	.word	0x0800bf07
 800bdb0:	0800c04f 	.word	0x0800c04f
 800bdb4:	0800bf3d 	.word	0x0800bf3d
 800bdb8:	0800bf5d 	.word	0x0800bf5d
 800bdbc:	0800bf7d 	.word	0x0800bf7d
 800bdc0:	0800bfc1 	.word	0x0800bfc1
 800bdc4:	0800c091 	.word	0x0800c091
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 819e 	beq.w	800c112 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bddc:	20c8      	movs	r0, #200	; 0xc8
 800bdde:	f001 fd9f 	bl	800d920 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 fc95 	bl	800d712 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bdf8:	e18b      	b.n	800c112 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800be00:	2b01      	cmp	r3, #1
 800be02:	d107      	bne.n	800be14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2202      	movs	r2, #2
 800be10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be12:	e18d      	b.n	800c130 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be1e:	d914      	bls.n	800be4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be26:	3301      	adds	r3, #1
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be36:	2b03      	cmp	r3, #3
 800be38:	d903      	bls.n	800be42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	220d      	movs	r2, #13
 800be3e:	701a      	strb	r2, [r3, #0]
      break;
 800be40:	e176      	b.n	800c130 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
      break;
 800be48:	e172      	b.n	800c130 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be50:	f103 020a 	add.w	r2, r3, #10
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800be5a:	200a      	movs	r0, #10
 800be5c:	f001 fd60 	bl	800d920 <USBH_Delay>
      break;
 800be60:	e166      	b.n	800c130 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d005      	beq.n	800be78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be72:	2104      	movs	r1, #4
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800be78:	2064      	movs	r0, #100	; 0x64
 800be7a:	f001 fd51 	bl	800d920 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f001 fc20 	bl	800d6c4 <USBH_LL_GetSpeed>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2205      	movs	r2, #5
 800be92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800be94:	2100      	movs	r1, #0
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f001 fa2b 	bl	800d2f2 <USBH_AllocPipe>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bea4:	2180      	movs	r1, #128	; 0x80
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f001 fa23 	bl	800d2f2 <USBH_AllocPipe>
 800beac:	4603      	mov	r3, r0
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	7919      	ldrb	r1, [r3, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bec8:	b292      	uxth	r2, r2
 800beca:	9202      	str	r2, [sp, #8]
 800becc:	2200      	movs	r2, #0
 800bece:	9201      	str	r2, [sp, #4]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	4603      	mov	r3, r0
 800bed4:	2280      	movs	r2, #128	; 0x80
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f001 f9dc 	bl	800d294 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7959      	ldrb	r1, [r3, #5]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bef0:	b292      	uxth	r2, r2
 800bef2:	9202      	str	r2, [sp, #8]
 800bef4:	2200      	movs	r2, #0
 800bef6:	9201      	str	r2, [sp, #4]
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	4603      	mov	r3, r0
 800befc:	2200      	movs	r2, #0
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f001 f9c8 	bl	800d294 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf04:	e114      	b.n	800c130 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f918 	bl	800c13c <USBH_HandleEnum>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f040 80fe 	bne.w	800c116 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d103      	bne.n	800bf34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2208      	movs	r2, #8
 800bf30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf32:	e0f0      	b.n	800c116 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2207      	movs	r2, #7
 800bf38:	701a      	strb	r2, [r3, #0]
      break;
 800bf3a:	e0ec      	b.n	800c116 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80e9 	beq.w	800c11a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf4e:	2101      	movs	r1, #1
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2208      	movs	r2, #8
 800bf58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bf5a:	e0de      	b.n	800c11a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fc2c 	bl	800c7c4 <USBH_SetCfg>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 80d5 	bne.w	800c11e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2209      	movs	r2, #9
 800bf78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf7a:	e0d0      	b.n	800c11e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d016      	beq.n	800bfb8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fc3c 	bl	800c80a <USBH_SetFeature>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d103      	bne.n	800bfa6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfa4:	e0bd      	b.n	800c122 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	f040 80b9 	bne.w	800c122 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	220a      	movs	r2, #10
 800bfb4:	701a      	strb	r2, [r3, #0]
      break;
 800bfb6:	e0b4      	b.n	800c122 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	220a      	movs	r2, #10
 800bfbc:	701a      	strb	r2, [r3, #0]
      break;
 800bfbe:	e0b0      	b.n	800c122 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 80ad 	beq.w	800c126 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73fb      	strb	r3, [r7, #15]
 800bfd8:	e016      	b.n	800c008 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bfda:	7bfa      	ldrb	r2, [r7, #15]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	32de      	adds	r2, #222	; 0xde
 800bfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe4:	791a      	ldrb	r2, [r3, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d108      	bne.n	800c002 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bff0:	7bfa      	ldrb	r2, [r7, #15]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32de      	adds	r2, #222	; 0xde
 800bff6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c000:	e005      	b.n	800c00e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c002:	7bfb      	ldrb	r3, [r7, #15]
 800c004:	3301      	adds	r3, #1
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d0e5      	beq.n	800bfda <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d016      	beq.n	800c046 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2206      	movs	r2, #6
 800c02e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c036:	2103      	movs	r1, #3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c03c:	e073      	b.n	800c126 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	220d      	movs	r2, #13
 800c042:	701a      	strb	r2, [r3, #0]
      break;
 800c044:	e06f      	b.n	800c126 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	220d      	movs	r2, #13
 800c04a:	701a      	strb	r2, [r3, #0]
      break;
 800c04c:	e06b      	b.n	800c126 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c054:	2b00      	cmp	r3, #0
 800c056:	d017      	beq.n	800c088 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d103      	bne.n	800c078 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	220b      	movs	r2, #11
 800c074:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c076:	e058      	b.n	800c12a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d154      	bne.n	800c12a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	220d      	movs	r2, #13
 800c084:	701a      	strb	r2, [r3, #0]
      break;
 800c086:	e050      	b.n	800c12a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	220d      	movs	r2, #13
 800c08c:	701a      	strb	r2, [r3, #0]
      break;
 800c08e:	e04c      	b.n	800c12a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d049      	beq.n	800c12e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	4798      	blx	r3
      }
      break;
 800c0a6:	e042      	b.n	800c12e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff fd67 	bl	800bb84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d009      	beq.n	800c0d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0e4:	2105      	movs	r1, #5
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d107      	bne.n	800c106 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fe20 	bl	800bd44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c104:	e014      	b.n	800c130 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f001 faa6 	bl	800d658 <USBH_LL_Start>
      break;
 800c10c:	e010      	b.n	800c130 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c10e:	bf00      	nop
 800c110:	e00e      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c112:	bf00      	nop
 800c114:	e00c      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c116:	bf00      	nop
 800c118:	e00a      	b.n	800c130 <USBH_Process+0x3cc>
    break;
 800c11a:	bf00      	nop
 800c11c:	e008      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c11e:	bf00      	nop
 800c120:	e006      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c122:	bf00      	nop
 800c124:	e004      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c126:	bf00      	nop
 800c128:	e002      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c12a:	bf00      	nop
 800c12c:	e000      	b.n	800c130 <USBH_Process+0x3cc>
      break;
 800c12e:	bf00      	nop
  }
  return USBH_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop

0800c13c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af04      	add	r7, sp, #16
 800c142:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c144:	2301      	movs	r3, #1
 800c146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c148:	2301      	movs	r3, #1
 800c14a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	785b      	ldrb	r3, [r3, #1]
 800c150:	2b07      	cmp	r3, #7
 800c152:	f200 81c1 	bhi.w	800c4d8 <USBH_HandleEnum+0x39c>
 800c156:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <USBH_HandleEnum+0x20>)
 800c158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15c:	0800c17d 	.word	0x0800c17d
 800c160:	0800c23b 	.word	0x0800c23b
 800c164:	0800c2a5 	.word	0x0800c2a5
 800c168:	0800c333 	.word	0x0800c333
 800c16c:	0800c39d 	.word	0x0800c39d
 800c170:	0800c40d 	.word	0x0800c40d
 800c174:	0800c453 	.word	0x0800c453
 800c178:	0800c499 	.word	0x0800c499
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c17c:	2108      	movs	r1, #8
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fa50 	bl	800c624 <USBH_Get_DevDesc>
 800c184:	4603      	mov	r3, r0
 800c186:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d130      	bne.n	800c1f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	7919      	ldrb	r1, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c1b2:	b292      	uxth	r2, r2
 800c1b4:	9202      	str	r2, [sp, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	9201      	str	r2, [sp, #4]
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2280      	movs	r2, #128	; 0x80
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f867 	bl	800d294 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7959      	ldrb	r1, [r3, #5]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1da:	b292      	uxth	r2, r2
 800c1dc:	9202      	str	r2, [sp, #8]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	9201      	str	r2, [sp, #4]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 f853 	bl	800d294 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1ee:	e175      	b.n	800c4dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	f040 8172 	bne.w	800c4dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1fe:	3301      	adds	r3, #1
 800c200:	b2da      	uxtb	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d903      	bls.n	800c21a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	220d      	movs	r2, #13
 800c216:	701a      	strb	r2, [r3, #0]
      break;
 800c218:	e160      	b.n	800c4dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	795b      	ldrb	r3, [r3, #5]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f001 f887 	bl	800d334 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	791b      	ldrb	r3, [r3, #4]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 f881 	bl	800d334 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	701a      	strb	r2, [r3, #0]
      break;
 800c238:	e150      	b.n	800c4dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c23a:	2112      	movs	r1, #18
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9f1 	bl	800c624 <USBH_Get_DevDesc>
 800c242:	4603      	mov	r3, r0
 800c244:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c252:	e145      	b.n	800c4e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b03      	cmp	r3, #3
 800c258:	f040 8142 	bne.w	800c4e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c262:	3301      	adds	r3, #1
 800c264:	b2da      	uxtb	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c272:	2b03      	cmp	r3, #3
 800c274:	d903      	bls.n	800c27e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	220d      	movs	r2, #13
 800c27a:	701a      	strb	r2, [r3, #0]
      break;
 800c27c:	e130      	b.n	800c4e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f001 f855 	bl	800d334 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	791b      	ldrb	r3, [r3, #4]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f001 f84f 	bl	800d334 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
      break;
 800c2a2:	e11d      	b.n	800c4e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa68 	bl	800c77c <USBH_SetAddress>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d132      	bne.n	800c31c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c2b6:	2002      	movs	r0, #2
 800c2b8:	f001 fb32 	bl	800d920 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7919      	ldrb	r1, [r3, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2de:	b292      	uxth	r2, r2
 800c2e0:	9202      	str	r2, [sp, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	9201      	str	r2, [sp, #4]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2280      	movs	r2, #128	; 0x80
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 ffd1 	bl	800d294 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	7959      	ldrb	r1, [r3, #5]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c306:	b292      	uxth	r2, r2
 800c308:	9202      	str	r2, [sp, #8]
 800c30a:	2200      	movs	r2, #0
 800c30c:	9201      	str	r2, [sp, #4]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	4603      	mov	r3, r0
 800c312:	2200      	movs	r2, #0
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 ffbd 	bl	800d294 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c31a:	e0e3      	b.n	800c4e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	f040 80e0 	bne.w	800c4e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	220d      	movs	r2, #13
 800c328:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	705a      	strb	r2, [r3, #1]
      break;
 800c330:	e0d8      	b.n	800c4e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c332:	2109      	movs	r1, #9
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f99d 	bl	800c674 <USBH_Get_CfgDesc>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d103      	bne.n	800c34c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2204      	movs	r2, #4
 800c348:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c34a:	e0cd      	b.n	800c4e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	2b03      	cmp	r3, #3
 800c350:	f040 80ca 	bne.w	800c4e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c35a:	3301      	adds	r3, #1
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d903      	bls.n	800c376 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	220d      	movs	r2, #13
 800c372:	701a      	strb	r2, [r3, #0]
      break;
 800c374:	e0b8      	b.n	800c4e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	795b      	ldrb	r3, [r3, #5]
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 ffd9 	bl	800d334 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	791b      	ldrb	r3, [r3, #4]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 ffd3 	bl	800d334 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]
      break;
 800c39a:	e0a5      	b.n	800c4e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f965 	bl	800c674 <USBH_Get_CfgDesc>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d103      	bne.n	800c3bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2205      	movs	r2, #5
 800c3b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c3ba:	e097      	b.n	800c4ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	f040 8094 	bne.w	800c4ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d903      	bls.n	800c3e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	220d      	movs	r2, #13
 800c3e2:	701a      	strb	r2, [r3, #0]
      break;
 800c3e4:	e082      	b.n	800c4ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	795b      	ldrb	r3, [r3, #5]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 ffa1 	bl	800d334 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	791b      	ldrb	r3, [r3, #4]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 ff9b 	bl	800d334 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
      break;
 800c40a:	e06f      	b.n	800c4ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c412:	2b00      	cmp	r3, #0
 800c414:	d019      	beq.n	800c44a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c422:	23ff      	movs	r3, #255	; 0xff
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f949 	bl	800c6bc <USBH_Get_StringDesc>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d103      	bne.n	800c43c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2206      	movs	r2, #6
 800c438:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c43a:	e059      	b.n	800c4f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d156      	bne.n	800c4f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2206      	movs	r2, #6
 800c446:	705a      	strb	r2, [r3, #1]
      break;
 800c448:	e052      	b.n	800c4f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2206      	movs	r2, #6
 800c44e:	705a      	strb	r2, [r3, #1]
      break;
 800c450:	e04e      	b.n	800c4f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d019      	beq.n	800c490 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c468:	23ff      	movs	r3, #255	; 0xff
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f926 	bl	800c6bc <USBH_Get_StringDesc>
 800c470:	4603      	mov	r3, r0
 800c472:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d103      	bne.n	800c482 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2207      	movs	r2, #7
 800c47e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c480:	e038      	b.n	800c4f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c482:	7bbb      	ldrb	r3, [r7, #14]
 800c484:	2b03      	cmp	r3, #3
 800c486:	d135      	bne.n	800c4f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2207      	movs	r2, #7
 800c48c:	705a      	strb	r2, [r3, #1]
      break;
 800c48e:	e031      	b.n	800c4f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2207      	movs	r2, #7
 800c494:	705a      	strb	r2, [r3, #1]
      break;
 800c496:	e02d      	b.n	800c4f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d017      	beq.n	800c4d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c4ae:	23ff      	movs	r3, #255	; 0xff
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f903 	bl	800c6bc <USBH_Get_StringDesc>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c4c4:	e018      	b.n	800c4f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d115      	bne.n	800c4f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d0:	e012      	b.n	800c4f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d6:	e00f      	b.n	800c4f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c4d8:	bf00      	nop
 800c4da:	e00e      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4dc:	bf00      	nop
 800c4de:	e00c      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4e0:	bf00      	nop
 800c4e2:	e00a      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4e4:	bf00      	nop
 800c4e6:	e008      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e006      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4ec:	bf00      	nop
 800c4ee:	e004      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4f0:	bf00      	nop
 800c4f2:	e002      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4f4:	bf00      	nop
 800c4f6:	e000      	b.n	800c4fa <USBH_HandleEnum+0x3be>
      break;
 800c4f8:	bf00      	nop
  }
  return Status;
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f804 	bl	800c546 <USBH_HandleSof>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b0b      	cmp	r3, #11
 800c556:	d10a      	bne.n	800c56e <USBH_HandleSof+0x28>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d005      	beq.n	800c56e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	4798      	blx	r3
  }
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c576:	b480      	push	{r7}
 800c578:	b083      	sub	sp, #12
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c586:	bf00      	nop
}
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c5a2:	bf00      	nop
}
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 f846 	bl	800d68e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	791b      	ldrb	r3, [r3, #4]
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fe93 	bl	800d334 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	795b      	ldrb	r3, [r3, #5]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fe8d 	bl	800d334 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c636:	78fb      	ldrb	r3, [r7, #3]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	4613      	mov	r3, r2
 800c63e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c642:	2100      	movs	r1, #0
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f864 	bl	800c712 <USBH_GetDescriptor>
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c660:	78fa      	ldrb	r2, [r7, #3]
 800c662:	b292      	uxth	r2, r2
 800c664:	4619      	mov	r1, r3
 800c666:	f000 f919 	bl	800c89c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af02      	add	r7, sp, #8
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	331c      	adds	r3, #28
 800c684:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c686:	887b      	ldrh	r3, [r7, #2]
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c690:	2100      	movs	r1, #0
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f83d 	bl	800c712 <USBH_GetDescriptor>
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d107      	bne.n	800c6b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c6a2:	887b      	ldrh	r3, [r7, #2]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	68b9      	ldr	r1, [r7, #8]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f989 	bl	800c9c0 <USBH_ParseCfgDesc>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b088      	sub	sp, #32
 800c6c0:	af02      	add	r7, sp, #8
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	607a      	str	r2, [r7, #4]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	72fb      	strb	r3, [r7, #11]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c6d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c6e0:	893b      	ldrh	r3, [r7, #8]
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 f812 	bl	800c712 <USBH_GetDescriptor>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d107      	bne.n	800c708 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6fe:	893a      	ldrh	r2, [r7, #8]
 800c700:	6879      	ldr	r1, [r7, #4]
 800c702:	4618      	mov	r0, r3
 800c704:	f000 fb26 	bl	800cd54 <USBH_ParseStringDesc>
  }

  return status;
 800c708:	7dfb      	ldrb	r3, [r7, #23]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	72fb      	strb	r3, [r7, #11]
 800c720:	4613      	mov	r3, r2
 800c722:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	789b      	ldrb	r3, [r3, #2]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d11c      	bne.n	800c766 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c732:	b2da      	uxtb	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2206      	movs	r2, #6
 800c73c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	893a      	ldrh	r2, [r7, #8]
 800c742:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c744:	893b      	ldrh	r3, [r7, #8]
 800c746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c74a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c74e:	d104      	bne.n	800c75a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f240 4209 	movw	r2, #1033	; 0x409
 800c756:	829a      	strh	r2, [r3, #20]
 800c758:	e002      	b.n	800c760 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	8b3a      	ldrh	r2, [r7, #24]
 800c764:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c766:	8b3b      	ldrh	r3, [r7, #24]
 800c768:	461a      	mov	r2, r3
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 fb3f 	bl	800cdf0 <USBH_CtlReq>
 800c772:	4603      	mov	r3, r0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	460b      	mov	r3, r1
 800c786:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	789b      	ldrb	r3, [r3, #2]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d10f      	bne.n	800c7b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2205      	movs	r2, #5
 800c79a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c79c:	78fb      	ldrb	r3, [r7, #3]
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fb1b 	bl	800cdf0 <USBH_CtlReq>
 800c7ba:	4603      	mov	r3, r0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	789b      	ldrb	r3, [r3, #2]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d10e      	bne.n	800c7f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2209      	movs	r2, #9
 800c7e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	887a      	ldrh	r2, [r7, #2]
 800c7e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 faf8 	bl	800cdf0 <USBH_CtlReq>
 800c800:	4603      	mov	r3, r0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b082      	sub	sp, #8
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	789b      	ldrb	r3, [r3, #2]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d10f      	bne.n	800c83e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2203      	movs	r2, #3
 800c828:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c82a:	78fb      	ldrb	r3, [r7, #3]
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c83e:	2200      	movs	r2, #0
 800c840:	2100      	movs	r1, #0
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fad4 	bl	800cdf0 <USBH_CtlReq>
 800c848:	4603      	mov	r3, r0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	460b      	mov	r3, r1
 800c85c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	789b      	ldrb	r3, [r3, #2]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d10f      	bne.n	800c886 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2202      	movs	r2, #2
 800c86a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c886:	2200      	movs	r2, #0
 800c888:	2100      	movs	r1, #0
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fab0 	bl	800cdf0 <USBH_CtlReq>
 800c890:	4603      	mov	r3, r0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
	...

0800c89c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	785a      	ldrb	r2, [r3, #1]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	3302      	adds	r3, #2
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	791a      	ldrb	r2, [r3, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	795a      	ldrb	r2, [r3, #5]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	799a      	ldrb	r2, [r3, #6]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	79da      	ldrb	r2, [r3, #7]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	79db      	ldrb	r3, [r3, #7]
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	dc0f      	bgt.n	800c91e <USBH_ParseDevDesc+0x82>
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	db14      	blt.n	800c92c <USBH_ParseDevDesc+0x90>
 800c902:	3b08      	subs	r3, #8
 800c904:	4a2d      	ldr	r2, [pc, #180]	; (800c9bc <USBH_ParseDevDesc+0x120>)
 800c906:	fa22 f303 	lsr.w	r3, r2, r3
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf14      	ite	ne
 800c912:	2301      	movne	r3, #1
 800c914:	2300      	moveq	r3, #0
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <USBH_ParseDevDesc+0x86>
 800c91c:	e006      	b.n	800c92c <USBH_ParseDevDesc+0x90>
 800c91e:	2b40      	cmp	r3, #64	; 0x40
 800c920:	d104      	bne.n	800c92c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	79da      	ldrb	r2, [r3, #7]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	71da      	strb	r2, [r3, #7]
      break;
 800c92a:	e003      	b.n	800c934 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2240      	movs	r2, #64	; 0x40
 800c930:	71da      	strb	r2, [r3, #7]
      break;
 800c932:	bf00      	nop
  }

  if (length > 8U)
 800c934:	88fb      	ldrh	r3, [r7, #6]
 800c936:	2b08      	cmp	r3, #8
 800c938:	d939      	bls.n	800c9ae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	3308      	adds	r3, #8
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	b29a      	uxth	r2, r3
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	3309      	adds	r3, #9
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	021b      	lsls	r3, r3, #8
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	4313      	orrs	r3, r2
 800c950:	b29a      	uxth	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	330a      	adds	r3, #10
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	330b      	adds	r3, #11
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	b29b      	uxth	r3, r3
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	b29b      	uxth	r3, r3
 800c96a:	4313      	orrs	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	330c      	adds	r3, #12
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	b29a      	uxth	r2, r3
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	330d      	adds	r3, #13
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	b29b      	uxth	r3, r3
 800c982:	021b      	lsls	r3, r3, #8
 800c984:	b29b      	uxth	r3, r3
 800c986:	4313      	orrs	r3, r2
 800c988:	b29a      	uxth	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	7b9a      	ldrb	r2, [r3, #14]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	7bda      	ldrb	r2, [r3, #15]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	7c1a      	ldrb	r2, [r3, #16]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	7c5a      	ldrb	r2, [r3, #17]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	745a      	strb	r2, [r3, #17]
  }
}
 800c9ae:	bf00      	nop
 800c9b0:	3714      	adds	r7, #20
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	01000101 	.word	0x01000101

0800c9c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08c      	sub	sp, #48	; 0x30
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c9d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	781a      	ldrb	r2, [r3, #0]
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	785a      	ldrb	r2, [r3, #1]
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	3302      	adds	r3, #2
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	3303      	adds	r3, #3
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	4313      	orrs	r3, r2
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca1c:	bf28      	it	cs
 800ca1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	791a      	ldrb	r2, [r3, #4]
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	795a      	ldrb	r2, [r3, #5]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	799a      	ldrb	r2, [r3, #6]
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	79da      	ldrb	r2, [r3, #7]
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	7a1a      	ldrb	r2, [r3, #8]
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	d002      	beq.n	800ca5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	2209      	movs	r2, #9
 800ca5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca5e:	88fb      	ldrh	r3, [r7, #6]
 800ca60:	2b09      	cmp	r3, #9
 800ca62:	f240 809d 	bls.w	800cba0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca66:	2309      	movs	r3, #9
 800ca68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca6e:	e081      	b.n	800cb74 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca70:	f107 0316 	add.w	r3, r7, #22
 800ca74:	4619      	mov	r1, r3
 800ca76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca78:	f000 f99f 	bl	800cdba <USBH_GetNextDesc>
 800ca7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	785b      	ldrb	r3, [r3, #1]
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d176      	bne.n	800cb74 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b09      	cmp	r3, #9
 800ca8c:	d002      	beq.n	800ca94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	2209      	movs	r2, #9
 800ca92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca98:	221a      	movs	r2, #26
 800ca9a:	fb02 f303 	mul.w	r3, r2, r3
 800ca9e:	3308      	adds	r3, #8
 800caa0:	6a3a      	ldr	r2, [r7, #32]
 800caa2:	4413      	add	r3, r2
 800caa4:	3302      	adds	r3, #2
 800caa6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800caa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caaa:	69f8      	ldr	r0, [r7, #28]
 800caac:	f000 f87e 	bl	800cbac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800caba:	e043      	b.n	800cb44 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cabc:	f107 0316 	add.w	r3, r7, #22
 800cac0:	4619      	mov	r1, r3
 800cac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac4:	f000 f979 	bl	800cdba <USBH_GetNextDesc>
 800cac8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	2b05      	cmp	r3, #5
 800cad0:	d138      	bne.n	800cb44 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	795b      	ldrb	r3, [r3, #5]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d10f      	bne.n	800cafa <USBH_ParseCfgDesc+0x13a>
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	799b      	ldrb	r3, [r3, #6]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d10b      	bne.n	800cafa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	79db      	ldrb	r3, [r3, #7]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10f      	bne.n	800cb0a <USBH_ParseCfgDesc+0x14a>
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b09      	cmp	r3, #9
 800caf0:	d00b      	beq.n	800cb0a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	2209      	movs	r2, #9
 800caf6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800caf8:	e007      	b.n	800cb0a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b07      	cmp	r3, #7
 800cb00:	d004      	beq.n	800cb0c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	2207      	movs	r2, #7
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	e000      	b.n	800cb0c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb0a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb14:	3201      	adds	r2, #1
 800cb16:	00d2      	lsls	r2, r2, #3
 800cb18:	211a      	movs	r1, #26
 800cb1a:	fb01 f303 	mul.w	r3, r1, r3
 800cb1e:	4413      	add	r3, r2
 800cb20:	3308      	adds	r3, #8
 800cb22:	6a3a      	ldr	r2, [r7, #32]
 800cb24:	4413      	add	r3, r2
 800cb26:	3304      	adds	r3, #4
 800cb28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cb2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb2c:	69b9      	ldr	r1, [r7, #24]
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 f86b 	bl	800cc0a <USBH_ParseEPDesc>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cb3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	791b      	ldrb	r3, [r3, #4]
 800cb48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d204      	bcs.n	800cb5a <USBH_ParseCfgDesc+0x19a>
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	885a      	ldrh	r2, [r3, #2]
 800cb54:	8afb      	ldrh	r3, [r7, #22]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d8b0      	bhi.n	800cabc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	791b      	ldrb	r3, [r3, #4]
 800cb5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d201      	bcs.n	800cb6a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800cb66:	2303      	movs	r3, #3
 800cb68:	e01c      	b.n	800cba4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800cb6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb6e:	3301      	adds	r3, #1
 800cb70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d805      	bhi.n	800cb88 <USBH_ParseCfgDesc+0x1c8>
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	885a      	ldrh	r2, [r3, #2]
 800cb80:	8afb      	ldrh	r3, [r7, #22]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	f63f af74 	bhi.w	800ca70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	791b      	ldrb	r3, [r3, #4]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	bf28      	it	cs
 800cb90:	2302      	movcs	r3, #2
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d201      	bcs.n	800cba0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e001      	b.n	800cba4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800cba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3730      	adds	r7, #48	; 0x30
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781a      	ldrb	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	785a      	ldrb	r2, [r3, #1]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	789a      	ldrb	r2, [r3, #2]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	78da      	ldrb	r2, [r3, #3]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	791a      	ldrb	r2, [r3, #4]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	795a      	ldrb	r2, [r3, #5]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	799a      	ldrb	r2, [r3, #6]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	79da      	ldrb	r2, [r3, #7]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	7a1a      	ldrb	r2, [r3, #8]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	721a      	strb	r2, [r3, #8]
}
 800cbfe:	bf00      	nop
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b087      	sub	sp, #28
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	781a      	ldrb	r2, [r3, #0]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	785a      	ldrb	r2, [r3, #1]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	789a      	ldrb	r2, [r3, #2]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	78da      	ldrb	r2, [r3, #3]
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3305      	adds	r3, #5
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	021b      	lsls	r3, r3, #8
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	799a      	ldrb	r2, [r3, #6]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	889b      	ldrh	r3, [r3, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cc66:	2303      	movs	r3, #3
 800cc68:	75fb      	strb	r3, [r7, #23]
 800cc6a:	e033      	b.n	800ccd4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	889b      	ldrh	r3, [r3, #4]
 800cc70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cc74:	f023 0307 	bic.w	r3, r3, #7
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	889b      	ldrh	r3, [r3, #4]
 800cc82:	b21a      	sxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3304      	adds	r3, #4
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b299      	uxth	r1, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3305      	adds	r3, #5
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	021b      	lsls	r3, r3, #8
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d110      	bne.n	800ccc6 <USBH_ParseEPDesc+0xbc>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	b299      	uxth	r1, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3305      	adds	r3, #5
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	021b      	lsls	r3, r3, #8
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	430b      	orrs	r3, r1
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	b21b      	sxth	r3, r3
 800ccbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccc2:	b21b      	sxth	r3, r3
 800ccc4:	e001      	b.n	800ccca <USBH_ParseEPDesc+0xc0>
 800ccc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccca:	4313      	orrs	r3, r2
 800cccc:	b21b      	sxth	r3, r3
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d116      	bne.n	800cd0c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	78db      	ldrb	r3, [r3, #3]
 800cce2:	f003 0303 	and.w	r3, r3, #3
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d005      	beq.n	800ccf6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	78db      	ldrb	r3, [r3, #3]
 800ccee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d127      	bne.n	800cd46 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	799b      	ldrb	r3, [r3, #6]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <USBH_ParseEPDesc+0xfc>
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	799b      	ldrb	r3, [r3, #6]
 800cd02:	2b10      	cmp	r3, #16
 800cd04:	d91f      	bls.n	800cd46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd06:	2303      	movs	r3, #3
 800cd08:	75fb      	strb	r3, [r7, #23]
 800cd0a:	e01c      	b.n	800cd46 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	78db      	ldrb	r3, [r3, #3]
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d10a      	bne.n	800cd2e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	799b      	ldrb	r3, [r3, #6]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d003      	beq.n	800cd28 <USBH_ParseEPDesc+0x11e>
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	799b      	ldrb	r3, [r3, #6]
 800cd24:	2b10      	cmp	r3, #16
 800cd26:	d90e      	bls.n	800cd46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	75fb      	strb	r3, [r7, #23]
 800cd2c:	e00b      	b.n	800cd46 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	78db      	ldrb	r3, [r3, #3]
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d105      	bne.n	800cd46 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	799b      	ldrb	r3, [r3, #6]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd42:	2303      	movs	r3, #3
 800cd44:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	371c      	adds	r7, #28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b03      	cmp	r3, #3
 800cd6a:	d120      	bne.n	800cdae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	1e9a      	subs	r2, r3, #2
 800cd72:	88fb      	ldrh	r3, [r7, #6]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bf28      	it	cs
 800cd78:	4613      	movcs	r3, r2
 800cd7a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	3302      	adds	r3, #2
 800cd80:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cd82:	2300      	movs	r3, #0
 800cd84:	82fb      	strh	r3, [r7, #22]
 800cd86:	e00b      	b.n	800cda0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cd88:	8afb      	ldrh	r3, [r7, #22]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	781a      	ldrb	r2, [r3, #0]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cd9a:	8afb      	ldrh	r3, [r7, #22]
 800cd9c:	3302      	adds	r3, #2
 800cd9e:	82fb      	strh	r3, [r7, #22]
 800cda0:	8afa      	ldrh	r2, [r7, #22]
 800cda2:	8abb      	ldrh	r3, [r7, #20]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d3ef      	bcc.n	800cd88 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
  }
}
 800cdae:	bf00      	nop
 800cdb0:	371c      	adds	r7, #28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b085      	sub	sp, #20
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	881a      	ldrh	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	4413      	add	r3, r2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4413      	add	r3, r2
 800cde0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cde2:	68fb      	ldr	r3, [r7, #12]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d002      	beq.n	800ce10 <USBH_CtlReq+0x20>
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d00f      	beq.n	800ce2e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ce0e:	e027      	b.n	800ce60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	88fa      	ldrh	r2, [r7, #6]
 800ce1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2202      	movs	r2, #2
 800ce26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce2c:	e018      	b.n	800ce60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 f81c 	bl	800ce6c <USBH_HandleControl>
 800ce34:	4603      	mov	r3, r0
 800ce36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <USBH_CtlReq+0x54>
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	2b03      	cmp	r3, #3
 800ce42:	d106      	bne.n	800ce52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2201      	movs	r2, #1
 800ce48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	761a      	strb	r2, [r3, #24]
      break;
 800ce50:	e005      	b.n	800ce5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d102      	bne.n	800ce5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	709a      	strb	r2, [r3, #2]
      break;
 800ce5e:	bf00      	nop
  }
  return status;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af02      	add	r7, sp, #8
 800ce72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce74:	2301      	movs	r3, #1
 800ce76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7e1b      	ldrb	r3, [r3, #24]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2b0a      	cmp	r3, #10
 800ce84:	f200 8156 	bhi.w	800d134 <USBH_HandleControl+0x2c8>
 800ce88:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <USBH_HandleControl+0x24>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	0800ced7 	.word	0x0800ced7
 800ce98:	0800cf41 	.word	0x0800cf41
 800ce9c:	0800cf67 	.word	0x0800cf67
 800cea0:	0800cf9f 	.word	0x0800cf9f
 800cea4:	0800cfc9 	.word	0x0800cfc9
 800cea8:	0800d01b 	.word	0x0800d01b
 800ceac:	0800d03d 	.word	0x0800d03d
 800ceb0:	0800d079 	.word	0x0800d079
 800ceb4:	0800d09f 	.word	0x0800d09f
 800ceb8:	0800d0dd 	.word	0x0800d0dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f103 0110 	add.w	r1, r3, #16
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	795b      	ldrb	r3, [r3, #5]
 800cec6:	461a      	mov	r2, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f943 	bl	800d154 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2202      	movs	r2, #2
 800ced2:	761a      	strb	r2, [r3, #24]
      break;
 800ced4:	e139      	b.n	800d14a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	795b      	ldrb	r3, [r3, #5]
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fcc5 	bl	800d86c <USBH_LL_GetURBState>
 800cee2:	4603      	mov	r3, r0
 800cee4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cee6:	7bbb      	ldrb	r3, [r7, #14]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d11e      	bne.n	800cf2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	7c1b      	ldrb	r3, [r3, #16]
 800cef0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cef4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8adb      	ldrh	r3, [r3, #22]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cefe:	7b7b      	ldrb	r3, [r7, #13]
 800cf00:	2b80      	cmp	r3, #128	; 0x80
 800cf02:	d103      	bne.n	800cf0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2203      	movs	r2, #3
 800cf08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf0a:	e115      	b.n	800d138 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2205      	movs	r2, #5
 800cf10:	761a      	strb	r2, [r3, #24]
      break;
 800cf12:	e111      	b.n	800d138 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cf14:	7b7b      	ldrb	r3, [r7, #13]
 800cf16:	2b80      	cmp	r3, #128	; 0x80
 800cf18:	d103      	bne.n	800cf22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2209      	movs	r2, #9
 800cf1e:	761a      	strb	r2, [r3, #24]
      break;
 800cf20:	e10a      	b.n	800d138 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2207      	movs	r2, #7
 800cf26:	761a      	strb	r2, [r3, #24]
      break;
 800cf28:	e106      	b.n	800d138 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf2a:	7bbb      	ldrb	r3, [r7, #14]
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	d003      	beq.n	800cf38 <USBH_HandleControl+0xcc>
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	f040 8100 	bne.w	800d138 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	220b      	movs	r2, #11
 800cf3c:	761a      	strb	r2, [r3, #24]
      break;
 800cf3e:	e0fb      	b.n	800d138 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6899      	ldr	r1, [r3, #8]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	899a      	ldrh	r2, [r3, #12]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	791b      	ldrb	r3, [r3, #4]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f93a 	bl	800d1d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2204      	movs	r2, #4
 800cf62:	761a      	strb	r2, [r3, #24]
      break;
 800cf64:	e0f1      	b.n	800d14a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	791b      	ldrb	r3, [r3, #4]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fc7d 	bl	800d86c <USBH_LL_GetURBState>
 800cf72:	4603      	mov	r3, r0
 800cf74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d102      	bne.n	800cf82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2209      	movs	r2, #9
 800cf80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b05      	cmp	r3, #5
 800cf86:	d102      	bne.n	800cf8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf8c:	e0d6      	b.n	800d13c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	f040 80d3 	bne.w	800d13c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	220b      	movs	r2, #11
 800cf9a:	761a      	strb	r2, [r3, #24]
      break;
 800cf9c:	e0ce      	b.n	800d13c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6899      	ldr	r1, [r3, #8]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	899a      	ldrh	r2, [r3, #12]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	795b      	ldrb	r3, [r3, #5]
 800cfaa:	2001      	movs	r0, #1
 800cfac:	9000      	str	r0, [sp, #0]
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f8ea 	bl	800d188 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2206      	movs	r2, #6
 800cfc4:	761a      	strb	r2, [r3, #24]
      break;
 800cfc6:	e0c0      	b.n	800d14a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	795b      	ldrb	r3, [r3, #5]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fc4c 	bl	800d86c <USBH_LL_GetURBState>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d103      	bne.n	800cfe6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cfe4:	e0ac      	b.n	800d140 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cfe6:	7bbb      	ldrb	r3, [r7, #14]
 800cfe8:	2b05      	cmp	r3, #5
 800cfea:	d105      	bne.n	800cff8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	220c      	movs	r2, #12
 800cff0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cff2:	2303      	movs	r3, #3
 800cff4:	73fb      	strb	r3, [r7, #15]
      break;
 800cff6:	e0a3      	b.n	800d140 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cff8:	7bbb      	ldrb	r3, [r7, #14]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d103      	bne.n	800d006 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2205      	movs	r2, #5
 800d002:	761a      	strb	r2, [r3, #24]
      break;
 800d004:	e09c      	b.n	800d140 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d006:	7bbb      	ldrb	r3, [r7, #14]
 800d008:	2b04      	cmp	r3, #4
 800d00a:	f040 8099 	bne.w	800d140 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	220b      	movs	r2, #11
 800d012:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d014:	2302      	movs	r3, #2
 800d016:	73fb      	strb	r3, [r7, #15]
      break;
 800d018:	e092      	b.n	800d140 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	791b      	ldrb	r3, [r3, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	2100      	movs	r1, #0
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f8d5 	bl	800d1d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2208      	movs	r2, #8
 800d038:	761a      	strb	r2, [r3, #24]

      break;
 800d03a:	e086      	b.n	800d14a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	791b      	ldrb	r3, [r3, #4]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fc12 	bl	800d86c <USBH_LL_GetURBState>
 800d048:	4603      	mov	r3, r0
 800d04a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d105      	bne.n	800d05e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	220d      	movs	r2, #13
 800d056:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d05c:	e072      	b.n	800d144 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
 800d060:	2b04      	cmp	r3, #4
 800d062:	d103      	bne.n	800d06c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	220b      	movs	r2, #11
 800d068:	761a      	strb	r2, [r3, #24]
      break;
 800d06a:	e06b      	b.n	800d144 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	2b05      	cmp	r3, #5
 800d070:	d168      	bne.n	800d144 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d072:	2303      	movs	r3, #3
 800d074:	73fb      	strb	r3, [r7, #15]
      break;
 800d076:	e065      	b.n	800d144 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	795b      	ldrb	r3, [r3, #5]
 800d07c:	2201      	movs	r2, #1
 800d07e:	9200      	str	r2, [sp, #0]
 800d080:	2200      	movs	r2, #0
 800d082:	2100      	movs	r1, #0
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f87f 	bl	800d188 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	220a      	movs	r2, #10
 800d09a:	761a      	strb	r2, [r3, #24]
      break;
 800d09c:	e055      	b.n	800d14a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	795b      	ldrb	r3, [r3, #5]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fbe1 	bl	800d86c <USBH_LL_GetURBState>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d0ae:	7bbb      	ldrb	r3, [r7, #14]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d105      	bne.n	800d0c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	220d      	movs	r2, #13
 800d0bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0be:	e043      	b.n	800d148 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d103      	bne.n	800d0ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2209      	movs	r2, #9
 800d0ca:	761a      	strb	r2, [r3, #24]
      break;
 800d0cc:	e03c      	b.n	800d148 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d0ce:	7bbb      	ldrb	r3, [r7, #14]
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d139      	bne.n	800d148 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	220b      	movs	r2, #11
 800d0d8:	761a      	strb	r2, [r3, #24]
      break;
 800d0da:	e035      	b.n	800d148 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7e5b      	ldrb	r3, [r3, #25]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	765a      	strb	r2, [r3, #25]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7e5b      	ldrb	r3, [r3, #25]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d806      	bhi.n	800d0fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d0fc:	e025      	b.n	800d14a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d104:	2106      	movs	r1, #6
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	795b      	ldrb	r3, [r3, #5]
 800d114:	4619      	mov	r1, r3
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f90c 	bl	800d334 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	791b      	ldrb	r3, [r3, #4]
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f906 	bl	800d334 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d12e:	2302      	movs	r3, #2
 800d130:	73fb      	strb	r3, [r7, #15]
      break;
 800d132:	e00a      	b.n	800d14a <USBH_HandleControl+0x2de>

    default:
      break;
 800d134:	bf00      	nop
 800d136:	e008      	b.n	800d14a <USBH_HandleControl+0x2de>
      break;
 800d138:	bf00      	nop
 800d13a:	e006      	b.n	800d14a <USBH_HandleControl+0x2de>
      break;
 800d13c:	bf00      	nop
 800d13e:	e004      	b.n	800d14a <USBH_HandleControl+0x2de>
      break;
 800d140:	bf00      	nop
 800d142:	e002      	b.n	800d14a <USBH_HandleControl+0x2de>
      break;
 800d144:	bf00      	nop
 800d146:	e000      	b.n	800d14a <USBH_HandleControl+0x2de>
      break;
 800d148:	bf00      	nop
  }

  return status;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af04      	add	r7, sp, #16
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d162:	79f9      	ldrb	r1, [r7, #7]
 800d164:	2300      	movs	r3, #0
 800d166:	9303      	str	r3, [sp, #12]
 800d168:	2308      	movs	r3, #8
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	2300      	movs	r3, #0
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	2300      	movs	r3, #0
 800d176:	2200      	movs	r2, #0
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 fb46 	bl	800d80a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b088      	sub	sp, #32
 800d18c:	af04      	add	r7, sp, #16
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	4611      	mov	r1, r2
 800d194:	461a      	mov	r2, r3
 800d196:	460b      	mov	r3, r1
 800d198:	80fb      	strh	r3, [r7, #6]
 800d19a:	4613      	mov	r3, r2
 800d19c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1ac:	7979      	ldrb	r1, [r7, #5]
 800d1ae:	7e3b      	ldrb	r3, [r7, #24]
 800d1b0:	9303      	str	r3, [sp, #12]
 800d1b2:	88fb      	ldrh	r3, [r7, #6]
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f000 fb21 	bl	800d80a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b088      	sub	sp, #32
 800d1d6:	af04      	add	r7, sp, #16
 800d1d8:	60f8      	str	r0, [r7, #12]
 800d1da:	60b9      	str	r1, [r7, #8]
 800d1dc:	4611      	mov	r1, r2
 800d1de:	461a      	mov	r2, r3
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	80fb      	strh	r3, [r7, #6]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1e8:	7979      	ldrb	r1, [r7, #5]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9303      	str	r3, [sp, #12]
 800d1ee:	88fb      	ldrh	r3, [r7, #6]
 800d1f0:	9302      	str	r3, [sp, #8]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	9301      	str	r3, [sp, #4]
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f000 fb03 	bl	800d80a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d204:	2300      	movs	r3, #0

}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b088      	sub	sp, #32
 800d212:	af04      	add	r7, sp, #16
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	4611      	mov	r1, r2
 800d21a:	461a      	mov	r2, r3
 800d21c:	460b      	mov	r3, r1
 800d21e:	80fb      	strh	r3, [r7, #6]
 800d220:	4613      	mov	r3, r2
 800d222:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d232:	7979      	ldrb	r1, [r7, #5]
 800d234:	7e3b      	ldrb	r3, [r7, #24]
 800d236:	9303      	str	r3, [sp, #12]
 800d238:	88fb      	ldrh	r3, [r7, #6]
 800d23a:	9302      	str	r3, [sp, #8]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	2301      	movs	r3, #1
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	2302      	movs	r3, #2
 800d246:	2200      	movs	r2, #0
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 fade 	bl	800d80a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b088      	sub	sp, #32
 800d25c:	af04      	add	r7, sp, #16
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	4611      	mov	r1, r2
 800d264:	461a      	mov	r2, r3
 800d266:	460b      	mov	r3, r1
 800d268:	80fb      	strh	r3, [r7, #6]
 800d26a:	4613      	mov	r3, r2
 800d26c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d26e:	7979      	ldrb	r1, [r7, #5]
 800d270:	2300      	movs	r3, #0
 800d272:	9303      	str	r3, [sp, #12]
 800d274:	88fb      	ldrh	r3, [r7, #6]
 800d276:	9302      	str	r3, [sp, #8]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	2301      	movs	r3, #1
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	2302      	movs	r3, #2
 800d282:	2201      	movs	r2, #1
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 fac0 	bl	800d80a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af04      	add	r7, sp, #16
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	4608      	mov	r0, r1
 800d29e:	4611      	mov	r1, r2
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	70fb      	strb	r3, [r7, #3]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	70bb      	strb	r3, [r7, #2]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d2ae:	7878      	ldrb	r0, [r7, #1]
 800d2b0:	78ba      	ldrb	r2, [r7, #2]
 800d2b2:	78f9      	ldrb	r1, [r7, #3]
 800d2b4:	8b3b      	ldrh	r3, [r7, #24]
 800d2b6:	9302      	str	r3, [sp, #8]
 800d2b8:	7d3b      	ldrb	r3, [r7, #20]
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	7c3b      	ldrb	r3, [r7, #16]
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fa53 	bl	800d76e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b082      	sub	sp, #8
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	460b      	mov	r3, r1
 800d2dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d2de:	78fb      	ldrb	r3, [r7, #3]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fa72 	bl	800d7cc <USBH_LL_ClosePipe>

  return USBH_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f836 	bl	800d370 <USBH_GetFreePipe>
 800d304:	4603      	mov	r3, r0
 800d306:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d308:	89fb      	ldrh	r3, [r7, #14]
 800d30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00a      	beq.n	800d328 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d312:	78fa      	ldrb	r2, [r7, #3]
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	f003 030f 	and.w	r3, r3, #15
 800d31a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d31e:	6879      	ldr	r1, [r7, #4]
 800d320:	33e0      	adds	r3, #224	; 0xe0
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d328:	89fb      	ldrh	r3, [r7, #14]
 800d32a:	b2db      	uxtb	r3, r3
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	2b0f      	cmp	r3, #15
 800d344:	d80d      	bhi.n	800d362 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d346:	78fb      	ldrb	r3, [r7, #3]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	33e0      	adds	r3, #224	; 0xe0
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	33e0      	adds	r3, #224	; 0xe0
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	440b      	add	r3, r1
 800d360:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]
 800d380:	e00f      	b.n	800d3a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	33e0      	adds	r3, #224	; 0xe0
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d102      	bne.n	800d39c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	e007      	b.n	800d3ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	73fb      	strb	r3, [r7, #15]
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b0f      	cmp	r3, #15
 800d3a6:	d9ec      	bls.n	800d382 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d3a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d3bc:	2201      	movs	r2, #1
 800d3be:	490e      	ldr	r1, [pc, #56]	; (800d3f8 <MX_USB_HOST_Init+0x40>)
 800d3c0:	480e      	ldr	r0, [pc, #56]	; (800d3fc <MX_USB_HOST_Init+0x44>)
 800d3c2:	f7fe fba5 	bl	800bb10 <USBH_Init>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d3cc:	f7f4 fd08 	bl	8001de0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d3d0:	490b      	ldr	r1, [pc, #44]	; (800d400 <MX_USB_HOST_Init+0x48>)
 800d3d2:	480a      	ldr	r0, [pc, #40]	; (800d3fc <MX_USB_HOST_Init+0x44>)
 800d3d4:	f7fe fc2a 	bl	800bc2c <USBH_RegisterClass>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3de:	f7f4 fcff 	bl	8001de0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3e2:	4806      	ldr	r0, [pc, #24]	; (800d3fc <MX_USB_HOST_Init+0x44>)
 800d3e4:	f7fe fcae 	bl	800bd44 <USBH_Start>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d3ee:	f7f4 fcf7 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d3f2:	bf00      	nop
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	0800d419 	.word	0x0800d419
 800d3fc:	200003c8 	.word	0x200003c8
 800d400:	200000e4 	.word	0x200000e4

0800d404 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d408:	4802      	ldr	r0, [pc, #8]	; (800d414 <MX_USB_HOST_Process+0x10>)
 800d40a:	f7fe fcab 	bl	800bd64 <USBH_Process>
}
 800d40e:	bf00      	nop
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	200003c8 	.word	0x200003c8

0800d418 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	3b01      	subs	r3, #1
 800d428:	2b04      	cmp	r3, #4
 800d42a:	d819      	bhi.n	800d460 <USBH_UserProcess+0x48>
 800d42c:	a201      	add	r2, pc, #4	; (adr r2, 800d434 <USBH_UserProcess+0x1c>)
 800d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d432:	bf00      	nop
 800d434:	0800d461 	.word	0x0800d461
 800d438:	0800d451 	.word	0x0800d451
 800d43c:	0800d461 	.word	0x0800d461
 800d440:	0800d459 	.word	0x0800d459
 800d444:	0800d449 	.word	0x0800d449
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d448:	4b09      	ldr	r3, [pc, #36]	; (800d470 <USBH_UserProcess+0x58>)
 800d44a:	2203      	movs	r2, #3
 800d44c:	701a      	strb	r2, [r3, #0]
  break;
 800d44e:	e008      	b.n	800d462 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d450:	4b07      	ldr	r3, [pc, #28]	; (800d470 <USBH_UserProcess+0x58>)
 800d452:	2202      	movs	r2, #2
 800d454:	701a      	strb	r2, [r3, #0]
  break;
 800d456:	e004      	b.n	800d462 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <USBH_UserProcess+0x58>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	701a      	strb	r2, [r3, #0]
  break;
 800d45e:	e000      	b.n	800d462 <USBH_UserProcess+0x4a>

  default:
  break;
 800d460:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d462:	bf00      	nop
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	200007a0 	.word	0x200007a0

0800d474 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b08a      	sub	sp, #40	; 0x28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d47c:	f107 0314 	add.w	r3, r7, #20
 800d480:	2200      	movs	r2, #0
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	605a      	str	r2, [r3, #4]
 800d486:	609a      	str	r2, [r3, #8]
 800d488:	60da      	str	r2, [r3, #12]
 800d48a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d494:	d147      	bne.n	800d526 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d496:	2300      	movs	r3, #0
 800d498:	613b      	str	r3, [r7, #16]
 800d49a:	4b25      	ldr	r3, [pc, #148]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	4a24      	ldr	r2, [pc, #144]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d4a0:	f043 0301 	orr.w	r3, r3, #1
 800d4a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4a6:	4b22      	ldr	r3, [pc, #136]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d4b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d4c0:	f107 0314 	add.w	r3, r7, #20
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	481b      	ldr	r0, [pc, #108]	; (800d534 <HAL_HCD_MspInit+0xc0>)
 800d4c8:	f7f5 fe98 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d4cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d4d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4de:	230a      	movs	r3, #10
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4e2:	f107 0314 	add.w	r3, r7, #20
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4812      	ldr	r0, [pc, #72]	; (800d534 <HAL_HCD_MspInit+0xc0>)
 800d4ea:	f7f5 fe87 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4ee:	4b10      	ldr	r3, [pc, #64]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f2:	4a0f      	ldr	r2, [pc, #60]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f8:	6353      	str	r3, [r2, #52]	; 0x34
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d502:	4a0b      	ldr	r2, [pc, #44]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d508:	6453      	str	r3, [r2, #68]	; 0x44
 800d50a:	4b09      	ldr	r3, [pc, #36]	; (800d530 <HAL_HCD_MspInit+0xbc>)
 800d50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d516:	2200      	movs	r2, #0
 800d518:	2100      	movs	r1, #0
 800d51a:	2043      	movs	r0, #67	; 0x43
 800d51c:	f7f5 fd89 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d520:	2043      	movs	r0, #67	; 0x43
 800d522:	f7f5 fda2 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d526:	bf00      	nop
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	40023800 	.word	0x40023800
 800d534:	40020000 	.word	0x40020000

0800d538 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe ffeb 	bl	800c522 <USBH_LL_IncTimer>
}
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff f823 	bl	800c5ae <USBH_LL_Connect>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff f82c 	bl	800c5dc <USBH_LL_Disconnect>
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
 800d598:	4613      	mov	r3, r2
 800d59a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe ffdd 	bl	800c576 <USBH_LL_PortEnabled>
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe ffdd 	bl	800c592 <USBH_LL_PortDisabled>
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d12a      	bne.n	800d648 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d5f2:	4a18      	ldr	r2, [pc, #96]	; (800d654 <USBH_LL_Init+0x74>)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a15      	ldr	r2, [pc, #84]	; (800d654 <USBH_LL_Init+0x74>)
 800d5fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d602:	4b14      	ldr	r3, [pc, #80]	; (800d654 <USBH_LL_Init+0x74>)
 800d604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d608:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <USBH_LL_Init+0x74>)
 800d60c:	2208      	movs	r2, #8
 800d60e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d610:	4b10      	ldr	r3, [pc, #64]	; (800d654 <USBH_LL_Init+0x74>)
 800d612:	2201      	movs	r2, #1
 800d614:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d616:	4b0f      	ldr	r3, [pc, #60]	; (800d654 <USBH_LL_Init+0x74>)
 800d618:	2200      	movs	r2, #0
 800d61a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d61c:	4b0d      	ldr	r3, [pc, #52]	; (800d654 <USBH_LL_Init+0x74>)
 800d61e:	2202      	movs	r2, #2
 800d620:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d622:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <USBH_LL_Init+0x74>)
 800d624:	2200      	movs	r2, #0
 800d626:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d628:	480a      	ldr	r0, [pc, #40]	; (800d654 <USBH_LL_Init+0x74>)
 800d62a:	f7f6 f868 	bl	80036fe <HAL_HCD_Init>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d634:	f7f4 fbd4 	bl	8001de0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d638:	4806      	ldr	r0, [pc, #24]	; (800d654 <USBH_LL_Init+0x74>)
 800d63a:	f7f6 fc4c 	bl	8003ed6 <HAL_HCD_GetCurrentFrame>
 800d63e:	4603      	mov	r3, r0
 800d640:	4619      	mov	r1, r3
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7fe ff5e 	bl	800c504 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	200007a4 	.word	0x200007a4

0800d658 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d66e:	4618      	mov	r0, r3
 800d670:	f7f6 fbbb 	bl	8003dea <HAL_HCD_Start>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 f95c 	bl	800d938 <USBH_Get_USB_Status>
 800d680:	4603      	mov	r3, r0
 800d682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d684:	7bbb      	ldrb	r3, [r7, #14]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7f6 fbc3 	bl	8003e30 <HAL_HCD_Stop>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 f941 	bl	800d938 <USBH_Get_USB_Status>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f6 fc0b 	bl	8003ef2 <HAL_HCD_GetCurrentSpeed>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d00c      	beq.n	800d6fc <USBH_LL_GetSpeed+0x38>
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d80d      	bhi.n	800d702 <USBH_LL_GetSpeed+0x3e>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <USBH_LL_GetSpeed+0x2c>
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d003      	beq.n	800d6f6 <USBH_LL_GetSpeed+0x32>
 800d6ee:	e008      	b.n	800d702 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f4:	e008      	b.n	800d708 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fa:	e005      	b.n	800d708 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d700:	e002      	b.n	800d708 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d702:	2301      	movs	r3, #1
 800d704:	73fb      	strb	r3, [r7, #15]
    break;
 800d706:	bf00      	nop
  }
  return  speed;
 800d708:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d728:	4618      	mov	r0, r3
 800d72a:	f7f6 fb9e 	bl	8003e6a <HAL_HCD_ResetPort>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	4618      	mov	r0, r3
 800d736:	f000 f8ff 	bl	800d938 <USBH_Get_USB_Status>
 800d73a:	4603      	mov	r3, r0
 800d73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	460b      	mov	r3, r1
 800d752:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d75a:	78fa      	ldrb	r2, [r7, #3]
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7f6 fba5 	bl	8003eae <HAL_HCD_HC_GetXferCount>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d76e:	b590      	push	{r4, r7, lr}
 800d770:	b089      	sub	sp, #36	; 0x24
 800d772:	af04      	add	r7, sp, #16
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	4608      	mov	r0, r1
 800d778:	4611      	mov	r1, r2
 800d77a:	461a      	mov	r2, r3
 800d77c:	4603      	mov	r3, r0
 800d77e:	70fb      	strb	r3, [r7, #3]
 800d780:	460b      	mov	r3, r1
 800d782:	70bb      	strb	r3, [r7, #2]
 800d784:	4613      	mov	r3, r2
 800d786:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d796:	787c      	ldrb	r4, [r7, #1]
 800d798:	78ba      	ldrb	r2, [r7, #2]
 800d79a:	78f9      	ldrb	r1, [r7, #3]
 800d79c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d79e:	9302      	str	r3, [sp, #8]
 800d7a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	f7f6 f808 	bl	80037c2 <HAL_HCD_HC_Init>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7b6:	7bfb      	ldrb	r3, [r7, #15]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f8bd 	bl	800d938 <USBH_Get_USB_Status>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd90      	pop	{r4, r7, pc}

0800d7cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7e6:	78fa      	ldrb	r2, [r7, #3]
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7f6 f878 	bl	80038e0 <HAL_HCD_HC_Halt>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 f89e 	bl	800d938 <USBH_Get_USB_Status>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d800:	7bbb      	ldrb	r3, [r7, #14]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d80a:	b590      	push	{r4, r7, lr}
 800d80c:	b089      	sub	sp, #36	; 0x24
 800d80e:	af04      	add	r7, sp, #16
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	4608      	mov	r0, r1
 800d814:	4611      	mov	r1, r2
 800d816:	461a      	mov	r2, r3
 800d818:	4603      	mov	r3, r0
 800d81a:	70fb      	strb	r3, [r7, #3]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70bb      	strb	r3, [r7, #2]
 800d820:	4613      	mov	r3, r2
 800d822:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d832:	787c      	ldrb	r4, [r7, #1]
 800d834:	78ba      	ldrb	r2, [r7, #2]
 800d836:	78f9      	ldrb	r1, [r7, #3]
 800d838:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d83c:	9303      	str	r3, [sp, #12]
 800d83e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d840:	9302      	str	r3, [sp, #8]
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	4623      	mov	r3, r4
 800d84e:	f7f6 f86b 	bl	8003928 <HAL_HCD_HC_SubmitRequest>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d856:	7bfb      	ldrb	r3, [r7, #15]
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 f86d 	bl	800d938 <USBH_Get_USB_Status>
 800d85e:	4603      	mov	r3, r0
 800d860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d862:	7bbb      	ldrb	r3, [r7, #14]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	460b      	mov	r3, r1
 800d876:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d87e:	78fa      	ldrb	r2, [r7, #3]
 800d880:	4611      	mov	r1, r2
 800d882:	4618      	mov	r0, r3
 800d884:	f7f6 faff 	bl	8003e86 <HAL_HCD_HC_GetURBState>
 800d888:	4603      	mov	r3, r0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d103      	bne.n	800d8b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d8a8:	78fb      	ldrb	r3, [r7, #3]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 f870 	bl	800d990 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d8b0:	20c8      	movs	r0, #200	; 0xc8
 800d8b2:	f7f5 fa9b 	bl	8002dec <HAL_Delay>
  return USBH_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	212c      	movs	r1, #44	; 0x2c
 800d8de:	fb01 f303 	mul.w	r3, r1, r3
 800d8e2:	4413      	add	r3, r2
 800d8e4:	333b      	adds	r3, #59	; 0x3b
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d009      	beq.n	800d900 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d8ec:	78fb      	ldrb	r3, [r7, #3]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	212c      	movs	r1, #44	; 0x2c
 800d8f2:	fb01 f303 	mul.w	r3, r1, r3
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3354      	adds	r3, #84	; 0x54
 800d8fa:	78ba      	ldrb	r2, [r7, #2]
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	e008      	b.n	800d912 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d900:	78fb      	ldrb	r3, [r7, #3]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	212c      	movs	r1, #44	; 0x2c
 800d906:	fb01 f303 	mul.w	r3, r1, r3
 800d90a:	4413      	add	r3, r2
 800d90c:	3355      	adds	r3, #85	; 0x55
 800d90e:	78ba      	ldrb	r2, [r7, #2]
 800d910:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3714      	adds	r7, #20
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7f5 fa5f 	bl	8002dec <HAL_Delay>
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
	...

0800d938 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d817      	bhi.n	800d97c <USBH_Get_USB_Status+0x44>
 800d94c:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <USBH_Get_USB_Status+0x1c>)
 800d94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d952:	bf00      	nop
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800d96b 	.word	0x0800d96b
 800d95c:	0800d971 	.word	0x0800d971
 800d960:	0800d977 	.word	0x0800d977
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
    break;
 800d968:	e00b      	b.n	800d982 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d96a:	2302      	movs	r3, #2
 800d96c:	73fb      	strb	r3, [r7, #15]
    break;
 800d96e:	e008      	b.n	800d982 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d970:	2301      	movs	r3, #1
 800d972:	73fb      	strb	r3, [r7, #15]
    break;
 800d974:	e005      	b.n	800d982 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d976:	2302      	movs	r3, #2
 800d978:	73fb      	strb	r3, [r7, #15]
    break;
 800d97a:	e002      	b.n	800d982 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d97c:	2302      	movs	r3, #2
 800d97e:	73fb      	strb	r3, [r7, #15]
    break;
 800d980:	bf00      	nop
  }
  return usb_status;
 800d982:	7bfb      	ldrb	r3, [r7, #15]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	73fb      	strb	r3, [r7, #15]
 800d9a8:	e001      	b.n	800d9ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	4803      	ldr	r0, [pc, #12]	; (800d9c4 <MX_DriverVbusFS+0x34>)
 800d9b6:	f7f5 fe89 	bl	80036cc <HAL_GPIO_WritePin>
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	40020800 	.word	0x40020800

0800d9c8 <malloc>:
 800d9c8:	4b02      	ldr	r3, [pc, #8]	; (800d9d4 <malloc+0xc>)
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	6818      	ldr	r0, [r3, #0]
 800d9ce:	f000 b82b 	b.w	800da28 <_malloc_r>
 800d9d2:	bf00      	nop
 800d9d4:	20000150 	.word	0x20000150

0800d9d8 <free>:
 800d9d8:	4b02      	ldr	r3, [pc, #8]	; (800d9e4 <free+0xc>)
 800d9da:	4601      	mov	r1, r0
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f000 b913 	b.w	800dc08 <_free_r>
 800d9e2:	bf00      	nop
 800d9e4:	20000150 	.word	0x20000150

0800d9e8 <sbrk_aligned>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	4e0e      	ldr	r6, [pc, #56]	; (800da24 <sbrk_aligned+0x3c>)
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	6831      	ldr	r1, [r6, #0]
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	b911      	cbnz	r1, 800d9fa <sbrk_aligned+0x12>
 800d9f4:	f000 f8cc 	bl	800db90 <_sbrk_r>
 800d9f8:	6030      	str	r0, [r6, #0]
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f000 f8c7 	bl	800db90 <_sbrk_r>
 800da02:	1c43      	adds	r3, r0, #1
 800da04:	d00a      	beq.n	800da1c <sbrk_aligned+0x34>
 800da06:	1cc4      	adds	r4, r0, #3
 800da08:	f024 0403 	bic.w	r4, r4, #3
 800da0c:	42a0      	cmp	r0, r4
 800da0e:	d007      	beq.n	800da20 <sbrk_aligned+0x38>
 800da10:	1a21      	subs	r1, r4, r0
 800da12:	4628      	mov	r0, r5
 800da14:	f000 f8bc 	bl	800db90 <_sbrk_r>
 800da18:	3001      	adds	r0, #1
 800da1a:	d101      	bne.n	800da20 <sbrk_aligned+0x38>
 800da1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800da20:	4620      	mov	r0, r4
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	20000aac 	.word	0x20000aac

0800da28 <_malloc_r>:
 800da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da2c:	1ccd      	adds	r5, r1, #3
 800da2e:	f025 0503 	bic.w	r5, r5, #3
 800da32:	3508      	adds	r5, #8
 800da34:	2d0c      	cmp	r5, #12
 800da36:	bf38      	it	cc
 800da38:	250c      	movcc	r5, #12
 800da3a:	2d00      	cmp	r5, #0
 800da3c:	4607      	mov	r7, r0
 800da3e:	db01      	blt.n	800da44 <_malloc_r+0x1c>
 800da40:	42a9      	cmp	r1, r5
 800da42:	d905      	bls.n	800da50 <_malloc_r+0x28>
 800da44:	230c      	movs	r3, #12
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	2600      	movs	r6, #0
 800da4a:	4630      	mov	r0, r6
 800da4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800db24 <_malloc_r+0xfc>
 800da54:	f000 f868 	bl	800db28 <__malloc_lock>
 800da58:	f8d8 3000 	ldr.w	r3, [r8]
 800da5c:	461c      	mov	r4, r3
 800da5e:	bb5c      	cbnz	r4, 800dab8 <_malloc_r+0x90>
 800da60:	4629      	mov	r1, r5
 800da62:	4638      	mov	r0, r7
 800da64:	f7ff ffc0 	bl	800d9e8 <sbrk_aligned>
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	4604      	mov	r4, r0
 800da6c:	d155      	bne.n	800db1a <_malloc_r+0xf2>
 800da6e:	f8d8 4000 	ldr.w	r4, [r8]
 800da72:	4626      	mov	r6, r4
 800da74:	2e00      	cmp	r6, #0
 800da76:	d145      	bne.n	800db04 <_malloc_r+0xdc>
 800da78:	2c00      	cmp	r4, #0
 800da7a:	d048      	beq.n	800db0e <_malloc_r+0xe6>
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	4631      	mov	r1, r6
 800da80:	4638      	mov	r0, r7
 800da82:	eb04 0903 	add.w	r9, r4, r3
 800da86:	f000 f883 	bl	800db90 <_sbrk_r>
 800da8a:	4581      	cmp	r9, r0
 800da8c:	d13f      	bne.n	800db0e <_malloc_r+0xe6>
 800da8e:	6821      	ldr	r1, [r4, #0]
 800da90:	1a6d      	subs	r5, r5, r1
 800da92:	4629      	mov	r1, r5
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff ffa7 	bl	800d9e8 <sbrk_aligned>
 800da9a:	3001      	adds	r0, #1
 800da9c:	d037      	beq.n	800db0e <_malloc_r+0xe6>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	442b      	add	r3, r5
 800daa2:	6023      	str	r3, [r4, #0]
 800daa4:	f8d8 3000 	ldr.w	r3, [r8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d038      	beq.n	800db1e <_malloc_r+0xf6>
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	42a2      	cmp	r2, r4
 800dab0:	d12b      	bne.n	800db0a <_malloc_r+0xe2>
 800dab2:	2200      	movs	r2, #0
 800dab4:	605a      	str	r2, [r3, #4]
 800dab6:	e00f      	b.n	800dad8 <_malloc_r+0xb0>
 800dab8:	6822      	ldr	r2, [r4, #0]
 800daba:	1b52      	subs	r2, r2, r5
 800dabc:	d41f      	bmi.n	800dafe <_malloc_r+0xd6>
 800dabe:	2a0b      	cmp	r2, #11
 800dac0:	d917      	bls.n	800daf2 <_malloc_r+0xca>
 800dac2:	1961      	adds	r1, r4, r5
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	6025      	str	r5, [r4, #0]
 800dac8:	bf18      	it	ne
 800daca:	6059      	strne	r1, [r3, #4]
 800dacc:	6863      	ldr	r3, [r4, #4]
 800dace:	bf08      	it	eq
 800dad0:	f8c8 1000 	streq.w	r1, [r8]
 800dad4:	5162      	str	r2, [r4, r5]
 800dad6:	604b      	str	r3, [r1, #4]
 800dad8:	4638      	mov	r0, r7
 800dada:	f104 060b 	add.w	r6, r4, #11
 800dade:	f000 f829 	bl	800db34 <__malloc_unlock>
 800dae2:	f026 0607 	bic.w	r6, r6, #7
 800dae6:	1d23      	adds	r3, r4, #4
 800dae8:	1af2      	subs	r2, r6, r3
 800daea:	d0ae      	beq.n	800da4a <_malloc_r+0x22>
 800daec:	1b9b      	subs	r3, r3, r6
 800daee:	50a3      	str	r3, [r4, r2]
 800daf0:	e7ab      	b.n	800da4a <_malloc_r+0x22>
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	6862      	ldr	r2, [r4, #4]
 800daf6:	d1dd      	bne.n	800dab4 <_malloc_r+0x8c>
 800daf8:	f8c8 2000 	str.w	r2, [r8]
 800dafc:	e7ec      	b.n	800dad8 <_malloc_r+0xb0>
 800dafe:	4623      	mov	r3, r4
 800db00:	6864      	ldr	r4, [r4, #4]
 800db02:	e7ac      	b.n	800da5e <_malloc_r+0x36>
 800db04:	4634      	mov	r4, r6
 800db06:	6876      	ldr	r6, [r6, #4]
 800db08:	e7b4      	b.n	800da74 <_malloc_r+0x4c>
 800db0a:	4613      	mov	r3, r2
 800db0c:	e7cc      	b.n	800daa8 <_malloc_r+0x80>
 800db0e:	230c      	movs	r3, #12
 800db10:	603b      	str	r3, [r7, #0]
 800db12:	4638      	mov	r0, r7
 800db14:	f000 f80e 	bl	800db34 <__malloc_unlock>
 800db18:	e797      	b.n	800da4a <_malloc_r+0x22>
 800db1a:	6025      	str	r5, [r4, #0]
 800db1c:	e7dc      	b.n	800dad8 <_malloc_r+0xb0>
 800db1e:	605b      	str	r3, [r3, #4]
 800db20:	deff      	udf	#255	; 0xff
 800db22:	bf00      	nop
 800db24:	20000aa8 	.word	0x20000aa8

0800db28 <__malloc_lock>:
 800db28:	4801      	ldr	r0, [pc, #4]	; (800db30 <__malloc_lock+0x8>)
 800db2a:	f000 b86b 	b.w	800dc04 <__retarget_lock_acquire_recursive>
 800db2e:	bf00      	nop
 800db30:	20000be8 	.word	0x20000be8

0800db34 <__malloc_unlock>:
 800db34:	4801      	ldr	r0, [pc, #4]	; (800db3c <__malloc_unlock+0x8>)
 800db36:	f000 b866 	b.w	800dc06 <__retarget_lock_release_recursive>
 800db3a:	bf00      	nop
 800db3c:	20000be8 	.word	0x20000be8

0800db40 <siprintf>:
 800db40:	b40e      	push	{r1, r2, r3}
 800db42:	b500      	push	{lr}
 800db44:	b09c      	sub	sp, #112	; 0x70
 800db46:	ab1d      	add	r3, sp, #116	; 0x74
 800db48:	9002      	str	r0, [sp, #8]
 800db4a:	9006      	str	r0, [sp, #24]
 800db4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db50:	4809      	ldr	r0, [pc, #36]	; (800db78 <siprintf+0x38>)
 800db52:	9107      	str	r1, [sp, #28]
 800db54:	9104      	str	r1, [sp, #16]
 800db56:	4909      	ldr	r1, [pc, #36]	; (800db7c <siprintf+0x3c>)
 800db58:	f853 2b04 	ldr.w	r2, [r3], #4
 800db5c:	9105      	str	r1, [sp, #20]
 800db5e:	6800      	ldr	r0, [r0, #0]
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	a902      	add	r1, sp, #8
 800db64:	f000 f8f6 	bl	800dd54 <_svfiprintf_r>
 800db68:	9b02      	ldr	r3, [sp, #8]
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	b01c      	add	sp, #112	; 0x70
 800db70:	f85d eb04 	ldr.w	lr, [sp], #4
 800db74:	b003      	add	sp, #12
 800db76:	4770      	bx	lr
 800db78:	20000150 	.word	0x20000150
 800db7c:	ffff0208 	.word	0xffff0208

0800db80 <memset>:
 800db80:	4402      	add	r2, r0
 800db82:	4603      	mov	r3, r0
 800db84:	4293      	cmp	r3, r2
 800db86:	d100      	bne.n	800db8a <memset+0xa>
 800db88:	4770      	bx	lr
 800db8a:	f803 1b01 	strb.w	r1, [r3], #1
 800db8e:	e7f9      	b.n	800db84 <memset+0x4>

0800db90 <_sbrk_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d06      	ldr	r5, [pc, #24]	; (800dbac <_sbrk_r+0x1c>)
 800db94:	2300      	movs	r3, #0
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	602b      	str	r3, [r5, #0]
 800db9c:	f7f5 f842 	bl	8002c24 <_sbrk>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_sbrk_r+0x1a>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_sbrk_r+0x1a>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	20000bec 	.word	0x20000bec

0800dbb0 <__errno>:
 800dbb0:	4b01      	ldr	r3, [pc, #4]	; (800dbb8 <__errno+0x8>)
 800dbb2:	6818      	ldr	r0, [r3, #0]
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20000150 	.word	0x20000150

0800dbbc <__libc_init_array>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	4d0d      	ldr	r5, [pc, #52]	; (800dbf4 <__libc_init_array+0x38>)
 800dbc0:	4c0d      	ldr	r4, [pc, #52]	; (800dbf8 <__libc_init_array+0x3c>)
 800dbc2:	1b64      	subs	r4, r4, r5
 800dbc4:	10a4      	asrs	r4, r4, #2
 800dbc6:	2600      	movs	r6, #0
 800dbc8:	42a6      	cmp	r6, r4
 800dbca:	d109      	bne.n	800dbe0 <__libc_init_array+0x24>
 800dbcc:	4d0b      	ldr	r5, [pc, #44]	; (800dbfc <__libc_init_array+0x40>)
 800dbce:	4c0c      	ldr	r4, [pc, #48]	; (800dc00 <__libc_init_array+0x44>)
 800dbd0:	f000 fbae 	bl	800e330 <_init>
 800dbd4:	1b64      	subs	r4, r4, r5
 800dbd6:	10a4      	asrs	r4, r4, #2
 800dbd8:	2600      	movs	r6, #0
 800dbda:	42a6      	cmp	r6, r4
 800dbdc:	d105      	bne.n	800dbea <__libc_init_array+0x2e>
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe4:	4798      	blx	r3
 800dbe6:	3601      	adds	r6, #1
 800dbe8:	e7ee      	b.n	800dbc8 <__libc_init_array+0xc>
 800dbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbee:	4798      	blx	r3
 800dbf0:	3601      	adds	r6, #1
 800dbf2:	e7f2      	b.n	800dbda <__libc_init_array+0x1e>
 800dbf4:	0800e3cc 	.word	0x0800e3cc
 800dbf8:	0800e3cc 	.word	0x0800e3cc
 800dbfc:	0800e3cc 	.word	0x0800e3cc
 800dc00:	0800e3d0 	.word	0x0800e3d0

0800dc04 <__retarget_lock_acquire_recursive>:
 800dc04:	4770      	bx	lr

0800dc06 <__retarget_lock_release_recursive>:
 800dc06:	4770      	bx	lr

0800dc08 <_free_r>:
 800dc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc0a:	2900      	cmp	r1, #0
 800dc0c:	d044      	beq.n	800dc98 <_free_r+0x90>
 800dc0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc12:	9001      	str	r0, [sp, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f1a1 0404 	sub.w	r4, r1, #4
 800dc1a:	bfb8      	it	lt
 800dc1c:	18e4      	addlt	r4, r4, r3
 800dc1e:	f7ff ff83 	bl	800db28 <__malloc_lock>
 800dc22:	4a1e      	ldr	r2, [pc, #120]	; (800dc9c <_free_r+0x94>)
 800dc24:	9801      	ldr	r0, [sp, #4]
 800dc26:	6813      	ldr	r3, [r2, #0]
 800dc28:	b933      	cbnz	r3, 800dc38 <_free_r+0x30>
 800dc2a:	6063      	str	r3, [r4, #4]
 800dc2c:	6014      	str	r4, [r2, #0]
 800dc2e:	b003      	add	sp, #12
 800dc30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc34:	f7ff bf7e 	b.w	800db34 <__malloc_unlock>
 800dc38:	42a3      	cmp	r3, r4
 800dc3a:	d908      	bls.n	800dc4e <_free_r+0x46>
 800dc3c:	6825      	ldr	r5, [r4, #0]
 800dc3e:	1961      	adds	r1, r4, r5
 800dc40:	428b      	cmp	r3, r1
 800dc42:	bf01      	itttt	eq
 800dc44:	6819      	ldreq	r1, [r3, #0]
 800dc46:	685b      	ldreq	r3, [r3, #4]
 800dc48:	1949      	addeq	r1, r1, r5
 800dc4a:	6021      	streq	r1, [r4, #0]
 800dc4c:	e7ed      	b.n	800dc2a <_free_r+0x22>
 800dc4e:	461a      	mov	r2, r3
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	b10b      	cbz	r3, 800dc58 <_free_r+0x50>
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	d9fa      	bls.n	800dc4e <_free_r+0x46>
 800dc58:	6811      	ldr	r1, [r2, #0]
 800dc5a:	1855      	adds	r5, r2, r1
 800dc5c:	42a5      	cmp	r5, r4
 800dc5e:	d10b      	bne.n	800dc78 <_free_r+0x70>
 800dc60:	6824      	ldr	r4, [r4, #0]
 800dc62:	4421      	add	r1, r4
 800dc64:	1854      	adds	r4, r2, r1
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	6011      	str	r1, [r2, #0]
 800dc6a:	d1e0      	bne.n	800dc2e <_free_r+0x26>
 800dc6c:	681c      	ldr	r4, [r3, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	6053      	str	r3, [r2, #4]
 800dc72:	440c      	add	r4, r1
 800dc74:	6014      	str	r4, [r2, #0]
 800dc76:	e7da      	b.n	800dc2e <_free_r+0x26>
 800dc78:	d902      	bls.n	800dc80 <_free_r+0x78>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	e7d6      	b.n	800dc2e <_free_r+0x26>
 800dc80:	6825      	ldr	r5, [r4, #0]
 800dc82:	1961      	adds	r1, r4, r5
 800dc84:	428b      	cmp	r3, r1
 800dc86:	bf04      	itt	eq
 800dc88:	6819      	ldreq	r1, [r3, #0]
 800dc8a:	685b      	ldreq	r3, [r3, #4]
 800dc8c:	6063      	str	r3, [r4, #4]
 800dc8e:	bf04      	itt	eq
 800dc90:	1949      	addeq	r1, r1, r5
 800dc92:	6021      	streq	r1, [r4, #0]
 800dc94:	6054      	str	r4, [r2, #4]
 800dc96:	e7ca      	b.n	800dc2e <_free_r+0x26>
 800dc98:	b003      	add	sp, #12
 800dc9a:	bd30      	pop	{r4, r5, pc}
 800dc9c:	20000aa8 	.word	0x20000aa8

0800dca0 <__ssputs_r>:
 800dca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca4:	688e      	ldr	r6, [r1, #8]
 800dca6:	461f      	mov	r7, r3
 800dca8:	42be      	cmp	r6, r7
 800dcaa:	680b      	ldr	r3, [r1, #0]
 800dcac:	4682      	mov	sl, r0
 800dcae:	460c      	mov	r4, r1
 800dcb0:	4690      	mov	r8, r2
 800dcb2:	d82c      	bhi.n	800dd0e <__ssputs_r+0x6e>
 800dcb4:	898a      	ldrh	r2, [r1, #12]
 800dcb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcba:	d026      	beq.n	800dd0a <__ssputs_r+0x6a>
 800dcbc:	6965      	ldr	r5, [r4, #20]
 800dcbe:	6909      	ldr	r1, [r1, #16]
 800dcc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcc4:	eba3 0901 	sub.w	r9, r3, r1
 800dcc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dccc:	1c7b      	adds	r3, r7, #1
 800dcce:	444b      	add	r3, r9
 800dcd0:	106d      	asrs	r5, r5, #1
 800dcd2:	429d      	cmp	r5, r3
 800dcd4:	bf38      	it	cc
 800dcd6:	461d      	movcc	r5, r3
 800dcd8:	0553      	lsls	r3, r2, #21
 800dcda:	d527      	bpl.n	800dd2c <__ssputs_r+0x8c>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	f7ff fea3 	bl	800da28 <_malloc_r>
 800dce2:	4606      	mov	r6, r0
 800dce4:	b360      	cbz	r0, 800dd40 <__ssputs_r+0xa0>
 800dce6:	6921      	ldr	r1, [r4, #16]
 800dce8:	464a      	mov	r2, r9
 800dcea:	f000 fb0a 	bl	800e302 <memcpy>
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	6126      	str	r6, [r4, #16]
 800dcfc:	6165      	str	r5, [r4, #20]
 800dcfe:	444e      	add	r6, r9
 800dd00:	eba5 0509 	sub.w	r5, r5, r9
 800dd04:	6026      	str	r6, [r4, #0]
 800dd06:	60a5      	str	r5, [r4, #8]
 800dd08:	463e      	mov	r6, r7
 800dd0a:	42be      	cmp	r6, r7
 800dd0c:	d900      	bls.n	800dd10 <__ssputs_r+0x70>
 800dd0e:	463e      	mov	r6, r7
 800dd10:	6820      	ldr	r0, [r4, #0]
 800dd12:	4632      	mov	r2, r6
 800dd14:	4641      	mov	r1, r8
 800dd16:	f000 fada 	bl	800e2ce <memmove>
 800dd1a:	68a3      	ldr	r3, [r4, #8]
 800dd1c:	1b9b      	subs	r3, r3, r6
 800dd1e:	60a3      	str	r3, [r4, #8]
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	4433      	add	r3, r6
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	2000      	movs	r0, #0
 800dd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	f000 fa9f 	bl	800e270 <_realloc_r>
 800dd32:	4606      	mov	r6, r0
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d1e0      	bne.n	800dcfa <__ssputs_r+0x5a>
 800dd38:	6921      	ldr	r1, [r4, #16]
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	f7ff ff64 	bl	800dc08 <_free_r>
 800dd40:	230c      	movs	r3, #12
 800dd42:	f8ca 3000 	str.w	r3, [sl]
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd52:	e7e9      	b.n	800dd28 <__ssputs_r+0x88>

0800dd54 <_svfiprintf_r>:
 800dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd58:	4698      	mov	r8, r3
 800dd5a:	898b      	ldrh	r3, [r1, #12]
 800dd5c:	061b      	lsls	r3, r3, #24
 800dd5e:	b09d      	sub	sp, #116	; 0x74
 800dd60:	4607      	mov	r7, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	4614      	mov	r4, r2
 800dd66:	d50e      	bpl.n	800dd86 <_svfiprintf_r+0x32>
 800dd68:	690b      	ldr	r3, [r1, #16]
 800dd6a:	b963      	cbnz	r3, 800dd86 <_svfiprintf_r+0x32>
 800dd6c:	2140      	movs	r1, #64	; 0x40
 800dd6e:	f7ff fe5b 	bl	800da28 <_malloc_r>
 800dd72:	6028      	str	r0, [r5, #0]
 800dd74:	6128      	str	r0, [r5, #16]
 800dd76:	b920      	cbnz	r0, 800dd82 <_svfiprintf_r+0x2e>
 800dd78:	230c      	movs	r3, #12
 800dd7a:	603b      	str	r3, [r7, #0]
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd80:	e0d0      	b.n	800df24 <_svfiprintf_r+0x1d0>
 800dd82:	2340      	movs	r3, #64	; 0x40
 800dd84:	616b      	str	r3, [r5, #20]
 800dd86:	2300      	movs	r3, #0
 800dd88:	9309      	str	r3, [sp, #36]	; 0x24
 800dd8a:	2320      	movs	r3, #32
 800dd8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd90:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd94:	2330      	movs	r3, #48	; 0x30
 800dd96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800df3c <_svfiprintf_r+0x1e8>
 800dd9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd9e:	f04f 0901 	mov.w	r9, #1
 800dda2:	4623      	mov	r3, r4
 800dda4:	469a      	mov	sl, r3
 800dda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddaa:	b10a      	cbz	r2, 800ddb0 <_svfiprintf_r+0x5c>
 800ddac:	2a25      	cmp	r2, #37	; 0x25
 800ddae:	d1f9      	bne.n	800dda4 <_svfiprintf_r+0x50>
 800ddb0:	ebba 0b04 	subs.w	fp, sl, r4
 800ddb4:	d00b      	beq.n	800ddce <_svfiprintf_r+0x7a>
 800ddb6:	465b      	mov	r3, fp
 800ddb8:	4622      	mov	r2, r4
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4638      	mov	r0, r7
 800ddbe:	f7ff ff6f 	bl	800dca0 <__ssputs_r>
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	f000 80a9 	beq.w	800df1a <_svfiprintf_r+0x1c6>
 800ddc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddca:	445a      	add	r2, fp
 800ddcc:	9209      	str	r2, [sp, #36]	; 0x24
 800ddce:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 80a1 	beq.w	800df1a <_svfiprintf_r+0x1c6>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dde2:	f10a 0a01 	add.w	sl, sl, #1
 800dde6:	9304      	str	r3, [sp, #16]
 800dde8:	9307      	str	r3, [sp, #28]
 800ddea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddee:	931a      	str	r3, [sp, #104]	; 0x68
 800ddf0:	4654      	mov	r4, sl
 800ddf2:	2205      	movs	r2, #5
 800ddf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf8:	4850      	ldr	r0, [pc, #320]	; (800df3c <_svfiprintf_r+0x1e8>)
 800ddfa:	f7f2 f9f9 	bl	80001f0 <memchr>
 800ddfe:	9a04      	ldr	r2, [sp, #16]
 800de00:	b9d8      	cbnz	r0, 800de3a <_svfiprintf_r+0xe6>
 800de02:	06d0      	lsls	r0, r2, #27
 800de04:	bf44      	itt	mi
 800de06:	2320      	movmi	r3, #32
 800de08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de0c:	0711      	lsls	r1, r2, #28
 800de0e:	bf44      	itt	mi
 800de10:	232b      	movmi	r3, #43	; 0x2b
 800de12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de16:	f89a 3000 	ldrb.w	r3, [sl]
 800de1a:	2b2a      	cmp	r3, #42	; 0x2a
 800de1c:	d015      	beq.n	800de4a <_svfiprintf_r+0xf6>
 800de1e:	9a07      	ldr	r2, [sp, #28]
 800de20:	4654      	mov	r4, sl
 800de22:	2000      	movs	r0, #0
 800de24:	f04f 0c0a 	mov.w	ip, #10
 800de28:	4621      	mov	r1, r4
 800de2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de2e:	3b30      	subs	r3, #48	; 0x30
 800de30:	2b09      	cmp	r3, #9
 800de32:	d94d      	bls.n	800ded0 <_svfiprintf_r+0x17c>
 800de34:	b1b0      	cbz	r0, 800de64 <_svfiprintf_r+0x110>
 800de36:	9207      	str	r2, [sp, #28]
 800de38:	e014      	b.n	800de64 <_svfiprintf_r+0x110>
 800de3a:	eba0 0308 	sub.w	r3, r0, r8
 800de3e:	fa09 f303 	lsl.w	r3, r9, r3
 800de42:	4313      	orrs	r3, r2
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	46a2      	mov	sl, r4
 800de48:	e7d2      	b.n	800ddf0 <_svfiprintf_r+0x9c>
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	1d19      	adds	r1, r3, #4
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	9103      	str	r1, [sp, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	bfbb      	ittet	lt
 800de56:	425b      	neglt	r3, r3
 800de58:	f042 0202 	orrlt.w	r2, r2, #2
 800de5c:	9307      	strge	r3, [sp, #28]
 800de5e:	9307      	strlt	r3, [sp, #28]
 800de60:	bfb8      	it	lt
 800de62:	9204      	strlt	r2, [sp, #16]
 800de64:	7823      	ldrb	r3, [r4, #0]
 800de66:	2b2e      	cmp	r3, #46	; 0x2e
 800de68:	d10c      	bne.n	800de84 <_svfiprintf_r+0x130>
 800de6a:	7863      	ldrb	r3, [r4, #1]
 800de6c:	2b2a      	cmp	r3, #42	; 0x2a
 800de6e:	d134      	bne.n	800deda <_svfiprintf_r+0x186>
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	1d1a      	adds	r2, r3, #4
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	9203      	str	r2, [sp, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	bfb8      	it	lt
 800de7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de80:	3402      	adds	r4, #2
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800df4c <_svfiprintf_r+0x1f8>
 800de88:	7821      	ldrb	r1, [r4, #0]
 800de8a:	2203      	movs	r2, #3
 800de8c:	4650      	mov	r0, sl
 800de8e:	f7f2 f9af 	bl	80001f0 <memchr>
 800de92:	b138      	cbz	r0, 800dea4 <_svfiprintf_r+0x150>
 800de94:	9b04      	ldr	r3, [sp, #16]
 800de96:	eba0 000a 	sub.w	r0, r0, sl
 800de9a:	2240      	movs	r2, #64	; 0x40
 800de9c:	4082      	lsls	r2, r0
 800de9e:	4313      	orrs	r3, r2
 800dea0:	3401      	adds	r4, #1
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea8:	4825      	ldr	r0, [pc, #148]	; (800df40 <_svfiprintf_r+0x1ec>)
 800deaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deae:	2206      	movs	r2, #6
 800deb0:	f7f2 f99e 	bl	80001f0 <memchr>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d038      	beq.n	800df2a <_svfiprintf_r+0x1d6>
 800deb8:	4b22      	ldr	r3, [pc, #136]	; (800df44 <_svfiprintf_r+0x1f0>)
 800deba:	bb1b      	cbnz	r3, 800df04 <_svfiprintf_r+0x1b0>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	3307      	adds	r3, #7
 800dec0:	f023 0307 	bic.w	r3, r3, #7
 800dec4:	3308      	adds	r3, #8
 800dec6:	9303      	str	r3, [sp, #12]
 800dec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deca:	4433      	add	r3, r6
 800decc:	9309      	str	r3, [sp, #36]	; 0x24
 800dece:	e768      	b.n	800dda2 <_svfiprintf_r+0x4e>
 800ded0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ded4:	460c      	mov	r4, r1
 800ded6:	2001      	movs	r0, #1
 800ded8:	e7a6      	b.n	800de28 <_svfiprintf_r+0xd4>
 800deda:	2300      	movs	r3, #0
 800dedc:	3401      	adds	r4, #1
 800dede:	9305      	str	r3, [sp, #20]
 800dee0:	4619      	mov	r1, r3
 800dee2:	f04f 0c0a 	mov.w	ip, #10
 800dee6:	4620      	mov	r0, r4
 800dee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deec:	3a30      	subs	r2, #48	; 0x30
 800deee:	2a09      	cmp	r2, #9
 800def0:	d903      	bls.n	800defa <_svfiprintf_r+0x1a6>
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0c6      	beq.n	800de84 <_svfiprintf_r+0x130>
 800def6:	9105      	str	r1, [sp, #20]
 800def8:	e7c4      	b.n	800de84 <_svfiprintf_r+0x130>
 800defa:	fb0c 2101 	mla	r1, ip, r1, r2
 800defe:	4604      	mov	r4, r0
 800df00:	2301      	movs	r3, #1
 800df02:	e7f0      	b.n	800dee6 <_svfiprintf_r+0x192>
 800df04:	ab03      	add	r3, sp, #12
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	462a      	mov	r2, r5
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <_svfiprintf_r+0x1f4>)
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	4638      	mov	r0, r7
 800df10:	f3af 8000 	nop.w
 800df14:	1c42      	adds	r2, r0, #1
 800df16:	4606      	mov	r6, r0
 800df18:	d1d6      	bne.n	800dec8 <_svfiprintf_r+0x174>
 800df1a:	89ab      	ldrh	r3, [r5, #12]
 800df1c:	065b      	lsls	r3, r3, #25
 800df1e:	f53f af2d 	bmi.w	800dd7c <_svfiprintf_r+0x28>
 800df22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df24:	b01d      	add	sp, #116	; 0x74
 800df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2a:	ab03      	add	r3, sp, #12
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	462a      	mov	r2, r5
 800df30:	4b05      	ldr	r3, [pc, #20]	; (800df48 <_svfiprintf_r+0x1f4>)
 800df32:	a904      	add	r1, sp, #16
 800df34:	4638      	mov	r0, r7
 800df36:	f000 f879 	bl	800e02c <_printf_i>
 800df3a:	e7eb      	b.n	800df14 <_svfiprintf_r+0x1c0>
 800df3c:	0800e390 	.word	0x0800e390
 800df40:	0800e39a 	.word	0x0800e39a
 800df44:	00000000 	.word	0x00000000
 800df48:	0800dca1 	.word	0x0800dca1
 800df4c:	0800e396 	.word	0x0800e396

0800df50 <_printf_common>:
 800df50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df54:	4616      	mov	r6, r2
 800df56:	4699      	mov	r9, r3
 800df58:	688a      	ldr	r2, [r1, #8]
 800df5a:	690b      	ldr	r3, [r1, #16]
 800df5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df60:	4293      	cmp	r3, r2
 800df62:	bfb8      	it	lt
 800df64:	4613      	movlt	r3, r2
 800df66:	6033      	str	r3, [r6, #0]
 800df68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df6c:	4607      	mov	r7, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	b10a      	cbz	r2, 800df76 <_printf_common+0x26>
 800df72:	3301      	adds	r3, #1
 800df74:	6033      	str	r3, [r6, #0]
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	0699      	lsls	r1, r3, #26
 800df7a:	bf42      	ittt	mi
 800df7c:	6833      	ldrmi	r3, [r6, #0]
 800df7e:	3302      	addmi	r3, #2
 800df80:	6033      	strmi	r3, [r6, #0]
 800df82:	6825      	ldr	r5, [r4, #0]
 800df84:	f015 0506 	ands.w	r5, r5, #6
 800df88:	d106      	bne.n	800df98 <_printf_common+0x48>
 800df8a:	f104 0a19 	add.w	sl, r4, #25
 800df8e:	68e3      	ldr	r3, [r4, #12]
 800df90:	6832      	ldr	r2, [r6, #0]
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	42ab      	cmp	r3, r5
 800df96:	dc26      	bgt.n	800dfe6 <_printf_common+0x96>
 800df98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df9c:	1e13      	subs	r3, r2, #0
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	bf18      	it	ne
 800dfa2:	2301      	movne	r3, #1
 800dfa4:	0692      	lsls	r2, r2, #26
 800dfa6:	d42b      	bmi.n	800e000 <_printf_common+0xb0>
 800dfa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfac:	4649      	mov	r1, r9
 800dfae:	4638      	mov	r0, r7
 800dfb0:	47c0      	blx	r8
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	d01e      	beq.n	800dff4 <_printf_common+0xa4>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	6922      	ldr	r2, [r4, #16]
 800dfba:	f003 0306 	and.w	r3, r3, #6
 800dfbe:	2b04      	cmp	r3, #4
 800dfc0:	bf02      	ittt	eq
 800dfc2:	68e5      	ldreq	r5, [r4, #12]
 800dfc4:	6833      	ldreq	r3, [r6, #0]
 800dfc6:	1aed      	subeq	r5, r5, r3
 800dfc8:	68a3      	ldr	r3, [r4, #8]
 800dfca:	bf0c      	ite	eq
 800dfcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfd0:	2500      	movne	r5, #0
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	bfc4      	itt	gt
 800dfd6:	1a9b      	subgt	r3, r3, r2
 800dfd8:	18ed      	addgt	r5, r5, r3
 800dfda:	2600      	movs	r6, #0
 800dfdc:	341a      	adds	r4, #26
 800dfde:	42b5      	cmp	r5, r6
 800dfe0:	d11a      	bne.n	800e018 <_printf_common+0xc8>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	e008      	b.n	800dff8 <_printf_common+0xa8>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	4652      	mov	r2, sl
 800dfea:	4649      	mov	r1, r9
 800dfec:	4638      	mov	r0, r7
 800dfee:	47c0      	blx	r8
 800dff0:	3001      	adds	r0, #1
 800dff2:	d103      	bne.n	800dffc <_printf_common+0xac>
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffc:	3501      	adds	r5, #1
 800dffe:	e7c6      	b.n	800df8e <_printf_common+0x3e>
 800e000:	18e1      	adds	r1, r4, r3
 800e002:	1c5a      	adds	r2, r3, #1
 800e004:	2030      	movs	r0, #48	; 0x30
 800e006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e00a:	4422      	add	r2, r4
 800e00c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e014:	3302      	adds	r3, #2
 800e016:	e7c7      	b.n	800dfa8 <_printf_common+0x58>
 800e018:	2301      	movs	r3, #1
 800e01a:	4622      	mov	r2, r4
 800e01c:	4649      	mov	r1, r9
 800e01e:	4638      	mov	r0, r7
 800e020:	47c0      	blx	r8
 800e022:	3001      	adds	r0, #1
 800e024:	d0e6      	beq.n	800dff4 <_printf_common+0xa4>
 800e026:	3601      	adds	r6, #1
 800e028:	e7d9      	b.n	800dfde <_printf_common+0x8e>
	...

0800e02c <_printf_i>:
 800e02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e030:	7e0f      	ldrb	r7, [r1, #24]
 800e032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e034:	2f78      	cmp	r7, #120	; 0x78
 800e036:	4691      	mov	r9, r2
 800e038:	4680      	mov	r8, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	469a      	mov	sl, r3
 800e03e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e042:	d807      	bhi.n	800e054 <_printf_i+0x28>
 800e044:	2f62      	cmp	r7, #98	; 0x62
 800e046:	d80a      	bhi.n	800e05e <_printf_i+0x32>
 800e048:	2f00      	cmp	r7, #0
 800e04a:	f000 80d4 	beq.w	800e1f6 <_printf_i+0x1ca>
 800e04e:	2f58      	cmp	r7, #88	; 0x58
 800e050:	f000 80c0 	beq.w	800e1d4 <_printf_i+0x1a8>
 800e054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e05c:	e03a      	b.n	800e0d4 <_printf_i+0xa8>
 800e05e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e062:	2b15      	cmp	r3, #21
 800e064:	d8f6      	bhi.n	800e054 <_printf_i+0x28>
 800e066:	a101      	add	r1, pc, #4	; (adr r1, 800e06c <_printf_i+0x40>)
 800e068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e06c:	0800e0c5 	.word	0x0800e0c5
 800e070:	0800e0d9 	.word	0x0800e0d9
 800e074:	0800e055 	.word	0x0800e055
 800e078:	0800e055 	.word	0x0800e055
 800e07c:	0800e055 	.word	0x0800e055
 800e080:	0800e055 	.word	0x0800e055
 800e084:	0800e0d9 	.word	0x0800e0d9
 800e088:	0800e055 	.word	0x0800e055
 800e08c:	0800e055 	.word	0x0800e055
 800e090:	0800e055 	.word	0x0800e055
 800e094:	0800e055 	.word	0x0800e055
 800e098:	0800e1dd 	.word	0x0800e1dd
 800e09c:	0800e105 	.word	0x0800e105
 800e0a0:	0800e197 	.word	0x0800e197
 800e0a4:	0800e055 	.word	0x0800e055
 800e0a8:	0800e055 	.word	0x0800e055
 800e0ac:	0800e1ff 	.word	0x0800e1ff
 800e0b0:	0800e055 	.word	0x0800e055
 800e0b4:	0800e105 	.word	0x0800e105
 800e0b8:	0800e055 	.word	0x0800e055
 800e0bc:	0800e055 	.word	0x0800e055
 800e0c0:	0800e19f 	.word	0x0800e19f
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	602a      	str	r2, [r5, #0]
 800e0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e09f      	b.n	800e218 <_printf_i+0x1ec>
 800e0d8:	6820      	ldr	r0, [r4, #0]
 800e0da:	682b      	ldr	r3, [r5, #0]
 800e0dc:	0607      	lsls	r7, r0, #24
 800e0de:	f103 0104 	add.w	r1, r3, #4
 800e0e2:	6029      	str	r1, [r5, #0]
 800e0e4:	d501      	bpl.n	800e0ea <_printf_i+0xbe>
 800e0e6:	681e      	ldr	r6, [r3, #0]
 800e0e8:	e003      	b.n	800e0f2 <_printf_i+0xc6>
 800e0ea:	0646      	lsls	r6, r0, #25
 800e0ec:	d5fb      	bpl.n	800e0e6 <_printf_i+0xba>
 800e0ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	da03      	bge.n	800e0fe <_printf_i+0xd2>
 800e0f6:	232d      	movs	r3, #45	; 0x2d
 800e0f8:	4276      	negs	r6, r6
 800e0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0fe:	485a      	ldr	r0, [pc, #360]	; (800e268 <_printf_i+0x23c>)
 800e100:	230a      	movs	r3, #10
 800e102:	e012      	b.n	800e12a <_printf_i+0xfe>
 800e104:	682b      	ldr	r3, [r5, #0]
 800e106:	6820      	ldr	r0, [r4, #0]
 800e108:	1d19      	adds	r1, r3, #4
 800e10a:	6029      	str	r1, [r5, #0]
 800e10c:	0605      	lsls	r5, r0, #24
 800e10e:	d501      	bpl.n	800e114 <_printf_i+0xe8>
 800e110:	681e      	ldr	r6, [r3, #0]
 800e112:	e002      	b.n	800e11a <_printf_i+0xee>
 800e114:	0641      	lsls	r1, r0, #25
 800e116:	d5fb      	bpl.n	800e110 <_printf_i+0xe4>
 800e118:	881e      	ldrh	r6, [r3, #0]
 800e11a:	4853      	ldr	r0, [pc, #332]	; (800e268 <_printf_i+0x23c>)
 800e11c:	2f6f      	cmp	r7, #111	; 0x6f
 800e11e:	bf0c      	ite	eq
 800e120:	2308      	moveq	r3, #8
 800e122:	230a      	movne	r3, #10
 800e124:	2100      	movs	r1, #0
 800e126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e12a:	6865      	ldr	r5, [r4, #4]
 800e12c:	60a5      	str	r5, [r4, #8]
 800e12e:	2d00      	cmp	r5, #0
 800e130:	bfa2      	ittt	ge
 800e132:	6821      	ldrge	r1, [r4, #0]
 800e134:	f021 0104 	bicge.w	r1, r1, #4
 800e138:	6021      	strge	r1, [r4, #0]
 800e13a:	b90e      	cbnz	r6, 800e140 <_printf_i+0x114>
 800e13c:	2d00      	cmp	r5, #0
 800e13e:	d04b      	beq.n	800e1d8 <_printf_i+0x1ac>
 800e140:	4615      	mov	r5, r2
 800e142:	fbb6 f1f3 	udiv	r1, r6, r3
 800e146:	fb03 6711 	mls	r7, r3, r1, r6
 800e14a:	5dc7      	ldrb	r7, [r0, r7]
 800e14c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e150:	4637      	mov	r7, r6
 800e152:	42bb      	cmp	r3, r7
 800e154:	460e      	mov	r6, r1
 800e156:	d9f4      	bls.n	800e142 <_printf_i+0x116>
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d10b      	bne.n	800e174 <_printf_i+0x148>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	07de      	lsls	r6, r3, #31
 800e160:	d508      	bpl.n	800e174 <_printf_i+0x148>
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	6861      	ldr	r1, [r4, #4]
 800e166:	4299      	cmp	r1, r3
 800e168:	bfde      	ittt	le
 800e16a:	2330      	movle	r3, #48	; 0x30
 800e16c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e170:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e174:	1b52      	subs	r2, r2, r5
 800e176:	6122      	str	r2, [r4, #16]
 800e178:	f8cd a000 	str.w	sl, [sp]
 800e17c:	464b      	mov	r3, r9
 800e17e:	aa03      	add	r2, sp, #12
 800e180:	4621      	mov	r1, r4
 800e182:	4640      	mov	r0, r8
 800e184:	f7ff fee4 	bl	800df50 <_printf_common>
 800e188:	3001      	adds	r0, #1
 800e18a:	d14a      	bne.n	800e222 <_printf_i+0x1f6>
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e190:	b004      	add	sp, #16
 800e192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	f043 0320 	orr.w	r3, r3, #32
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	4833      	ldr	r0, [pc, #204]	; (800e26c <_printf_i+0x240>)
 800e1a0:	2778      	movs	r7, #120	; 0x78
 800e1a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	6829      	ldr	r1, [r5, #0]
 800e1aa:	061f      	lsls	r7, r3, #24
 800e1ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1b0:	d402      	bmi.n	800e1b8 <_printf_i+0x18c>
 800e1b2:	065f      	lsls	r7, r3, #25
 800e1b4:	bf48      	it	mi
 800e1b6:	b2b6      	uxthmi	r6, r6
 800e1b8:	07df      	lsls	r7, r3, #31
 800e1ba:	bf48      	it	mi
 800e1bc:	f043 0320 	orrmi.w	r3, r3, #32
 800e1c0:	6029      	str	r1, [r5, #0]
 800e1c2:	bf48      	it	mi
 800e1c4:	6023      	strmi	r3, [r4, #0]
 800e1c6:	b91e      	cbnz	r6, 800e1d0 <_printf_i+0x1a4>
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	f023 0320 	bic.w	r3, r3, #32
 800e1ce:	6023      	str	r3, [r4, #0]
 800e1d0:	2310      	movs	r3, #16
 800e1d2:	e7a7      	b.n	800e124 <_printf_i+0xf8>
 800e1d4:	4824      	ldr	r0, [pc, #144]	; (800e268 <_printf_i+0x23c>)
 800e1d6:	e7e4      	b.n	800e1a2 <_printf_i+0x176>
 800e1d8:	4615      	mov	r5, r2
 800e1da:	e7bd      	b.n	800e158 <_printf_i+0x12c>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	6826      	ldr	r6, [r4, #0]
 800e1e0:	6961      	ldr	r1, [r4, #20]
 800e1e2:	1d18      	adds	r0, r3, #4
 800e1e4:	6028      	str	r0, [r5, #0]
 800e1e6:	0635      	lsls	r5, r6, #24
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	d501      	bpl.n	800e1f0 <_printf_i+0x1c4>
 800e1ec:	6019      	str	r1, [r3, #0]
 800e1ee:	e002      	b.n	800e1f6 <_printf_i+0x1ca>
 800e1f0:	0670      	lsls	r0, r6, #25
 800e1f2:	d5fb      	bpl.n	800e1ec <_printf_i+0x1c0>
 800e1f4:	8019      	strh	r1, [r3, #0]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	6123      	str	r3, [r4, #16]
 800e1fa:	4615      	mov	r5, r2
 800e1fc:	e7bc      	b.n	800e178 <_printf_i+0x14c>
 800e1fe:	682b      	ldr	r3, [r5, #0]
 800e200:	1d1a      	adds	r2, r3, #4
 800e202:	602a      	str	r2, [r5, #0]
 800e204:	681d      	ldr	r5, [r3, #0]
 800e206:	6862      	ldr	r2, [r4, #4]
 800e208:	2100      	movs	r1, #0
 800e20a:	4628      	mov	r0, r5
 800e20c:	f7f1 fff0 	bl	80001f0 <memchr>
 800e210:	b108      	cbz	r0, 800e216 <_printf_i+0x1ea>
 800e212:	1b40      	subs	r0, r0, r5
 800e214:	6060      	str	r0, [r4, #4]
 800e216:	6863      	ldr	r3, [r4, #4]
 800e218:	6123      	str	r3, [r4, #16]
 800e21a:	2300      	movs	r3, #0
 800e21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e220:	e7aa      	b.n	800e178 <_printf_i+0x14c>
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	462a      	mov	r2, r5
 800e226:	4649      	mov	r1, r9
 800e228:	4640      	mov	r0, r8
 800e22a:	47d0      	blx	sl
 800e22c:	3001      	adds	r0, #1
 800e22e:	d0ad      	beq.n	800e18c <_printf_i+0x160>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	079b      	lsls	r3, r3, #30
 800e234:	d413      	bmi.n	800e25e <_printf_i+0x232>
 800e236:	68e0      	ldr	r0, [r4, #12]
 800e238:	9b03      	ldr	r3, [sp, #12]
 800e23a:	4298      	cmp	r0, r3
 800e23c:	bfb8      	it	lt
 800e23e:	4618      	movlt	r0, r3
 800e240:	e7a6      	b.n	800e190 <_printf_i+0x164>
 800e242:	2301      	movs	r3, #1
 800e244:	4632      	mov	r2, r6
 800e246:	4649      	mov	r1, r9
 800e248:	4640      	mov	r0, r8
 800e24a:	47d0      	blx	sl
 800e24c:	3001      	adds	r0, #1
 800e24e:	d09d      	beq.n	800e18c <_printf_i+0x160>
 800e250:	3501      	adds	r5, #1
 800e252:	68e3      	ldr	r3, [r4, #12]
 800e254:	9903      	ldr	r1, [sp, #12]
 800e256:	1a5b      	subs	r3, r3, r1
 800e258:	42ab      	cmp	r3, r5
 800e25a:	dcf2      	bgt.n	800e242 <_printf_i+0x216>
 800e25c:	e7eb      	b.n	800e236 <_printf_i+0x20a>
 800e25e:	2500      	movs	r5, #0
 800e260:	f104 0619 	add.w	r6, r4, #25
 800e264:	e7f5      	b.n	800e252 <_printf_i+0x226>
 800e266:	bf00      	nop
 800e268:	0800e3a1 	.word	0x0800e3a1
 800e26c:	0800e3b2 	.word	0x0800e3b2

0800e270 <_realloc_r>:
 800e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e274:	4680      	mov	r8, r0
 800e276:	4614      	mov	r4, r2
 800e278:	460e      	mov	r6, r1
 800e27a:	b921      	cbnz	r1, 800e286 <_realloc_r+0x16>
 800e27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e280:	4611      	mov	r1, r2
 800e282:	f7ff bbd1 	b.w	800da28 <_malloc_r>
 800e286:	b92a      	cbnz	r2, 800e294 <_realloc_r+0x24>
 800e288:	f7ff fcbe 	bl	800dc08 <_free_r>
 800e28c:	4625      	mov	r5, r4
 800e28e:	4628      	mov	r0, r5
 800e290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e294:	f000 f843 	bl	800e31e <_malloc_usable_size_r>
 800e298:	4284      	cmp	r4, r0
 800e29a:	4607      	mov	r7, r0
 800e29c:	d802      	bhi.n	800e2a4 <_realloc_r+0x34>
 800e29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2a2:	d812      	bhi.n	800e2ca <_realloc_r+0x5a>
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f7ff fbbe 	bl	800da28 <_malloc_r>
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d0ed      	beq.n	800e28e <_realloc_r+0x1e>
 800e2b2:	42bc      	cmp	r4, r7
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4631      	mov	r1, r6
 800e2b8:	bf28      	it	cs
 800e2ba:	463a      	movcs	r2, r7
 800e2bc:	f000 f821 	bl	800e302 <memcpy>
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	f7ff fca0 	bl	800dc08 <_free_r>
 800e2c8:	e7e1      	b.n	800e28e <_realloc_r+0x1e>
 800e2ca:	4635      	mov	r5, r6
 800e2cc:	e7df      	b.n	800e28e <_realloc_r+0x1e>

0800e2ce <memmove>:
 800e2ce:	4288      	cmp	r0, r1
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	eb01 0402 	add.w	r4, r1, r2
 800e2d6:	d902      	bls.n	800e2de <memmove+0x10>
 800e2d8:	4284      	cmp	r4, r0
 800e2da:	4623      	mov	r3, r4
 800e2dc:	d807      	bhi.n	800e2ee <memmove+0x20>
 800e2de:	1e43      	subs	r3, r0, #1
 800e2e0:	42a1      	cmp	r1, r4
 800e2e2:	d008      	beq.n	800e2f6 <memmove+0x28>
 800e2e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2ec:	e7f8      	b.n	800e2e0 <memmove+0x12>
 800e2ee:	4402      	add	r2, r0
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	428a      	cmp	r2, r1
 800e2f4:	d100      	bne.n	800e2f8 <memmove+0x2a>
 800e2f6:	bd10      	pop	{r4, pc}
 800e2f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e300:	e7f7      	b.n	800e2f2 <memmove+0x24>

0800e302 <memcpy>:
 800e302:	440a      	add	r2, r1
 800e304:	4291      	cmp	r1, r2
 800e306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e30a:	d100      	bne.n	800e30e <memcpy+0xc>
 800e30c:	4770      	bx	lr
 800e30e:	b510      	push	{r4, lr}
 800e310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e314:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e318:	4291      	cmp	r1, r2
 800e31a:	d1f9      	bne.n	800e310 <memcpy+0xe>
 800e31c:	bd10      	pop	{r4, pc}

0800e31e <_malloc_usable_size_r>:
 800e31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e322:	1f18      	subs	r0, r3, #4
 800e324:	2b00      	cmp	r3, #0
 800e326:	bfbc      	itt	lt
 800e328:	580b      	ldrlt	r3, [r1, r0]
 800e32a:	18c0      	addlt	r0, r0, r3
 800e32c:	4770      	bx	lr
	...

0800e330 <_init>:
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e332:	bf00      	nop
 800e334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e336:	bc08      	pop	{r3}
 800e338:	469e      	mov	lr, r3
 800e33a:	4770      	bx	lr

0800e33c <_fini>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	bf00      	nop
 800e340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e342:	bc08      	pop	{r3}
 800e344:	469e      	mov	lr, r3
 800e346:	4770      	bx	lr
